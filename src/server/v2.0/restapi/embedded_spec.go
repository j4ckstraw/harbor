// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "These APIs provide services for manipulating Harbor project.",
    "title": "Harbor API",
    "version": "2.0"
  },
  "host": "localhost",
  "basePath": "/api/v2.0",
  "paths": {
    "/audit-logs": {
      "get": {
        "description": "This endpoint let user see the recent operation logs of the projects which he is member of\n",
        "tags": [
          "auditlog"
        ],
        "summary": "Get recent logs of the projects which the user is a member of",
        "operationId": "listAuditLogs",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/configurations": {
      "get": {
        "description": "This endpoint is for retrieving system configurations that only provides for admin user.\n",
        "tags": [
          "configure"
        ],
        "summary": "Get system configurations.",
        "operationId": "getConfigurations",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get system configurations successfully. The response body is a map.",
            "schema": {
              "$ref": "#/definitions/ConfigurationsResponse"
            }
          },
          "401": {
            "description": "User need to log in first.ÃŸ"
          },
          "403": {
            "description": "User does not have permission of admin role."
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      },
      "put": {
        "description": "This endpoint is for modifying system configurations that only provides for admin user.\n",
        "tags": [
          "configure"
        ],
        "summary": "Modify system configurations.",
        "operationId": "updateConfigurations",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The configuration map can contain a subset of the attributes of the schema, which are to be updated.",
            "name": "configurations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Configurations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Modify system configurations successfully."
          },
          "401": {
            "description": "User need to log in first."
          },
          "403": {
            "description": "User does not have permission of admin role."
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check the status of Harbor components",
        "tags": [
          "health"
        ],
        "summary": "Check the status of Harbor components",
        "operationId": "getHealth",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "The health status of Harbor components",
            "schema": {
              "$ref": "#/definitions/OverallHealthStatus"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/icons/{digest}": {
      "get": {
        "description": "Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter \"digest\" in the path doesn't match the hash of the returned content",
        "tags": [
          "icon"
        ],
        "summary": "Get artifact icon",
        "operationId": "getIcon",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/digest"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Icon"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/internalconfig": {
      "get": {
        "description": "This endpoint is for retrieving system configurations that only provides for internal api call.\n",
        "tags": [
          "configure"
        ],
        "summary": "Get internal configurations.",
        "operationId": "getInternalconfig",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get system configurations successfully. The response body is a map.",
            "schema": {
              "$ref": "#/definitions/InternalConfigurationsResponse"
            }
          },
          "401": {
            "description": "User need to log in first."
          },
          "403": {
            "description": "User does not have permission of admin role."
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      }
    },
    "/labels": {
      "get": {
        "description": "This endpoint let user list labels by name, scope and project_id\n",
        "tags": [
          "label"
        ],
        "summary": "List labels according to the query strings.",
        "operationId": "ListLabels",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "The label name.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The label scope. Valid values are g and p. g for global labels and p for project labels.",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Relevant project ID, required when scope is p.",
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Label"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint let user creates a label.\n",
        "tags": [
          "label"
        ],
        "summary": "Post creates a label",
        "operationId": "CreateLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The json object of label.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/labels/{label_id}": {
      "get": {
        "description": "This endpoint let user get the label by specific ID.\n",
        "tags": [
          "label"
        ],
        "summary": "Get the label specified by ID.",
        "operationId": "GetLabelByID",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/labelId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint let user update label properties.\n",
        "tags": [
          "label"
        ],
        "summary": "Update the label properties.",
        "operationId": "UpdateLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/labelId"
          },
          {
            "description": "The updated label json object.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the label specified by ID.\n",
        "tags": [
          "label"
        ],
        "summary": "Delete the label specified by ID.",
        "operationId": "DeleteLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/labelId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/ldap/groups/search": {
      "get": {
        "description": "This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Search available ldap groups.",
        "operationId": "searchLdapGroup",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "Ldap group name",
            "name": "groupname",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The LDAP group DN",
            "name": "groupdn",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search ldap group successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroup"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/ldap/ping": {
      "post": {
        "description": "This endpoint ping the available ldap service for test related configuration parameters.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Ping available ldap service.",
        "operationId": "pingLdap",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system.",
            "name": "ldapconf",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LdapConf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ping ldap service successfully.",
            "schema": {
              "$ref": "#/definitions/LdapPingResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/ldap/users/import": {
      "post": {
        "description": "This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Import selected available ldap users.",
        "operationId": "importLdapUser",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.",
            "name": "uid_list",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LdapImportUsers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Add ldap users successfully."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "description": "Failed import some users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapFailedImportUser"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/ldap/users/search": {
      "get": {
        "description": "This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Search available ldap users.",
        "operationId": "searchLdapUser",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "Registered user ID",
            "name": "username",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search ldap users successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapUser"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/instances": {
      "get": {
        "description": "List P2P provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P provider instances",
        "operationId": "ListInstances",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instance"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of preheating provider instances"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create p2p provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "Create p2p provider instances",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/instances/ping": {
      "post": {
        "description": "This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)\n",
        "tags": [
          "preheat"
        ],
        "summary": "Ping status of a instance.",
        "operationId": "PingInstances",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "description": "Instance not found (when instance is provided by ID)."
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/instances/{preheat_instance_name}": {
      "get": {
        "description": "Get a P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Get a P2P provider instance",
        "operationId": "GetInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/instanceName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Update the specified P2P provider instance",
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/instanceName"
          },
          {
            "description": "The instance to update",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Delete the specified P2P provider instance",
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/instanceName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/p2p/preheat/providers": {
      "get": {
        "description": "List P2P providers",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P providers",
        "operationId": "ListProviders",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metadata"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "description": "This API simply replies a pong to indicate the process to handle API is up, disregarding the health status of dependent components.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "ping"
        ],
        "summary": "Ping Harbor to check if it's alive.",
        "operationId": "getPing",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "The API server is alive",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "description": "This endpoint returns projects created by Harbor.",
        "tags": [
          "project"
        ],
        "summary": "List projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "type": "string",
            "description": "The name of project.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "format": "int32",
            "description": "The project is public or private.",
            "name": "public",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of project owner.",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Bool value indicating whether return detailed information of the project",
            "name": "with_detail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return all matched projects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of projects"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint is for user to create a new project.",
        "tags": [
          "project"
        ],
        "summary": "Create a new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/resourceNameInLocation"
          },
          {
            "description": "New created project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "head": {
        "description": "This endpoint is used to check if the project name provided already exist.",
        "tags": [
          "project"
        ],
        "summary": "Check if the project name user provided already exists.",
        "operationId": "headProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "Project name for checking exists.",
            "name": "project_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}": {
      "get": {
        "description": "This endpoint returns specific project information by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Return specific project detail information",
        "operationId": "getProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched project information.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is aimed to update the properties of a project.",
        "tags": [
          "project"
        ],
        "summary": "Update properties for a selected project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "description": "Updates of project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint is aimed to delete project by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Delete project by projectID",
        "operationId": "deleteProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/_deletable": {
      "get": {
        "description": "Get the deletable status of the project",
        "tags": [
          "project"
        ],
        "summary": "Get the deletable status of the project",
        "operationId": "getProjectDeletable",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return deletable status of the project.",
            "schema": {
              "$ref": "#/definitions/ProjectDeletable"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/immutabletagrules": {
      "get": {
        "description": "This endpoint returns the immutable tag rules of a project\n",
        "tags": [
          "immutable"
        ],
        "summary": "List all immutable tag rules of current project",
        "operationId": "ListImmuRules",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImmutableRule"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of immutable tag"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint add an immutable tag rule to the project\n",
        "tags": [
          "immutable"
        ],
        "summary": "Add an immutable tag rule to current project",
        "operationId": "CreateImmuRule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "name": "ImmutableRule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImmutableRule"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}": {
      "put": {
        "tags": [
          "immutable"
        ],
        "summary": "Update the immutable tag rule or enable or disable the rule",
        "operationId": "UpdateImmuRule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/immutableRuleId"
          },
          {
            "name": "ImmutableRule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImmutableRule"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "immutable"
        ],
        "summary": "Delete the immutable tag rule.",
        "operationId": "DeleteImmuRule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/immutableRuleId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/members": {
      "get": {
        "description": "Get all project member information",
        "tags": [
          "member"
        ],
        "summary": "Get all project member information",
        "operationId": "listProjectMembers",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "The entity name to search.",
            "name": "entityname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get project members successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectMemberEntity"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of members"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group. ",
        "tags": [
          "member"
        ],
        "summary": "Create project member",
        "operationId": "createProjectMember",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "name": "project_member",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectMember"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project member created successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/members/{mid}": {
      "get": {
        "description": "Get the project member information",
        "tags": [
          "member"
        ],
        "summary": "Get the project member information",
        "operationId": "getProjectMember",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The member ID",
            "name": "mid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project member retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ProjectMemberEntity"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update project member relationship",
        "tags": [
          "member"
        ],
        "summary": "Update project member",
        "operationId": "updateProjectMember",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Member ID.",
            "name": "mid",
            "in": "path",
            "required": true
          },
          {
            "name": "role",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Delete project member",
        "operationId": "deleteProjectMember",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Member ID.",
            "name": "mid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/metadatas/": {
      "get": {
        "description": "Get the metadata of the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Get the metadata of the specific project",
        "operationId": "listProjectMetadatas",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Add metadata for the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Add metadata for the specific project",
        "operationId": "addProjectMetadatas",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "name": "metadata",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/metadatas/{meta_name}": {
      "get": {
        "description": "Get the specific metadata of the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Get the specific metadata of the specific project",
        "operationId": "getProjectMetadata",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "type": "string",
            "description": "The name of metadata.",
            "name": "meta_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the specific metadata for the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Update the specific metadata for the specific project",
        "operationId": "updateProjectMetadata",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "type": "string",
            "description": "The name of metadata.",
            "name": "meta_name",
            "in": "path",
            "required": true
          },
          {
            "name": "metadata",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the specific metadata for the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Delete the specific metadata for the specific project",
        "operationId": "deleteProjectMetadata",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "type": "string",
            "description": "The name of metadata.",
            "name": "meta_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots": {
      "get": {
        "description": "Get all robot accounts of specified project",
        "tags": [
          "robotv1"
        ],
        "summary": "Get all robot accounts of specified project",
        "operationId": "ListRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robotv1"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreateV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByIDV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Used to disable/enable a specified robot account.",
        "tags": [
          "robotv1"
        ],
        "summary": "Update status of robot account.",
        "operationId": "UpdateRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/robotId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobotV1",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/scanner": {
      "get": {
        "description": "Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.",
        "tags": [
          "project"
        ],
        "summary": "Get project level scanner",
        "operationId": "getScannerOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the scanner registration.",
            "schema": {
              "$ref": "#/definitions/ScannerRegistration"
            }
          },
          "400": {
            "description": "Bad project ID"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "403": {
            "description": "Request is not allowed"
          },
          "404": {
            "description": "The requested object is not found"
          },
          "500": {
            "description": "Internal server error happened"
          }
        }
      },
      "put": {
        "description": "Set one of the system configured scanner registration as the indepndent scanner of the specified project.",
        "tags": [
          "project"
        ],
        "summary": "Configure scanner for the specified project",
        "operationId": "setScannerOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectScanner"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/scanner/candidates": {
      "get": {
        "description": "Retrieve the system configured scanner registrations as candidates of setting project level scanner.",
        "tags": [
          "project"
        ],
        "summary": "Get scanner registration candidates for configurating project level scanner",
        "operationId": "listScannerCandidatesOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scanner registrations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScannerRegistration"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/summary": {
      "get": {
        "description": "Get summary of the project.",
        "tags": [
          "project"
        ],
        "summary": "Get summary of the project.",
        "operationId": "getProjectSummary",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get summary of the project successfully.",
            "schema": {
              "$ref": "#/definitions/ProjectSummary"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/events": {
      "get": {
        "description": "Get supportted event types and notify types.",
        "tags": [
          "webhook"
        ],
        "summary": "Get supported event types and notify types.",
        "operationId": "GetSupportedEventTypes",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SupportedWebhookEventTypes"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/jobs": {
      "get": {
        "description": "This endpoint returns webhook jobs of a project.\n",
        "tags": [
          "webhookjob"
        ],
        "summary": "List project webhook jobs",
        "operationId": "ListWebhookJobs",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The policy ID.",
            "name": "policy_id",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The status of webhook job.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List project webhook jobs successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookJob"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/lasttrigger": {
      "get": {
        "description": "This endpoint returns last trigger information of project webhook policy.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Get project webhook policy last trigger info",
        "operationId": "LastTrigger",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          }
        ],
        "responses": {
          "200": {
            "description": "Test webhook connection successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookLastTrigger"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/policies": {
      "get": {
        "description": "This endpoint returns webhook policies of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "List project webhook policies.",
        "operationId": "ListWebhookPoliciesOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of webhook policies."
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint create a webhook policy if the project does not have one.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Create project webhook policy.",
        "operationId": "CreateWebhookPolicyOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "description": "Properties \"targets\" and \"event_types\" needed.",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project webhook policy create successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}": {
      "get": {
        "description": "This endpoint returns specified webhook policy of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Get project webhook policy",
        "operationId": "GetWebhookPolicyOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/webhookPolicyId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get webhook policy successfully.",
            "schema": {
              "$ref": "#/definitions/WebhookPolicy"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is aimed to update the webhook policy of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Update webhook policy of a project.",
        "operationId": "UpdateWebhookPolicyOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/webhookPolicyId"
          },
          {
            "description": "All properties needed except \"id\", \"project_id\", \"creation_time\", \"update_time\".",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint is aimed to delete webhookpolicy of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Delete webhook policy of a project",
        "operationId": "DeleteWebhookPolicyOfProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/isResourceName"
          },
          {
            "$ref": "#/parameters/projectNameOrId"
          },
          {
            "$ref": "#/parameters/webhookPolicyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/logs": {
      "get": {
        "description": "Get recent logs of the projects",
        "tags": [
          "project"
        ],
        "summary": "Get recent logs of the projects",
        "operationId": "getLogs",
        "parameters": [
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies": {
      "get": {
        "description": "List preheat policies",
        "tags": [
          "preheat"
        ],
        "summary": "List preheat policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List preheat policies success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PreheatPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of policies"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a preheat policy under a project",
        "tags": [
          "preheat"
        ],
        "summary": "Create a preheat policy under a project",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}": {
      "get": {
        "description": "Get a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Get a preheat policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preheat policy success",
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Update preheat policy",
        "operationId": "UpdatePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Manual preheat",
        "tags": [
          "preheat"
        ],
        "summary": "Manual preheat",
        "operationId": "ManualPreheat",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Delete a preheat policy",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions": {
      "get": {
        "description": "List executions for the given policy",
        "tags": [
          "preheat"
        ],
        "summary": "List executions for the given policy",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List executions success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Execution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of executions"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}": {
      "get": {
        "description": "Get a execution detail by id",
        "tags": [
          "preheat"
        ],
        "summary": "Get a execution detail by id",
        "operationId": "GetExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get execution success",
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "patch": {
        "description": "Stop a execution",
        "tags": [
          "preheat"
        ],
        "summary": "Stop a execution",
        "operationId": "StopExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "description": "The data of execution",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks": {
      "get": {
        "description": "List all the related tasks for the given execution",
        "tags": [
          "preheat"
        ],
        "summary": "List all the related tasks for the given execution",
        "operationId": "ListTasks",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "List tasks success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tasks"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs": {
      "get": {
        "description": "Get the log text stream of the specified task for the given execution",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "preheat"
        ],
        "summary": "Get the log text stream of the specified task for the given execution",
        "operationId": "GetPreheatLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/preheatPolicyName"
          },
          {
            "$ref": "#/parameters/executionId"
          },
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get log success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/preheat/providers": {
      "get": {
        "description": "Get all providers at project level",
        "tags": [
          "preheat"
        ],
        "summary": "Get all providers at project level",
        "operationId": "ListProvidersUnderProject",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderUnderProject"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories": {
      "get": {
        "description": "List repositories of the specified project",
        "tags": [
          "repository"
        ],
        "summary": "List repositories",
        "operationId": "listRepositories",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}": {
      "get": {
        "description": "Get the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Get repository",
        "operationId": "getRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Update repository",
        "operationId": "updateRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "description": "The JSON object of repository.",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Delete repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts": {
      "get": {
        "description": "List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to",
        "tags": [
          "artifact"
        ],
        "summary": "List artifacts",
        "operationId": "listArtifacts",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/acceptVulnerabilities"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are included inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are included inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is included inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of artifacts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Copy the artifact specified in the \"from\" parameter to the repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Copy artifact",
        "operationId": "CopyArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "type": "string",
            "description": "The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".",
            "name": "from",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}": {
      "get": {
        "description": "Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the specific artifact",
        "operationId": "getArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/acceptVulnerabilities"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are inclued inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are inclued inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is inclued inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is inclued inside the returning artifacts",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag",
        "tags": [
          "artifact"
        ],
        "summary": "Delete the specific artifact",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities": {
      "get": {
        "description": "Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the vulnerabilities addition of the specific artifact",
        "operationId": "getVulnerabilitiesAddition",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/acceptVulnerabilities"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the vulnerabilities addition"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}": {
      "get": {
        "description": "Get the addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the addition of the specific artifact",
        "operationId": "getAddition",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "enum": [
              "build_history",
              "values.yaml",
              "readme.md",
              "dependencies"
            ],
            "type": "string",
            "description": "The type of addition.",
            "name": "addition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the addition"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels": {
      "post": {
        "description": "Add label to the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Add label to artifact",
        "operationId": "addLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "description": "The label that added to the artifact. Only the ID property is needed.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}": {
      "delete": {
        "description": "Remove the label from the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Remove label from artifact",
        "operationId": "removeLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the label that removed from the artifact.",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan": {
      "post": {
        "description": "Scan the specified artifact",
        "tags": [
          "scan"
        ],
        "summary": "Scan the artifact",
        "operationId": "scanArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log": {
      "get": {
        "description": "Get the log of the scan report",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "scan"
        ],
        "summary": "Get the log of the scan report",
        "operationId": "getReportLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "type": "string",
            "description": "The report id to get the log",
            "name": "report_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get scan log file",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags": {
      "get": {
        "description": "List tags of the specific artifact",
        "tags": [
          "artifact"
        ],
        "summary": "List tags",
        "operationId": "listTags",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the returning tags",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the returning tags",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tags"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a tag for the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "description": "The JSON object of tag.",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}": {
      "delete": {
        "description": "Delete the tag of the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Delete tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/tagName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/quotas": {
      "get": {
        "description": "List quotas",
        "tags": [
          "quota"
        ],
        "summary": "List quotas",
        "operationId": "listQuotas",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "The reference type of quota.",
            "name": "reference",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The reference id of quota.",
            "name": "reference_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort method, valid values include:\n'hard.resource_name', '-hard.resource_name', 'used.resource_name', '-used.resource_name'.\nHere '-' stands for descending order, resource_name should be the real resource name of the quota.\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the quotas.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Quota"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of access logs"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/quotas/{id}": {
      "get": {
        "description": "Get the specified quota",
        "tags": [
          "quota"
        ],
        "summary": "Get the specified quota",
        "operationId": "getQuota",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the quota.",
            "schema": {
              "$ref": "#/definitions/Quota"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update hard limits of the specified quota",
        "tags": [
          "quota"
        ],
        "summary": "Update the specified quota",
        "operationId": "updateQuota",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The new hard limits for the quota",
            "name": "hard",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuotaUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/registries": {
      "get": {
        "description": "List the registries",
        "tags": [
          "registry"
        ],
        "summary": "List the registries",
        "operationId": "listRegistries",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "Deprecated, use ` + "`" + `q` + "`" + ` instead.",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Registry"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a registry",
        "tags": [
          "registry"
        ],
        "summary": "Create a registry",
        "operationId": "createRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The registry",
            "name": "registry",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/registries/ping": {
      "post": {
        "description": "Check status of a registry",
        "tags": [
          "registry"
        ],
        "summary": "Check status of a registry",
        "operationId": "pingRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The registry",
            "name": "registry",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryPing"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/registries/{id}": {
      "get": {
        "description": "Get the specific registry",
        "tags": [
          "registry"
        ],
        "summary": "Get the specific registry",
        "operationId": "getRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Registry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the registry",
        "tags": [
          "registry"
        ],
        "summary": "Update the registry",
        "operationId": "updateRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The registry ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The registry",
            "name": "registry",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the specific registry",
        "tags": [
          "registry"
        ],
        "summary": "Delete the specific registry",
        "operationId": "deleteRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Registry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/registries/{id}/info": {
      "get": {
        "description": "Get the registry info",
        "tags": [
          "registry"
        ],
        "summary": "Get the registry info",
        "operationId": "getRegistryInfo",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Registry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegistryInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/adapterinfos": {
      "get": {
        "description": "List all registered registry provider information",
        "tags": [
          "registry"
        ],
        "summary": "List all registered registry provider information",
        "operationId": "listRegistryProviderInfos",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/RegistryProviderInfo"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/adapters": {
      "get": {
        "description": "List registry adapters",
        "tags": [
          "registry"
        ],
        "summary": "List registry adapters",
        "operationId": "listRegistryProviderTypes",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions": {
      "get": {
        "description": "List replication executions",
        "tags": [
          "replication"
        ],
        "summary": "List replication executions",
        "operationId": "listReplicationExecutions",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "integer",
            "description": "The ID of the policy that the executions belong to.",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The execution status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The trigger mode.",
            "name": "trigger",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Start one replication execution according to the policy",
        "tags": [
          "replication"
        ],
        "summary": "Start one replication execution",
        "operationId": "startReplication",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The ID of policy that the execution belongs to",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartReplicationExecution"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions/{id}": {
      "get": {
        "description": "Get the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Get the specific replication execution",
        "operationId": "getReplicationExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationExecution"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Stop the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Stop the specific replication execution",
        "operationId": "stopReplication",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions/{id}/tasks": {
      "get": {
        "description": "List replication tasks for a specific execution",
        "tags": [
          "replication"
        ],
        "summary": "List replication tasks for a specific execution",
        "operationId": "listReplicationTasks",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The task status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The resource type.",
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/executions/{id}/tasks/{task_id}/log": {
      "get": {
        "description": "Get the log of the specific replication task",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "replication"
        ],
        "summary": "Get the log of the specific replication task",
        "operationId": "getReplicationLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the task.",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of response body"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/policies": {
      "get": {
        "description": "List replication policies",
        "tags": [
          "replication"
        ],
        "summary": "List replication policies",
        "operationId": "listReplicationPolicies",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "Deprecated, use \"query\" instead. The policy name.",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Create a replication policy",
        "operationId": "createReplicationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The replication policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplicationPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/replication/policies/{id}": {
      "get": {
        "description": "Get the specific replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Get the specific replication policy",
        "operationId": "getReplicationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Policy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationPolicy"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Update the replication policy",
        "operationId": "updateReplicationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The policy ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The replication policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplicationPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the specific replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Delete the specific replication policy",
        "operationId": "deleteReplicationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Replication policy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/repositories": {
      "get": {
        "description": "List all authorized repositories",
        "tags": [
          "repository"
        ],
        "summary": "List all authorized repositories",
        "operationId": "listAllRepositories",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions": {
      "post": {
        "description": "Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.",
        "tags": [
          "Retention"
        ],
        "summary": "Create Retention Policy",
        "operationId": "createRetention",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "Create Retention Policy successfully.",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/metadatas": {
      "get": {
        "description": "Get Retention Metadatas.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Metadatas",
        "operationId": "getRentenitionMetadata",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention Metadatas successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionMetadata"
            }
          }
        }
      }
    },
    "/retentions/{id}": {
      "get": {
        "description": "Get Retention Policy.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Policy",
        "operationId": "getRetention",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention Policy successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.",
        "tags": [
          "Retention"
        ],
        "summary": "Update Retention Policy",
        "operationId": "updateRetention",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Retention Policy successfully."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.",
        "tags": [
          "Retention"
        ],
        "summary": "Delete Retention Policy",
        "operationId": "deleteRetention",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update Retention Policy successfully."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions": {
      "get": {
        "description": "Get Retention executions, execution status may be delayed before job service schedule it up.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention executions",
        "operationId": "listRetentionExecutions",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a Retention execution successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Trigger a Retention Execution",
        "operationId": "triggerRetentionExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dry_run": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger a Retention job successfully."
          },
          "201": {
            "$ref": "#/responses/201"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}": {
      "patch": {
        "description": "Stop a Retention execution, only support \"stop\" action now.",
        "tags": [
          "Retention"
        ],
        "summary": "Stop a Retention execution",
        "operationId": "operateRetentionExecution",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "description": "The action, only support \"stop\" now.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stop a Retention job successfully."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks": {
      "get": {
        "description": "Get Retention tasks, each repository as a task.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention tasks",
        "operationId": "listRetentionTasks",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job tasks successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecutionTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks/{tid}": {
      "get": {
        "description": "Get Retention job task log, tags ratain or deletion detail will be shown in a table.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention job task log",
        "operationId": "getRetentionTaskLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "tid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job task log successfully.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/robots": {
      "get": {
        "description": "List the robot accounts with the specified level and project.",
        "tags": [
          "robot"
        ],
        "summary": "Get robot account",
        "operationId": "ListRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robot"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByID",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint updates specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Update a robot account",
        "operationId": "UpdateRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobot",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "patch": {
        "description": "Refresh the robot secret",
        "tags": [
          "robot"
        ],
        "summary": "Refresh the robot secret",
        "operationId": "RefreshSec",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/robotId"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robotSec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return refreshed robot sec.",
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scanners": {
      "get": {
        "description": "Returns a list of currently configured scanner registrations.\n",
        "tags": [
          "scanner"
        ],
        "summary": "List scanner registrations",
        "operationId": "listScanners",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scanner registrations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScannerRegistration"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Creats a new scanner registration with the given data.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Create a scanner registration",
        "operationId": "createScanner",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "A scanner registration to be created.",
            "name": "registration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScannerRegistrationReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scanners/ping": {
      "post": {
        "description": "Pings scanner adapter to test endpoint URL and authorization settings.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Tests scanner registration settings",
        "operationId": "pingScanner",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "A scanner registration settings to be tested.",
            "name": "settings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScannerRegistrationSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scanners/{registration_id}": {
      "get": {
        "description": "Retruns the details of the specified scanner registration.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Get a scanner registration details",
        "operationId": "getScanner",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "The scanner registration identifer.",
            "name": "registration_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the scanner registration.",
            "schema": {
              "$ref": "#/definitions/ScannerRegistration"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Updates the specified scanner registration.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Update a scanner registration",
        "operationId": "updateScanner",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A scanner registraiton to be updated.",
            "name": "registration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScannerRegistrationReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Deletes the specified scanner registration.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Delete a scanner registration",
        "operationId": "deleteScanner",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully and return the deleted registration",
            "schema": {
              "$ref": "#/definitions/ScannerRegistration"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "patch": {
        "description": "Set the specified scanner registration as the system default one.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Set system default scanner registration",
        "operationId": "setScannerAsDefault",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IsDefault"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set the specified scanner registration as system default"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scanners/{registration_id}/metadata": {
      "get": {
        "description": "Get the metadata of the specified scanner registration, including the capabilities and customized properties.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Get the metadata of the specified scanner registration",
        "operationId": "getScannerMetadata",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the specified scanner adapter",
            "schema": {
              "$ref": "#/definitions/ScannerAdapterMetadata"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scans/all/metrics": {
      "get": {
        "description": "Get the metrics of the latest scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scan all process",
        "operationId": "getLatestScanAllMetrics",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/scans/schedule/metrics": {
      "get": {
        "description": "Get the metrics of the latest scheduled scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scheduled scan all process",
        "operationId": "getLatestScheduledScanAllMetrics",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/search": {
      "get": {
        "description": "The Search endpoint returns information about the projects, repositories and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order.",
        "tags": [
          "search"
        ],
        "summary": "Search for projects, repositories and helm charts",
        "operationId": "search",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "Search parameter for project and repository name.",
            "name": "q",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of search results",
            "schema": {
              "$ref": "#/definitions/Search"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "description": "Get the statistic information about the projects and repositories",
        "tags": [
          "statistic"
        ],
        "summary": "Get the statistic information about the projects and repositories",
        "operationId": "getStatistic",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "The statistic information",
            "schema": {
              "$ref": "#/definitions/Statistic"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/CVEAllowlist": {
      "get": {
        "description": "Get the system level allowlist of CVE.  This API can be called by all authenticated users.",
        "tags": [
          "SystemCVEAllowlist"
        ],
        "summary": "Get the system level allowlist of CVE.",
        "operationId": "getSystemCVEAllowlist",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the CVE allowlist.",
            "schema": {
              "$ref": "#/definitions/CVEAllowlist"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.",
        "tags": [
          "SystemCVEAllowlist"
        ],
        "summary": "Update the system level allowlist of CVE.",
        "operationId": "putSystemCVEAllowlist",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The allowlist with new content",
            "name": "allowlist",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CVEAllowlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the CVE allowlist."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc": {
      "get": {
        "description": "This endpoint let user get gc execution history.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc results.",
        "operationId": "getGCHistory",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GCHistory"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of history"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc/schedule": {
      "get": {
        "description": "This endpoint is for get schedule of gc job.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc's schedule.",
        "operationId": "getGCSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc's schedule.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Update gc's schedule.",
        "operationId": "updateGCSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated gc's schedule successfully."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Create a gc schedule.",
        "operationId": "createGCSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc/{gc_id}": {
      "get": {
        "description": "This endpoint let user get gc status filtered by specific ID.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc status.",
        "operationId": "getGC",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/gcId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/gc/{gc_id}/log": {
      "get": {
        "description": "This endpoint let user get gc job logs filtered by specific ID.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "gc"
        ],
        "summary": "Get gc job log.",
        "operationId": "getGCLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/gcId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/system/oidc/ping": {
      "post": {
        "description": "Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.\n",
        "tags": [
          "oidc"
        ],
        "summary": "Test the OIDC endpoint.",
        "operationId": "pingOIDC",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "Request body for OIDC endpoint to be tested.",
            "name": "endpoint",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "The URL of OIDC endpoint to be tested.",
                  "type": "string"
                },
                "verify_cert": {
                  "description": "Whether the certificate should be verified",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        }
      }
    },
    "/system/scanAll/schedule": {
      "get": {
        "description": "This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Get scan all's schedule.",
        "operationId": "getScanAllSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a schedule for the scan all job, which scans all of images in Harbor.",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Update scan all's schedule.",
        "operationId": "updateScanAllSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "Updates the schedule of scan all job, which scans all of images in Harbor.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Create a schedule or a manual trigger for the scan all job.",
        "operationId": "createScanAllSchedule",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "Create a schedule or a manual trigger for the scan all job.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/systeminfo": {
      "get": {
        "description": "This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get general system info",
        "operationId": "getSystemInfo",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get general info successfully.",
            "schema": {
              "$ref": "#/definitions/GeneralInfo"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/systeminfo/getcert": {
      "get": {
        "description": "This endpoint is for downloading a default root certificate.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "systeminfo"
        ],
        "summary": "Get default root certificate.",
        "operationId": "getCert",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get default root certificate successfully.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "To set the filename of the downloaded file."
              }
            }
          },
          "404": {
            "description": "Not found the default root certificate."
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/systeminfo/volumes": {
      "get": {
        "description": "This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get system volume info (total/free size).",
        "operationId": "getVolumes",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get system volumes successfully.",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/usergroups": {
      "get": {
        "description": "Get all user groups information",
        "tags": [
          "usergroup"
        ],
        "summary": "Get all user groups information",
        "operationId": "listUserGroups",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get user group successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroup"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create user group information",
        "tags": [
          "usergroup"
        ],
        "summary": "Create user group",
        "operationId": "createUserGroup",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "name": "usergroup",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User group created successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/usergroups/{group_id}": {
      "get": {
        "description": "Get user group information",
        "tags": [
          "usergroup"
        ],
        "summary": "Get user group information",
        "operationId": "getUserGroup",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Group ID",
            "name": "group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User group get successfully.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update user group information",
        "tags": [
          "usergroup"
        ],
        "summary": "Update group information",
        "operationId": "updateUserGroup",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Group ID",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "name": "usergroup",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete user group",
        "tags": [
          "usergroup"
        ],
        "summary": "Delete user group",
        "operationId": "deleteUserGroup",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "name": "group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List users",
        "operationId": "listUsers",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "return the list of users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResp"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of users"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "This API can be used only when the authentication mode is for local DB.  When self registration is disabled.",
        "tags": [
          "user"
        ],
        "summary": "Create a local user.",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "description": "The new user",
            "name": "userReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreationReq"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "description": "When the  self registration is disabled, non-admin does not have permission to create user.  When self registration is enabled, this API can only be called from UI portal, calling it via script will get a 403 error."
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get current user info.",
        "operationId": "getCurrentUserInfo",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get current user information successfully.",
            "schema": {
              "$ref": "#/definitions/UserResp"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/current/permissions": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get current user permissions.",
        "operationId": "getCurrentUserPermissions",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "string",
            "description": "The scope for the permission",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, the resources in the response are relative to the scope,\neg for resource '/project/1/repository' if relative is 'true' then the resource in response will be 'repository'.\n",
            "name": "relative",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get current user permission successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "401": {
            "description": "User need to log in first."
          },
          "500": {
            "description": "Internal errors."
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "description": "This endpoint is to search the users by username.  It's open for all authenticated requests.\n",
        "tags": [
          "user"
        ],
        "summary": "Search users by username",
        "operationId": "searchUsers",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "string",
            "description": "Username for filtering results.",
            "name": "username",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Search users by username successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserSearchRespItem"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user's profile.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user's info successfully.",
            "schema": {
              "$ref": "#/definitions/UserResp"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user's profile.",
        "operationId": "updateUserProfile",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int",
            "description": "Registered user ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Only email, realname and comment can be modified.",
            "name": "profile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "This endpoint let administrator of Harbor mark a registered user as removed.It actually won't be deleted from DB.\n",
        "tags": [
          "user"
        ],
        "summary": "Mark a registered user as be removed.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int",
            "description": "User ID for marking as to be removed.",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/{user_id}/cli_secret": {
      "put": {
        "description": "This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to 'OIDC'. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user.",
        "tags": [
          "user"
        ],
        "summary": "Set CLI secret for a user.",
        "operationId": "setCliSecret",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OIDCCliSecretReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The secret is successfully updated"
          },
          "400": {
            "description": "Invalid user ID.  Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard."
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "412": {
            "description": "The auth mode of the system is not \"oidc_auth\", or the user is not onboarded via OIDC AuthN."
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/{user_id}/password": {
      "put": {
        "description": "This endpoint is for user to update password. Users with the admin role can change any user's password. Regular users can change only their own password.\n",
        "tags": [
          "user"
        ],
        "summary": "Change the password on a user that already exists.",
        "operationId": "updateUserPassword",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Password to be updated, the attribute 'old_password' is optional when the API is called by the system administrator.",
            "name": "password",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "description": "Invalid user ID; Password does not meet requirement"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "description": "The caller does not have permission to update the password of the user with given ID, or the old password in request body is not correct."
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/{user_id}/sysadmin": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a registered user to change to be an administrator of Harbor.",
        "operationId": "setUserSysAdmin",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "type": "integer",
            "format": "int",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Toggle a user to admin or not.",
            "name": "sysadmin_flag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSysAdminFlag"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      }
    }
  },
  "definitions": {
    "Access": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of the access",
          "type": "string"
        },
        "effect": {
          "description": "The effect of the access",
          "type": "string"
        },
        "resource": {
          "description": "The resource of the access",
          "type": "string"
        }
      }
    },
    "AdditionLink": {
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "href": {
          "description": "The link of the addition",
          "type": "string"
        }
      }
    },
    "AdditionLinks": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      }
    },
    "Annotations": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "icon": {
          "description": "The digest of the icon",
          "type": "string"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scan_overview": {
          "description": "The overview of the scan result.",
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string"
        }
      }
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer"
        },
        "op_time": {
          "description": "The time when this operation is triggered.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05Z"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string"
        }
      }
    },
    "AuthproxySetting": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'",
          "type": "string"
        },
        "server_certificate": {
          "description": "The certificate to be pinned when connecting auth proxy.",
          "type": "string"
        },
        "skip_search": {
          "description": "The flag to determine whether Harbor can skip search the user/group when adding him as a member.",
          "type": "boolean"
        },
        "tokenreivew_endpoint": {
          "description": "The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'",
          "type": "string"
        },
        "verify_cert": {
          "description": "The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.",
          "type": "boolean"
        }
      }
    },
    "BoolConfigItem": {
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean"
        },
        "value": {
          "description": "The boolean value of current config item",
          "type": "boolean"
        }
      }
    },
    "CVEAllowlist": {
      "description": "The CVE Allowlist for system or project",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the allowlist.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.",
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "description": "ID of the allowlist",
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVEAllowlistItem"
          }
        },
        "project_id": {
          "description": "ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.",
          "type": "integer"
        },
        "update_time": {
          "description": "The update time of the allowlist.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CVEAllowlistItem": {
      "description": "The item in CVE allowlist",
      "type": "object",
      "properties": {
        "cve_id": {
          "description": "The ID of the CVE, such as \"CVE-2019-10164\"",
          "type": "string"
        }
      }
    },
    "ChartMetadata": {
      "description": "The metadata of chart version",
      "type": "object",
      "required": [
        "name",
        "version",
        "engine",
        "icon",
        "apiVersion",
        "appVersion"
      ],
      "properties": {
        "apiVersion": {
          "description": "The API version of this chart",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed in the chart",
          "type": "string"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "description": "A one-sentence description of chart",
          "type": "string"
        },
        "engine": {
          "description": "The name of template engine",
          "type": "string"
        },
        "home": {
          "description": "The URL to the relevant project page",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file",
          "type": "string"
        },
        "keywords": {
          "description": "A list of string keywords",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the chart",
          "type": "string"
        },
        "sources": {
          "description": "The URL to the source code of chart",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "A SemVer 2 version of chart",
          "type": "string"
        }
      }
    },
    "ChartVersion": {
      "description": "A specified chart entry",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ChartMetadata"
        },
        {
          "type": "object",
          "properties": {
            "created": {
              "description": "The created time of the chart entry",
              "type": "string"
            },
            "digest": {
              "description": "The digest value of the chart entry",
              "type": "string"
            },
            "removed": {
              "description": "A flag to indicate if the chart entry is removed",
              "type": "boolean"
            },
            "urls": {
              "description": "The urls of the chart entry",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "labels": {
          "description": "A list of label",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        }
      }
    },
    "ComponentHealthStatus": {
      "description": "The health status of component",
      "type": "object",
      "properties": {
        "error": {
          "description": "(optional) The error message when the status is \"unhealthy\"",
          "type": "string"
        },
        "name": {
          "description": "The component name",
          "type": "string"
        },
        "status": {
          "description": "The health status of component",
          "type": "string"
        }
      }
    },
    "Configurations": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_from": {
          "description": "The sender name for Email notification.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_host": {
          "description": "The hostname of SMTP server that sends Email notification.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_identity": {
          "description": "By default it's empty so the email_username is picked",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the email server.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_password": {
          "description": "Email password",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_port": {
          "description": "The port of SMTP server",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_ssl": {
          "description": "When it''s set to true the system will access Email server via TLS by default.  If it''s set to false, it still will handle \"STARTTLS\" from server side.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_username": {
          "description": "The username for authenticate against SMTP server",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_admin_groups": {
          "description": "The group which has the harbor admin privileges",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_admin_usernames": {
          "description": "The username which has the harbor admin privileges",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_endpoint": {
          "description": "The endpoint of the HTTP auth",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_server_certificate": {
          "description": "The certificate of the HTTP auth provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_skip_search": {
          "description": "Search user before onboard",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_tokenreview_endpoint": {
          "description": "The token review endpoint",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_verify_cert": {
          "description": "Verify the HTTP auth provider's certificate",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_base_dn": {
          "description": "The Base DN for LDAP binding.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_filter": {
          "description": "The filter for LDAP search",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_admin_dn": {
          "description": "Specify the ldap group which have the same privilege with Harbor admin",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_attribute_name": {
          "description": "The attribute which is used as identity of the LDAP group, default is cn.'",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_base_dn": {
          "description": "The base DN to search LDAP group.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_membership_attribute": {
          "description": "The user attribute to identify the group membership",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_search_filter": {
          "description": "The filter to search the ldap group",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_search_scope": {
          "description": "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_scope": {
          "description": "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_search_dn": {
          "description": "The DN of the user to do the search.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_search_password": {
          "description": "The password of the ldap search dn",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_timeout": {
          "description": "Timeout in seconds for connection to LDAP server",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_uid": {
          "description": "The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_url": {
          "description": "The URL of LDAP server",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_verify_cert": {
          "description": "Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "notification_enable": {
          "description": "Enable notification",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_admin_group": {
          "description": "The OIDC group which has the harbor admin privileges",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_auto_onboard": {
          "description": "Auto onboard the OIDC user",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_client_id": {
          "description": "The client ID of the OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_client_secret": {
          "description": "The OIDC provider secret",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_endpoint": {
          "description": "The endpoint of the OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_extra_redirect_parms": {
          "description": "Extra parameters to add when redirect request to OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_groups_claim": {
          "description": "The attribute claims the group name",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_name": {
          "description": "The OIDC provider name",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_scope": {
          "description": "The scope of the OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_user_claim": {
          "description": "The attribute claims the username",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_verify_cert": {
          "description": "Verify the OIDC provider's certificate'",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be ''adminonly'' or ''everyone''.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "quota_per_project_enable": {
          "description": "Enable quota per project",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "robot_name_prefix": {
          "description": "The rebot account name prefix",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "robot_token_duration": {
          "description": "The robot account token duration in days",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "self_registration": {
          "description": "Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "storage_per_project": {
          "description": "The storage quota per project",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "token_expiration": {
          "description": "The expiration time of the token for internal Registry, in minutes.",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_client_id": {
          "description": "The client id of UAA",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_client_secret": {
          "description": "The client secret of the UAA",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_endpoint": {
          "description": "The endpoint of the UAA",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_verify_cert": {
          "description": "Verify the certificate in UAA server",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        }
      }
    },
    "ConfigurationsResponse": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_from": {
          "description": "The sender name for Email notification.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_host": {
          "description": "The hostname of SMTP server that sends Email notification.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_identity": {
          "description": "By default it's empty so the email_username is picked",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the email server.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "email_port": {
          "description": "The port of SMTP server",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "email_ssl": {
          "description": "When it''s set to true the system will access Email server via TLS by default.  If it''s set to false, it still will handle \"STARTTLS\" from server side.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "email_username": {
          "description": "The username for authenticate against SMTP server",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_admin_groups": {
          "description": "The group which has the harbor admin privileges",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_admin_usernames": {
          "description": "The usernames which has the harbor admin privileges",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_endpoint": {
          "description": "The endpoint of the HTTP auth",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_server_certificate": {
          "description": "The certificate of the HTTP auth provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_skip_search": {
          "description": "Search user before onboard",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "http_authproxy_tokenreview_endpoint": {
          "description": "The token review endpoint",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_verify_cert": {
          "description": "Verify the HTTP auth provider's certificate",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "ldap_base_dn": {
          "description": "The Base DN for LDAP binding.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_filter": {
          "description": "The filter for LDAP search",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_admin_dn": {
          "description": "Specify the ldap group which have the same privilege with Harbor admin",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_attribute_name": {
          "description": "The attribute which is used as identity of the LDAP group, default is cn.'",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_base_dn": {
          "description": "The base DN to search LDAP group.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_membership_attribute": {
          "description": "The user attribute to identify the group membership",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_search_filter": {
          "description": "The filter to search the ldap group",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_search_scope": {
          "description": "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_scope": {
          "description": "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_search_dn": {
          "description": "The DN of the user to do the search.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_timeout": {
          "description": "Timeout in seconds for connection to LDAP server",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_uid": {
          "description": "The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_url": {
          "description": "The URL of LDAP server",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_verify_cert": {
          "description": "Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "notification_enable": {
          "description": "Enable notification",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "oidc_admin_group": {
          "description": "The OIDC group which has the harbor admin privileges",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_auto_onboard": {
          "description": "Auto onboard the OIDC user",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "oidc_client_id": {
          "description": "The client ID of the OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_endpoint": {
          "description": "The endpoint of the OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_extra_redirect_parms": {
          "description": "Extra parameters to add when redirect request to OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_groups_claim": {
          "description": "The attribute claims the group name",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_name": {
          "description": "The OIDC provider name",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_scope": {
          "description": "The scope of the OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_user_claim": {
          "description": "The attribute claims the username",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_verify_cert": {
          "description": "Verify the OIDC provider's certificate'",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be ''adminonly'' or ''everyone''.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "quota_per_project_enable": {
          "description": "Enable quota per project",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "robot_name_prefix": {
          "description": "The rebot account name prefix",
          "$ref": "#/definitions/StringConfigItem"
        },
        "robot_token_duration": {
          "description": "The robot account token duration in days",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "scan_all_policy": {
          "type": "object",
          "properties": {
            "parameter": {
              "description": "The parameters of the policy, the values are dependent on the type of the policy.",
              "type": "object",
              "properties": {
                "daily_time": {
                  "description": "The offset in seconds of UTC 0 o'clock, only valid when the policy type is \"daily\"",
                  "type": "integer"
                }
              }
            },
            "type": {
              "description": "The type of scan all policy, currently the valid values are \"none\" and \"daily\"",
              "type": "string"
            }
          }
        },
        "self_registration": {
          "description": "Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "storage_per_project": {
          "description": "The storage quota per project",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "token_expiration": {
          "description": "The expiration time of the token for internal Registry, in minutes.",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "uaa_client_id": {
          "description": "The client id of UAA",
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_client_secret": {
          "description": "The client secret of the UAA",
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_endpoint": {
          "description": "The endpoint of the UAA",
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_verify_cert": {
          "description": "Verify the certificate in UAA server",
          "$ref": "#/definitions/BoolConfigItem"
        }
      }
    },
    "Error": {
      "description": "a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "Errors": {
      "description": "The error array that describe the errors got during the handling of request",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "EventType": {
      "description": "Webhook supportted event type.",
      "type": "string",
      "example": "pullImage"
    },
    "Execution": {
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time of execution",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of execution",
          "type": "integer"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "start_time": {
          "description": "The start time of execution",
          "type": "string"
        },
        "status": {
          "description": "The status of execution",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of execution",
          "type": "string"
        },
        "trigger": {
          "description": "The trigger of execution",
          "type": "string"
        },
        "vendor_id": {
          "description": "The vendor id of execution",
          "type": "integer"
        },
        "vendor_type": {
          "description": "The vendor type of execution",
          "type": "string"
        }
      }
    },
    "ExtraAttrs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "FilterStyle": {
      "description": "The style of the resource filter",
      "type": "object",
      "properties": {
        "style": {
          "description": "The filter style",
          "type": "string"
        },
        "type": {
          "description": "The filter type",
          "type": "string"
        },
        "values": {
          "description": "The filter values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GCHistory": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of gc job.",
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "description": "if gc job was deleted.",
          "type": "boolean"
        },
        "id": {
          "description": "the id of gc job.",
          "type": "integer"
        },
        "job_kind": {
          "description": "the job kind of gc job.",
          "type": "string"
        },
        "job_name": {
          "description": "the job name of gc job.",
          "type": "string"
        },
        "job_parameters": {
          "description": "the job parameters of gc job.",
          "type": "string"
        },
        "job_status": {
          "description": "the status of gc job.",
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "update_time": {
          "description": "the update time of gc job.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GeneralInfo": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current Harbor instance.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "authproxy_settings": {
          "description": "The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.",
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/AuthproxySetting"
        },
        "external_url": {
          "description": "The external URL of Harbor, with protocol.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "harbor_version": {
          "description": "The build version of Harbor.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "has_ca_root": {
          "description": "Indicate whether there is a ca root cert file ready for download in the file system.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "notification_enable": {
          "description": "The flag to indicate whether notification mechanism is enabled on Harbor instance.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be 'adminonly' or 'everyone'.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_storage_provider_name": {
          "description": "The storage provider's name of Harbor registry",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_url": {
          "description": "The url of registry against which the docker command should be issued.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "self_registration": {
          "description": "Indicate whether the Harbor instance enable user to register himself.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_chartmuseum": {
          "description": "If the Harbor instance is deployed with nested chartmuseum.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_notary": {
          "description": "If the Harbor instance is deployed with nested notary.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        }
      }
    },
    "Icon": {
      "type": "object",
      "properties": {
        "content": {
          "description": "The base64 encoded content of the icon",
          "type": "string"
        },
        "content-type": {
          "description": "The content type of the icon",
          "type": "string"
        }
      }
    },
    "ImmutableRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer"
        },
        "scope_selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ImmutableSelector"
            }
          }
        },
        "tag_selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImmutableSelector"
          }
        },
        "template": {
          "type": "string"
        }
      }
    },
    "ImmutableSelector": {
      "type": "object",
      "properties": {
        "decoration": {
          "type": "string"
        },
        "extras": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "The auth credential data if exists",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "auth_mode": {
          "description": "The authentication way supported",
          "type": "string"
        },
        "default": {
          "description": "Whether the instance is default or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "description": {
          "description": "Description of instance",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the instance is activated or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "endpoint": {
          "description": "The service endpoint of this instance",
          "type": "string"
        },
        "id": {
          "description": "Unique ID",
          "type": "integer"
        },
        "insecure": {
          "description": "Whether the instance endpoint is insecure or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Instance name",
          "type": "string"
        },
        "setup_timestamp": {
          "description": "The timestamp of instance setting up",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The health status",
          "type": "string"
        },
        "vendor": {
          "description": "Based on which driver, identified by ID",
          "type": "string"
        }
      }
    },
    "IntegerConfigItem": {
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean"
        },
        "value": {
          "description": "The integer value of current config item",
          "type": "integer"
        }
      }
    },
    "InternalConfigurationsResponse": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/goharbor/harbor/src/lib/config"
        },
        "type": "InternalCfg"
      }
    },
    "IsDefault": {
      "type": "object",
      "properties": {
        "is_default": {
          "description": "A flag indicating whether a scanner registration is default.",
          "type": "boolean"
        }
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time the label",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description the label",
          "type": "string"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name the label",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the label",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "LdapConf": {
      "description": "The ldap configure properties",
      "type": "object",
      "properties": {
        "ldap_base_dn": {
          "description": "The base dn of ldap service.",
          "type": "string"
        },
        "ldap_connection_timeout": {
          "description": "The connect timeout of ldap service(second).",
          "type": "integer",
          "format": "int64"
        },
        "ldap_filter": {
          "description": "The serach filter of ldap service.",
          "type": "string"
        },
        "ldap_scope": {
          "description": "The serach scope of ldap service.",
          "type": "integer",
          "format": "int64"
        },
        "ldap_search_dn": {
          "description": "The search dn of ldap service.",
          "type": "string"
        },
        "ldap_search_password": {
          "description": "The search password of ldap service.",
          "type": "string"
        },
        "ldap_uid": {
          "description": "The serach uid from ldap service attributes.",
          "type": "string"
        },
        "ldap_url": {
          "description": "The url of ldap service.",
          "type": "string"
        },
        "ldap_verify_cert": {
          "description": "Verify Ldap server certificate.",
          "type": "boolean"
        }
      }
    },
    "LdapFailedImportUser": {
      "type": "object",
      "properties": {
        "error": {
          "description": "fail reason.",
          "type": "string"
        },
        "uid": {
          "description": "the uid can't add to system.",
          "type": "string"
        }
      }
    },
    "LdapImportUsers": {
      "type": "object",
      "properties": {
        "ldap_uid_list": {
          "description": "selected uid list",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LdapPingResult": {
      "description": "The ldap ping result",
      "type": "object",
      "properties": {
        "message": {
          "description": "The ping operation output message.",
          "type": "string"
        },
        "success": {
          "description": "Test success",
          "type": "boolean"
        }
      }
    },
    "LdapUser": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The user email address from \"mail\" or \"email\" attribute.",
          "type": "string"
        },
        "realname": {
          "description": "The user realname from \"uid\" or \"cn\" attribute.",
          "type": "string"
        },
        "username": {
          "description": "ldap username.",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "icon": {
          "description": "icon",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "maintainers": {
          "description": "maintainers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "source": {
          "description": "source",
          "type": "string"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      }
    },
    "Metrics": {
      "type": "object",
      "properties": {
        "error_task_count": {
          "description": "The count of error task",
          "type": "integer"
        },
        "pending_task_count": {
          "description": "The count of pending task",
          "type": "integer"
        },
        "running_task_count": {
          "description": "The count of running task",
          "type": "integer"
        },
        "scheduled_task_count": {
          "description": "The count of scheduled task",
          "type": "integer"
        },
        "stopped_task_count": {
          "description": "The count of stopped task",
          "type": "integer"
        },
        "success_task_count": {
          "description": "The count of success task",
          "type": "integer"
        },
        "task_count": {
          "description": "The count of task",
          "type": "integer"
        }
      }
    },
    "NativeReportSummary": {
      "description": "The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "example": 100
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "example": 300
        },
        "end_time": {
          "description": "The end time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05Z"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "example": "5f62c830-f996-11e9-957f-0242c0a89008"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "example": "Success"
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "example": "High"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T14:04:05Z"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      }
    },
    "NotifyType": {
      "description": "Webhook supportted notify type.",
      "type": "string",
      "example": "http"
    },
    "OIDCCliSecretReq": {
      "type": "object",
      "properties": {
        "secret": {
          "description": "The new secret",
          "type": "string"
        }
      }
    },
    "OIDCUserInfo": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the OIDC user info record.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "the ID of the OIDC info record",
          "type": "integer",
          "format": "int"
        },
        "secret": {
          "description": "the secret of the OIDC user that can be used for CLI to push/pull artifacts",
          "type": "string"
        },
        "subiss": {
          "description": "the concatenation of sub and issuer in the ID token",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the OIDC user info record.",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "description": "the ID of the user",
          "type": "integer",
          "format": "int"
        }
      }
    },
    "OverallHealthStatus": {
      "description": "The system health status",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentHealthStatus"
          }
        },
        "status": {
          "description": "The overall health status. It is \"healthy\" only when all the components' status are \"healthy\"",
          "type": "string"
        }
      }
    },
    "PasswordReq": {
      "type": "object",
      "properties": {
        "new_password": {
          "description": "New password for marking as to be updated.",
          "type": "string"
        },
        "old_password": {
          "description": "The user's existing password.",
          "type": "string"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The permission action",
          "type": "string"
        },
        "resource": {
          "description": "The permission resoruce",
          "type": "string"
        }
      }
    },
    "Platform": {
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string"
        }
      }
    },
    "PreheatPolicy": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The Create Time of preheat policy",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The Description of preheat policy",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the preheat policy enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "filters": {
          "description": "The Filters of preheat policy",
          "type": "string"
        },
        "id": {
          "description": "The ID of preheat policy",
          "type": "integer"
        },
        "name": {
          "description": "The Name of preheat policy",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of preheat policy project",
          "type": "integer"
        },
        "provider_id": {
          "description": "The ID of preheat policy provider",
          "type": "integer"
        },
        "provider_name": {
          "description": "The Name of preheat policy provider",
          "type": "string"
        },
        "trigger": {
          "description": "The Trigger of preheat policy",
          "type": "string"
        },
        "update_time": {
          "description": "The Update Time of preheat policy",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer",
          "x-omitempty": false
        },
        "creation_time": {
          "description": "The creation time of the project.",
          "type": "string",
          "format": "date-time"
        },
        "current_user_role_id": {
          "description": "The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.",
          "type": "integer"
        },
        "current_user_role_ids": {
          "description": "The list of role ID of the current user who triggered the API (for UI)",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "cve_allowlist": {
          "description": "The CVE allowlist of this project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "deleted": {
          "description": "A deletion mark of the project.",
          "type": "boolean"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "owner_id": {
          "description": "The owner ID of the project always means the creator of the project.",
          "type": "integer",
          "format": "int32"
        },
        "owner_name": {
          "description": "The owner name of the project.",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID",
          "type": "integer",
          "format": "int32"
        },
        "registry_id": {
          "description": "The ID of referenced registry when the project is a proxy cache project.",
          "type": "integer",
          "format": "int64"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer",
          "x-omitempty": false
        },
        "togglable": {
          "description": "Correspond to the UI about whether the project's publicity is  updatable (for UI)",
          "type": "boolean"
        },
        "update_time": {
          "description": "The update time of the project.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProjectDeletable": {
      "type": "object",
      "properties": {
        "deletable": {
          "description": "Whether the project can be deleted.",
          "type": "boolean"
        },
        "message": {
          "description": "The detail message when the project can not be deleted.",
          "type": "string"
        }
      }
    },
    "ProjectMember": {
      "type": "object",
      "properties": {
        "member_group": {
          "$ref": "#/definitions/UserGroup"
        },
        "member_user": {
          "$ref": "#/definitions/UserEntity"
        },
        "role_id": {
          "description": "The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer",
          "type": "integer"
        }
      }
    },
    "ProjectMemberEntity": {
      "type": "object",
      "properties": {
        "entity_id": {
          "description": "the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.",
          "type": "integer"
        },
        "entity_name": {
          "description": "the name of the group member.",
          "type": "string"
        },
        "entity_type": {
          "description": "the entity's type, u for user entity, g for group entity.",
          "type": "string"
        },
        "id": {
          "description": "the project member id",
          "type": "integer"
        },
        "project_id": {
          "description": "the project id",
          "type": "integer"
        },
        "role_id": {
          "description": "the role id",
          "type": "integer"
        },
        "role_name": {
          "description": "the name of the role",
          "type": "string"
        }
      }
    },
    "ProjectMetadata": {
      "type": "object",
      "properties": {
        "auto_scan": {
          "description": "Whether scan images automatically when pushing. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "enable_content_trust": {
          "description": "Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "prevent_vul": {
          "description": "Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "public": {
          "description": "The public status of the project. The valid values are \"true\", \"false\".",
          "type": "string"
        },
        "retention_id": {
          "description": "The ID of the tag retention policy for the project",
          "type": "string",
          "x-nullable": true
        },
        "reuse_sys_cve_allowlist": {
          "description": "Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.",
          "type": "string",
          "x-nullable": true
        },
        "severity": {
          "description": "If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ProjectReq": {
      "type": "object",
      "properties": {
        "cve_allowlist": {
          "description": "The CVE allowlist of the project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "project_name": {
          "description": "The name of the project.",
          "type": "string",
          "maxLength": 255
        },
        "public": {
          "description": "deprecated, reserved for project creation in replication",
          "type": "boolean",
          "x-nullable": true
        },
        "registry_id": {
          "description": "The ID of referenced registry when creating the proxy cache project",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "storage_limit": {
          "description": "The storage quota of the project.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        }
      }
    },
    "ProjectScanner": {
      "type": "object",
      "required": [
        "uuid"
      ],
      "properties": {
        "uuid": {
          "description": "The identifier of the scanner registration",
          "type": "string"
        }
      }
    },
    "ProjectSummary": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer",
          "x-omitempty": false
        },
        "developer_count": {
          "description": "The total number of developer members.",
          "type": "integer"
        },
        "guest_count": {
          "description": "The total number of guest members.",
          "type": "integer"
        },
        "limited_guest_count": {
          "description": "The total number of limited guest members.",
          "type": "integer"
        },
        "maintainer_count": {
          "description": "The total number of maintainer members.",
          "type": "integer"
        },
        "project_admin_count": {
          "description": "The total number of project admin members.",
          "type": "integer"
        },
        "quota": {
          "$ref": "#/definitions/ProjectSummaryQuota"
        },
        "registry": {
          "$ref": "#/definitions/Registry"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "ProjectSummaryQuota": {
      "type": "object",
      "properties": {
        "hard": {
          "description": "The hard limits of the quota",
          "$ref": "#/definitions/ResourceList"
        },
        "used": {
          "description": "The used status of the quota",
          "$ref": "#/definitions/ResourceList"
        }
      }
    },
    "ProviderUnderProject": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "provider": {
          "type": "string"
        }
      }
    },
    "Quota": {
      "description": "The quota object",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the quota",
          "type": "string",
          "format": "date-time"
        },
        "hard": {
          "description": "The hard limits of the quota",
          "x-omitempty": false,
          "$ref": "#/definitions/ResourceList"
        },
        "id": {
          "description": "ID of the quota",
          "type": "integer"
        },
        "ref": {
          "description": "The reference object of the quota",
          "$ref": "#/definitions/QuotaRefObject"
        },
        "update_time": {
          "description": "the update time of the quota",
          "type": "string",
          "format": "date-time"
        },
        "used": {
          "description": "The used status of the quota",
          "x-omitempty": false,
          "$ref": "#/definitions/ResourceList"
        }
      }
    },
    "QuotaRefObject": {
      "type": "object",
      "additionalProperties": false
    },
    "QuotaUpdateReq": {
      "type": "object",
      "properties": {
        "hard": {
          "description": "The new hard limits for the quota",
          "$ref": "#/definitions/ResourceList"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Registry": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.",
          "type": "string",
          "format": "date-time"
        },
        "credential": {
          "$ref": "#/definitions/RegistryCredential"
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string"
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean"
        },
        "name": {
          "description": "The registry name.",
          "type": "string"
        },
        "status": {
          "description": "Health status of the registry.",
          "type": "string"
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the policy.",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "The registry URL string.",
          "type": "string"
        }
      }
    },
    "RegistryCredential": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key, e.g. user name when credential type is 'basic'.",
          "type": "string"
        },
        "access_secret": {
          "description": "Access secret, e.g. password when credential type is 'basic'.",
          "type": "string"
        },
        "type": {
          "description": "Credential type, such as 'basic', 'oauth'.",
          "type": "string"
        }
      }
    },
    "RegistryEndpoint": {
      "description": "The style of the resource filter",
      "type": "object",
      "properties": {
        "key": {
          "description": "The endpoint key",
          "type": "string"
        },
        "value": {
          "description": "The endpoint value",
          "type": "string"
        }
      }
    },
    "RegistryInfo": {
      "description": "The registry info contains the base info and capability declarations of the registry",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description",
          "type": "string"
        },
        "supported_resource_filters": {
          "description": "The filters that the registry supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterStyle"
          }
        },
        "supported_triggers": {
          "description": "The triggers that the registry supports",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "The registry type",
          "type": "string"
        }
      }
    },
    "RegistryPing": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "The registry access key.",
          "type": "string",
          "x-nullable": true
        },
        "access_secret": {
          "description": "The registry access secret.",
          "type": "string",
          "x-nullable": true
        },
        "credential_type": {
          "description": "Credential type of the registry, e.g. 'basic'.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-nullable": true
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "description": "The registry URL.",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "RegistryProviderCredentialPattern": {
      "description": "The registry credential pattern",
      "type": "object",
      "properties": {
        "access_key_data": {
          "description": "The access key data",
          "type": "string"
        },
        "access_key_type": {
          "description": "The access key type",
          "type": "string"
        },
        "access_secret_data": {
          "description": "The access secret data",
          "type": "string"
        },
        "access_secret_type": {
          "description": "The access secret type",
          "type": "string"
        }
      }
    },
    "RegistryProviderEndpointPattern": {
      "description": "The registry endpoint pattern",
      "type": "object",
      "properties": {
        "endpoint_type": {
          "description": "The endpoint type",
          "type": "string"
        },
        "endpoints": {
          "description": "The endpoint list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryEndpoint"
          }
        }
      }
    },
    "RegistryProviderInfo": {
      "description": "The registry provider info contains the base info and capability declarations of the registry provider",
      "type": "object",
      "properties": {
        "credential_pattern": {
          "description": "The credential pattern",
          "$ref": "#/definitions/RegistryProviderCredentialPattern"
        },
        "endpoint_pattern": {
          "description": "The endpoint pattern",
          "$ref": "#/definitions/RegistryProviderEndpointPattern"
        }
      }
    },
    "RegistryUpdate": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "The registry access key.",
          "type": "string",
          "x-nullable": true
        },
        "access_secret": {
          "description": "The registry access secret.",
          "type": "string",
          "x-nullable": true
        },
        "credential_type": {
          "description": "Credential type of the registry, e.g. 'basic'.",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string",
          "x-nullable": true
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-nullable": true
        },
        "name": {
          "description": "The registry name.",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "description": "The registry URL.",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ReplicationExecution": {
      "description": "The replication execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time",
          "type": "string",
          "format": "date-time"
        },
        "failed": {
          "description": "The count of failed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the execution",
          "type": "integer"
        },
        "in_progress": {
          "description": "The count of in_progress executions",
          "type": "integer",
          "x-omitempty": false
        },
        "policy_id": {
          "description": "The ID if the policy that the execution belongs to",
          "type": "integer"
        },
        "start_time": {
          "description": "The start time",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the execution",
          "type": "string"
        },
        "status_text": {
          "description": "The status text",
          "type": "string",
          "x-omitempty": false
        },
        "stopped": {
          "description": "The count of stopped executions",
          "type": "integer",
          "x-omitempty": false
        },
        "succeed": {
          "description": "The count of succeed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "total": {
          "description": "The total count of all executions",
          "type": "integer",
          "x-omitempty": false
        },
        "trigger": {
          "description": "The trigger mode",
          "type": "string"
        }
      }
    },
    "ReplicationFilter": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The replication policy filter type.",
          "type": "string"
        },
        "value": {
          "description": "The value of replication policy filter.",
          "type": "object"
        }
      }
    },
    "ReplicationPolicy": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.",
          "type": "string",
          "format": "date-time"
        },
        "deletion": {
          "description": "Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.",
          "type": "boolean"
        },
        "description": {
          "description": "The description of the policy.",
          "type": "string"
        },
        "dest_namespace": {
          "description": "The destination namespace.",
          "type": "string"
        },
        "dest_namespace_replace_count": {
          "description": "Specify how many path components will be replaced by the provided destination namespace.\nThe default value is -1 in which case the legacy mode will be applied.",
          "type": "integer",
          "format": "int8",
          "x-isnullable": true
        },
        "dest_registry": {
          "description": "The destination registry.",
          "$ref": "#/definitions/Registry"
        },
        "enabled": {
          "description": "Whether the policy is enabled or not.",
          "type": "boolean"
        },
        "filters": {
          "description": "The replication policy filter array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicationFilter"
          }
        },
        "id": {
          "description": "The policy ID.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The policy name.",
          "type": "string"
        },
        "override": {
          "description": "Whether to override the resources on the destination registry.",
          "type": "boolean"
        },
        "replicate_deletion": {
          "description": "Whether to replicate the deletion operation.",
          "type": "boolean"
        },
        "src_registry": {
          "description": "The source registry.",
          "$ref": "#/definitions/Registry"
        },
        "trigger": {
          "$ref": "#/definitions/ReplicationTrigger"
        },
        "update_time": {
          "description": "The update time of the policy.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ReplicationTask": {
      "description": "The replication task",
      "type": "object",
      "properties": {
        "dst_resource": {
          "description": "The destination resource that the task operates",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the task",
          "type": "string",
          "format": "date-time"
        },
        "execution_id": {
          "description": "The ID of the execution that the task belongs to",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the task",
          "type": "integer"
        },
        "job_id": {
          "description": "The ID of the underlying job that the task related to",
          "type": "string"
        },
        "operation": {
          "description": "The operation of the task",
          "type": "string"
        },
        "resource_type": {
          "description": "The type of the resource that the task operates",
          "type": "string"
        },
        "src_resource": {
          "description": "The source resource that the task operates",
          "type": "string"
        },
        "start_time": {
          "description": "The start time of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the task",
          "type": "string"
        }
      }
    },
    "ReplicationTrigger": {
      "type": "object",
      "properties": {
        "trigger_settings": {
          "$ref": "#/definitions/ReplicationTriggerSettings"
        },
        "type": {
          "description": "The replication policy trigger type. The valid values are manual, event_based and scheduled.",
          "type": "string"
        }
      }
    },
    "ReplicationTriggerSettings": {
      "type": "object",
      "properties": {
        "cron": {
          "description": "The cron string for scheduled trigger",
          "type": "string"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "creation_time": {
          "description": "The creation time of the repository",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "update_time": {
          "description": "The update time of the repository",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      },
      "x-go-type": {
        "import": {
          "package": "github.com/goharbor/harbor/src/pkg/quota/types"
        },
        "type": "ResourceList"
      }
    },
    "RetentionExecution": {
      "type": "object",
      "properties": {
        "dry_run": {
          "type": "boolean"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "policy_id": {
          "type": "integer",
          "format": "int64"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        }
      }
    },
    "RetentionExecutionTask": {
      "type": "object",
      "properties": {
        "end_time": {
          "type": "string"
        },
        "execution_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "job_id": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "retained": {
          "type": "integer",
          "x-omitempty": false
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_code": {
          "type": "integer",
          "x-omitempty": false
        },
        "status_revision": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "RetentionMetadata": {
      "description": "the tag retention metadata",
      "type": "object",
      "properties": {
        "scope_selectors": {
          "description": "supported scope selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "tag_selectors": {
          "description": "supported tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "templates": {
          "description": "templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleMetadata"
          }
        }
      }
    },
    "RetentionPolicy": {
      "description": "retention policy",
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRule"
          }
        },
        "scope": {
          "type": "object",
          "$ref": "#/definitions/RetentionPolicyScope"
        },
        "trigger": {
          "type": "object",
          "$ref": "#/definitions/RetentionRuleTrigger"
        }
      }
    },
    "RetentionPolicyScope": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "ref": {
          "type": "integer"
        }
      }
    },
    "RetentionRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer"
        },
        "scope_selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RetentionSelector"
            }
          }
        },
        "tag_selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelector"
          }
        },
        "template": {
          "type": "string"
        }
      }
    },
    "RetentionRuleMetadata": {
      "description": "the tag retention rule metadata",
      "type": "object",
      "properties": {
        "action": {
          "description": "rule action",
          "type": "string"
        },
        "display_text": {
          "description": "rule display text",
          "type": "string"
        },
        "params": {
          "description": "rule params",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleParamMetadata"
          }
        },
        "rule_template": {
          "description": "rule id",
          "type": "string"
        }
      }
    },
    "RetentionRuleParamMetadata": {
      "description": "rule param",
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "RetentionRuleTrigger": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "references": {
          "type": "object"
        },
        "settings": {
          "type": "object"
        }
      }
    },
    "RetentionSelector": {
      "type": "object",
      "properties": {
        "decoration": {
          "type": "string"
        },
        "extras": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      }
    },
    "RetentionSelectorMetadata": {
      "description": "retention selector",
      "type": "object",
      "properties": {
        "decorations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "display_text": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "Robot": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "editable": {
          "description": "The editable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the robot.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RobotCreate": {
      "description": "The request for robot account creation.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean"
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotCreateV1": {
      "type": "object",
      "properties": {
        "access": {
          "description": "The permission of robot account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "description": {
          "description": "The description of robot account",
          "type": "string"
        },
        "expires_at": {
          "description": "The expiration time on or after which the JWT MUST NOT be accepted for processing.",
          "type": "integer"
        },
        "name": {
          "description": "The name of robot account",
          "type": "string"
        }
      }
    },
    "RobotCreated": {
      "description": "The response for robot account creation.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotPermission": {
      "type": "object",
      "properties": {
        "access": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "kind": {
          "description": "The kind of the permission",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the permission",
          "type": "string"
        }
      }
    },
    "RobotSec": {
      "description": "The response for refresh/update robot account secret.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RoleRequest": {
      "type": "object",
      "properties": {
        "role_id": {
          "description": "The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer",
          "type": "integer"
        }
      }
    },
    "ScanOverview": {
      "description": "The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      }
    },
    "Scanner": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the scanner",
          "type": "string",
          "example": "Trivy"
        },
        "vendor": {
          "description": "Name of the scanner provider",
          "type": "string",
          "example": "Aqua Security"
        },
        "version": {
          "description": "Version of the scanner adapter",
          "type": "string",
          "example": "v0.9.1"
        }
      }
    },
    "ScannerAdapterMetadata": {
      "description": "The metadata info of the scanner adapter",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScannerCapability"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "harbor.scanner-adapter/registry-authorization-type": "Bearer"
          }
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        }
      }
    },
    "ScannerCapability": {
      "type": "object",
      "properties": {
        "consumes_mime_types": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "application/vnd.docker.distribution.manifest.v2+json"
          }
        },
        "produces_mime_types": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
          }
        }
      }
    },
    "ScannerRegistration": {
      "description": "Registration represents a named configuration for invoking a scanner via its adapter.\n",
      "type": "object",
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\n",
          "type": "string",
          "x-omitempty": false,
          "example": "Bearer: JWTTOKENGOESHERE"
        },
        "adapter": {
          "description": "Optional property to describe the name of the scanner registration",
          "type": "string",
          "example": "Trivy"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\n",
          "type": "string",
          "default": "",
          "x-omitempty": false,
          "example": "Bearer"
        },
        "create_time": {
          "description": "The creation time of this registration",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "An optional description of this registration.",
          "type": "string",
          "x-omitempty": false,
          "example": "A free-to-use tool that scans container images for package vulnerabilities.\n"
        },
        "disabled": {
          "description": "Indicate whether the registration is enabled or not",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "health": {
          "description": "Indicate the healthy of the registration",
          "type": "string",
          "default": "",
          "example": "healthy"
        },
        "is_default": {
          "description": "Indicate if the registration is set as the system default one",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "name": {
          "description": "The name of this registration.",
          "type": "string",
          "example": "Trivy"
        },
        "skip_certVerify": {
          "description": "Indicate if skip the certificate verification when sending HTTP requests",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "update_time": {
          "description": "The update time of this registration",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "A base URL of the scanner adapter",
          "type": "string",
          "format": "url",
          "example": "http://harbor-scanner-trivy:8080"
        },
        "use_internal_addr": {
          "description": "Indicate whether use internal registry addr for the scanner to pull content or not",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "uuid": {
          "description": "The unique identifier of this registration.",
          "type": "string"
        },
        "vendor": {
          "description": "Optional property to describe the vendor of the scanner registration",
          "type": "string",
          "example": "CentOS"
        },
        "version": {
          "description": "Optional property to describe the version of the scanner registration",
          "type": "string",
          "example": "1.0.1"
        }
      }
    },
    "ScannerRegistrationReq": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\n",
          "type": "string",
          "example": "Bearer: JWTTOKENGOESHERE"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\n",
          "type": "string",
          "example": "Bearer"
        },
        "description": {
          "description": "An optional description of this registration.",
          "type": "string",
          "example": "A free-to-use tool that scans container images for package vulnerabilities.\n"
        },
        "disabled": {
          "description": "Indicate whether the registration is enabled or not",
          "type": "boolean",
          "default": false
        },
        "name": {
          "description": "The name of this registration",
          "type": "string",
          "example": "Trivy"
        },
        "skip_certVerify": {
          "description": "Indicate if skip the certificate verification when sending HTTP requests",
          "type": "boolean",
          "default": false
        },
        "url": {
          "description": "A base URL of the scanner adapter.",
          "type": "string",
          "format": "uri",
          "example": "http://harbor-scanner-trivy:8080"
        },
        "use_internal_addr": {
          "description": "Indicate whether use internal registry addr for the scanner to pull content or not",
          "type": "boolean",
          "default": false
        }
      }
    },
    "ScannerRegistrationSettings": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\n",
          "type": "string",
          "example": "Bearer: JWTTOKENGOESHERE"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\n",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "The name of this registration",
          "type": "string",
          "example": "Trivy"
        },
        "url": {
          "description": "A base URL of the scanner adapter.",
          "type": "string",
          "format": "uri",
          "example": "http://harbor-scanner-trivy:8080"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "description": "The id of the schedule.",
          "type": "integer",
          "readOnly": true
        },
        "parameters": {
          "description": "The parameters of schedule job",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "status": {
          "description": "The status of the schedule.",
          "type": "string",
          "readOnly": true
        },
        "update_time": {
          "description": "the update time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ScheduleObj": {
      "type": "object",
      "properties": {
        "cron": {
          "description": "A cron expression, a time-based job scheduler.",
          "type": "string"
        },
        "type": {
          "description": "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.\n'Manual' means to trigger it right away and 'None' means to cancel the schedule.\n",
          "type": "string",
          "enum": [
            "Hourly",
            "Daily",
            "Weekly",
            "Custom",
            "Manual",
            "None"
          ]
        }
      }
    },
    "Search": {
      "type": "object",
      "properties": {
        "chart": {
          "description": "Search results of the charts that macthed the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          },
          "x-isnullable": true,
          "x-omitempty": true
        },
        "project": {
          "description": "Search results of the projects that matched the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "repository": {
          "description": "Search results of the repositories that matched the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchRepository"
          }
        }
      }
    },
    "SearchRepository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of artifacts in the repository",
          "type": "integer"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer"
        },
        "project_name": {
          "description": "The name of the project that the repository belongs to",
          "type": "string"
        },
        "project_public": {
          "description": "The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)",
          "type": "boolean"
        },
        "pull_count": {
          "description": "The count how many times the repository is pulled",
          "type": "integer"
        },
        "repository_name": {
          "description": "The name of the repository",
          "type": "string"
        }
      }
    },
    "SearchResult": {
      "description": "The chart search result item",
      "type": "object",
      "properties": {
        "Chart": {
          "$ref": "#/definitions/ChartVersion"
        },
        "Name": {
          "description": "The chart name with repo name",
          "type": "string"
        },
        "Score": {
          "description": "The matched level",
          "type": "integer"
        }
      }
    },
    "StartReplicationExecution": {
      "type": "object",
      "properties": {
        "policy_id": {
          "description": "The ID of policy that the execution belongs to.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Statistic": {
      "type": "object",
      "properties": {
        "private_project_count": {
          "description": "The count of the private projects",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "private_repo_count": {
          "description": "The count of the private repositories",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "public_project_count": {
          "description": "The count of the public projects",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "public_repo_count": {
          "description": "The count of the public repositories",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "total_project_count": {
          "description": "The count of the total projects, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "total_repo_count": {
          "description": "The count of the total repositories, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "total_storage_consumption": {
          "description": "The total storage consumption of blobs, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        }
      }
    },
    "Stats": {
      "description": "Stats provides the overall progress of the scan all process.",
      "type": "object",
      "properties": {
        "completed": {
          "description": "The number of the finished scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 90
        },
        "metrics": {
          "description": "The metrics data for the each status",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "example": {
            "Error": 2,
            "Running": 3,
            "Success": 5
          }
        },
        "ongoing": {
          "description": "A flag indicating job status of scan all.",
          "type": "boolean",
          "x-omitempty": false
        },
        "total": {
          "description": "The total number of scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "trigger": {
          "description": "The trigger of the scan all job.",
          "type": "string",
          "enum": [
            "Manual",
            "Schedule",
            "Event"
          ]
        }
      }
    },
    "Storage": {
      "type": "object",
      "properties": {
        "free": {
          "description": "Free volume size.",
          "type": "integer",
          "format": "uint64"
        },
        "total": {
          "description": "Total volume size.",
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "StringConfigItem": {
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean"
        },
        "value": {
          "description": "The string value of current config item",
          "type": "string"
        }
      }
    },
    "SupportedWebhookEventTypes": {
      "description": "Supportted webhook event types and notify types.",
      "type": "object",
      "properties": {
        "event_type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        },
        "notify_type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotifyType"
          }
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "storage": {
          "description": "The storage of system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "pull_time": {
          "description": "The latest pull time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of task",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of task",
          "type": "string"
        },
        "execution_id": {
          "description": "The ID of task execution",
          "type": "integer"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of task",
          "type": "integer"
        },
        "run_count": {
          "description": "The count of task run",
          "type": "integer",
          "format": "int32"
        },
        "start_time": {
          "description": "The start time of task",
          "type": "string"
        },
        "status": {
          "description": "The status of task",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of task",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of task",
          "type": "string"
        }
      }
    },
    "UserCreationReq": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "maxLength": 255
        },
        "password": {
          "type": "string"
        },
        "realname": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "UserEntity": {
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer"
        },
        "username": {
          "description": "The name of the user.",
          "type": "string"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "group_name": {
          "description": "The name of the user group",
          "type": "string"
        },
        "group_type": {
          "description": "The group type, 1 for LDAP group, 2 for HTTP group.",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the user group",
          "type": "integer"
        },
        "ldap_group_dn": {
          "description": "The DN of the LDAP group if group type is 1 (LDAP group).",
          "type": "string"
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "realname": {
          "type": "string"
        }
      }
    },
    "UserResp": {
      "type": "object",
      "properties": {
        "admin_role_in_auth": {
          "description": "indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user",
          "type": "boolean",
          "x-omitempty": false
        },
        "comment": {
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time of the user.",
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "oidc_user_meta": {
          "$ref": "#/definitions/OIDCUserInfo"
        },
        "realname": {
          "type": "string"
        },
        "sysadmin_flag": {
          "type": "boolean",
          "x-omitempty": false
        },
        "update_time": {
          "description": "The update time of the user.",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "integer",
          "format": "int"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "UserSearch": {
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "UserSearchRespItem": {
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "UserSysAdminFlag": {
      "type": "object",
      "properties": {
        "sysadmin_flag": {
          "description": "true-admin, false-not admin.",
          "type": "boolean"
        }
      }
    },
    "VulnerabilitySummary": {
      "description": "VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.\n",
      "type": "object",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "x-omitempty": false,
          "example": {
            "Critical": 5,
            "High": 5
          }
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 500
        }
      }
    },
    "WebhookJob": {
      "description": "The webhook job.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The webhook job creation time.",
          "type": "string",
          "format": "date-time"
        },
        "event_type": {
          "description": "The webhook job event type.",
          "type": "string"
        },
        "id": {
          "description": "The webhook job ID.",
          "type": "integer",
          "format": "int64"
        },
        "job_detail": {
          "description": "The webhook job notify detailed data.",
          "type": "string"
        },
        "notify_type": {
          "description": "The webhook job notify type.",
          "type": "string"
        },
        "policy_id": {
          "description": "The webhook policy ID.",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The webhook job status.",
          "type": "string"
        },
        "update_time": {
          "description": "The webhook job update time.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "WebhookLastTrigger": {
      "description": "The webhook policy and last trigger time group by event type.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of webhook policy.",
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "description": "Whether or not the webhook policy enabled.",
          "type": "boolean"
        },
        "event_type": {
          "description": "The webhook event type.",
          "type": "string"
        },
        "last_trigger_time": {
          "description": "The last trigger time of webhook policy.",
          "type": "string",
          "format": "date-time"
        },
        "policy_name": {
          "description": "The webhook policy name.",
          "type": "string"
        }
      }
    },
    "WebhookPolicy": {
      "description": "The webhook policy object",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the webhook policy.",
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "description": "The creator of the webhook policy.",
          "type": "string"
        },
        "description": {
          "description": "The description of webhook policy.",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the webhook policy is enabled or not.",
          "type": "boolean",
          "x-omitempty": false
        },
        "event_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "The webhook policy ID.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of webhook policy.",
          "type": "string"
        },
        "project_id": {
          "description": "The project ID of webhook policy.",
          "type": "integer"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTargetObject"
          }
        },
        "update_time": {
          "description": "The update time of the webhook policy.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "WebhookTargetObject": {
      "description": "The webhook policy target object.",
      "type": "object",
      "properties": {
        "address": {
          "description": "The webhook target address.",
          "type": "string"
        },
        "auth_header": {
          "description": "The webhook auth header.",
          "type": "string"
        },
        "skip_cert_verify": {
          "description": "Whether or not to skip cert verify.",
          "type": "boolean"
        },
        "type": {
          "description": "The webhook target notify type.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "acceptVulnerabilities": {
      "type": "string",
      "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
      "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
      "name": "X-Accept-Vulnerabilities",
      "in": "header"
    },
    "digest": {
      "type": "string",
      "description": "The digest of the resource",
      "name": "digest",
      "in": "path",
      "required": true
    },
    "executionId": {
      "type": "integer",
      "description": "Execution ID",
      "name": "execution_id",
      "in": "path",
      "required": true
    },
    "gcId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the gc log",
      "name": "gc_id",
      "in": "path",
      "required": true
    },
    "immutableRuleId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the immutable rule",
      "name": "immutable_rule_id",
      "in": "path",
      "required": true
    },
    "instanceName": {
      "type": "string",
      "description": "Instance Name",
      "name": "preheat_instance_name",
      "in": "path",
      "required": true
    },
    "isResourceName": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
      "name": "X-Is-Resource-Name",
      "in": "header"
    },
    "labelId": {
      "type": "integer",
      "format": "int64",
      "description": "Label ID",
      "name": "label_id",
      "in": "path",
      "required": true
    },
    "page": {
      "type": "integer",
      "format": "int64",
      "default": 1,
      "description": "The page number",
      "name": "page",
      "in": "query"
    },
    "pageSize": {
      "maximum": 100,
      "type": "integer",
      "format": "int64",
      "default": 10,
      "description": "The size of per page",
      "name": "page_size",
      "in": "query"
    },
    "preheatPolicyName": {
      "type": "string",
      "description": "Preheat Policy Name",
      "name": "preheat_policy_name",
      "in": "path",
      "required": true
    },
    "projectName": {
      "type": "string",
      "description": "The name of the project",
      "name": "project_name",
      "in": "path",
      "required": true
    },
    "projectNameOrId": {
      "type": "string",
      "description": "The name or id of the project",
      "name": "project_name_or_id",
      "in": "path",
      "required": true
    },
    "query": {
      "type": "string",
      "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
      "name": "q",
      "in": "query"
    },
    "reference": {
      "type": "string",
      "description": "The reference of the artifact, can be digest or tag",
      "name": "reference",
      "in": "path",
      "required": true
    },
    "repositoryName": {
      "type": "string",
      "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
      "name": "repository_name",
      "in": "path",
      "required": true
    },
    "requestId": {
      "minLength": 1,
      "type": "string",
      "description": "An unique ID for the request",
      "name": "X-Request-Id",
      "in": "header"
    },
    "resourceNameInLocation": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.",
      "name": "X-Resource-Name-In-Location",
      "in": "header"
    },
    "robotId": {
      "type": "integer",
      "description": "Robot ID",
      "name": "robot_id",
      "in": "path",
      "required": true
    },
    "sort": {
      "type": "string",
      "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
      "name": "sort",
      "in": "query"
    },
    "tagName": {
      "type": "string",
      "description": "The name of the tag",
      "name": "tag_name",
      "in": "path",
      "required": true
    },
    "taskId": {
      "type": "integer",
      "description": "Task ID",
      "name": "task_id",
      "in": "path",
      "required": true
    },
    "webhookPolicyId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the webhook policy",
      "name": "webhook_policy_id",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "Success",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "201": {
      "description": "Created",
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location of the resource"
        },
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "202": {
      "description": "Accepted",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "405": {
      "description": "Method not allowed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "412": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "415": {
      "description": "Unsupported MediaType",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    },
    {}
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "These APIs provide services for manipulating Harbor project.",
    "title": "Harbor API",
    "version": "2.0"
  },
  "host": "localhost",
  "basePath": "/api/v2.0",
  "paths": {
    "/audit-logs": {
      "get": {
        "description": "This endpoint let user see the recent operation logs of the projects which he is member of\n",
        "tags": [
          "auditlog"
        ],
        "summary": "Get recent logs of the projects which the user is a member of",
        "operationId": "listAuditLogs",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/configurations": {
      "get": {
        "description": "This endpoint is for retrieving system configurations that only provides for admin user.\n",
        "tags": [
          "configure"
        ],
        "summary": "Get system configurations.",
        "operationId": "getConfigurations",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get system configurations successfully. The response body is a map.",
            "schema": {
              "$ref": "#/definitions/ConfigurationsResponse"
            }
          },
          "401": {
            "description": "User need to log in first.ÃŸ"
          },
          "403": {
            "description": "User does not have permission of admin role."
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      },
      "put": {
        "description": "This endpoint is for modifying system configurations that only provides for admin user.\n",
        "tags": [
          "configure"
        ],
        "summary": "Modify system configurations.",
        "operationId": "updateConfigurations",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The configuration map can contain a subset of the attributes of the schema, which are to be updated.",
            "name": "configurations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Configurations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Modify system configurations successfully."
          },
          "401": {
            "description": "User need to log in first."
          },
          "403": {
            "description": "User does not have permission of admin role."
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check the status of Harbor components",
        "tags": [
          "health"
        ],
        "summary": "Check the status of Harbor components",
        "operationId": "getHealth",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "The health status of Harbor components",
            "schema": {
              "$ref": "#/definitions/OverallHealthStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/icons/{digest}": {
      "get": {
        "description": "Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter \"digest\" in the path doesn't match the hash of the returned content",
        "tags": [
          "icon"
        ],
        "summary": "Get artifact icon",
        "operationId": "getIcon",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The digest of the resource",
            "name": "digest",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Icon"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/internalconfig": {
      "get": {
        "description": "This endpoint is for retrieving system configurations that only provides for internal api call.\n",
        "tags": [
          "configure"
        ],
        "summary": "Get internal configurations.",
        "operationId": "getInternalconfig",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get system configurations successfully. The response body is a map.",
            "schema": {
              "$ref": "#/definitions/InternalConfigurationsResponse"
            }
          },
          "401": {
            "description": "User need to log in first."
          },
          "403": {
            "description": "User does not have permission of admin role."
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      }
    },
    "/labels": {
      "get": {
        "description": "This endpoint let user list labels by name, scope and project_id\n",
        "tags": [
          "label"
        ],
        "summary": "List labels according to the query strings.",
        "operationId": "ListLabels",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The label name.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The label scope. Valid values are g and p. g for global labels and p for project labels.",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Relevant project ID, required when scope is p.",
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Label"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint let user creates a label.\n",
        "tags": [
          "label"
        ],
        "summary": "Post creates a label",
        "operationId": "CreateLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The json object of label.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "415": {
            "description": "Unsupported MediaType",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/labels/{label_id}": {
      "get": {
        "description": "This endpoint let user get the label by specific ID.\n",
        "tags": [
          "label"
        ],
        "summary": "Get the label specified by ID.",
        "operationId": "GetLabelByID",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Label ID",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "$ref": "#/definitions/Label"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint let user update label properties.\n",
        "tags": [
          "label"
        ],
        "summary": "Update the label properties.",
        "operationId": "UpdateLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Label ID",
            "name": "label_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The updated label json object.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the label specified by ID.\n",
        "tags": [
          "label"
        ],
        "summary": "Delete the label specified by ID.",
        "operationId": "DeleteLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Label ID",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/ldap/groups/search": {
      "get": {
        "description": "This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Search available ldap groups.",
        "operationId": "searchLdapGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Ldap group name",
            "name": "groupname",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The LDAP group DN",
            "name": "groupdn",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search ldap group successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroup"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/ldap/ping": {
      "post": {
        "description": "This endpoint ping the available ldap service for test related configuration parameters.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Ping available ldap service.",
        "operationId": "pingLdap",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system.",
            "name": "ldapconf",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LdapConf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ping ldap service successfully.",
            "schema": {
              "$ref": "#/definitions/LdapPingResult"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/ldap/users/import": {
      "post": {
        "description": "This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Import selected available ldap users.",
        "operationId": "importLdapUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.",
            "name": "uid_list",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LdapImportUsers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Add ldap users successfully."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Failed import some users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapFailedImportUser"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/ldap/users/search": {
      "get": {
        "description": "This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter.\n",
        "tags": [
          "Ldap"
        ],
        "summary": "Search available ldap users.",
        "operationId": "searchLdapUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Registered user ID",
            "name": "username",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search ldap users successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LdapUser"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/instances": {
      "get": {
        "description": "List P2P provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P provider instances",
        "operationId": "ListInstances",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Instance"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of preheating provider instances"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create p2p provider instances",
        "tags": [
          "preheat"
        ],
        "summary": "Create p2p provider instances",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/instances/ping": {
      "post": {
        "description": "This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)\n",
        "tags": [
          "preheat"
        ],
        "summary": "Ping status of a instance.",
        "operationId": "PingInstances",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The JSON object of instance.",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Instance not found (when instance is provided by ID)."
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/instances/{preheat_instance_name}": {
      "get": {
        "description": "Get a P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Get a P2P provider instance",
        "operationId": "GetInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Instance Name",
            "name": "preheat_instance_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Update the specified P2P provider instance",
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Instance Name",
            "name": "preheat_instance_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The instance to update",
            "name": "instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the specified P2P provider instance",
        "tags": [
          "preheat"
        ],
        "summary": "Delete the specified P2P provider instance",
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Instance Name",
            "name": "preheat_instance_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/p2p/preheat/providers": {
      "get": {
        "description": "List P2P providers",
        "tags": [
          "preheat"
        ],
        "summary": "List P2P providers",
        "operationId": "ListProviders",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metadata"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "description": "This API simply replies a pong to indicate the process to handle API is up, disregarding the health status of dependent components.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "ping"
        ],
        "summary": "Ping Harbor to check if it's alive.",
        "operationId": "getPing",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "The API server is alive",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "description": "This endpoint returns projects created by Harbor.",
        "tags": [
          "project"
        ],
        "summary": "List projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of project.",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "format": "int32",
            "description": "The project is public or private.",
            "name": "public",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The name of project owner.",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Bool value indicating whether return detailed information of the project",
            "name": "with_detail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return all matched projects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of projects"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is for user to create a new project.",
        "tags": [
          "project"
        ],
        "summary": "Create a new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.",
            "name": "X-Resource-Name-In-Location",
            "in": "header"
          },
          {
            "description": "New created project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "head": {
        "description": "This endpoint is used to check if the project name provided already exist.",
        "tags": [
          "project"
        ],
        "summary": "Check if the project name user provided already exists.",
        "operationId": "headProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Project name for checking exists.",
            "name": "project_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}": {
      "get": {
        "description": "This endpoint returns specific project information by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Return specific project detail information",
        "operationId": "getProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched project information.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is aimed to update the properties of a project.",
        "tags": [
          "project"
        ],
        "summary": "Update properties for a selected project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updates of project.",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint is aimed to delete project by project ID.",
        "tags": [
          "project"
        ],
        "summary": "Delete project by projectID",
        "operationId": "deleteProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/_deletable": {
      "get": {
        "description": "Get the deletable status of the project",
        "tags": [
          "project"
        ],
        "summary": "Get the deletable status of the project",
        "operationId": "getProjectDeletable",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return deletable status of the project.",
            "schema": {
              "$ref": "#/definitions/ProjectDeletable"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/immutabletagrules": {
      "get": {
        "description": "This endpoint returns the immutable tag rules of a project\n",
        "tags": [
          "immutable"
        ],
        "summary": "List all immutable tag rules of current project",
        "operationId": "ListImmuRules",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImmutableRule"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of immutable tag"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint add an immutable tag rule to the project\n",
        "tags": [
          "immutable"
        ],
        "summary": "Add an immutable tag rule to current project",
        "operationId": "CreateImmuRule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "name": "ImmutableRule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImmutableRule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}": {
      "put": {
        "tags": [
          "immutable"
        ],
        "summary": "Update the immutable tag rule or enable or disable the rule",
        "operationId": "UpdateImmuRule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the immutable rule",
            "name": "immutable_rule_id",
            "in": "path",
            "required": true
          },
          {
            "name": "ImmutableRule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImmutableRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "immutable"
        ],
        "summary": "Delete the immutable tag rule.",
        "operationId": "DeleteImmuRule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the immutable rule",
            "name": "immutable_rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/members": {
      "get": {
        "description": "Get all project member information",
        "tags": [
          "member"
        ],
        "summary": "Get all project member information",
        "operationId": "listProjectMembers",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The entity name to search.",
            "name": "entityname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get project members successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectMemberEntity"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of members"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group. ",
        "tags": [
          "member"
        ],
        "summary": "Create project member",
        "operationId": "createProjectMember",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "name": "project_member",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectMember"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project member created successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/members/{mid}": {
      "get": {
        "description": "Get the project member information",
        "tags": [
          "member"
        ],
        "summary": "Get the project member information",
        "operationId": "getProjectMember",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The member ID",
            "name": "mid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project member retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ProjectMemberEntity"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update project member relationship",
        "tags": [
          "member"
        ],
        "summary": "Update project member",
        "operationId": "updateProjectMember",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Member ID.",
            "name": "mid",
            "in": "path",
            "required": true
          },
          {
            "name": "role",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Delete project member",
        "operationId": "deleteProjectMember",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Member ID.",
            "name": "mid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/metadatas/": {
      "get": {
        "description": "Get the metadata of the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Get the metadata of the specific project",
        "operationId": "listProjectMetadatas",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Add metadata for the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Add metadata for the specific project",
        "operationId": "addProjectMetadatas",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "name": "metadata",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/metadatas/{meta_name}": {
      "get": {
        "description": "Get the specific metadata of the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Get the specific metadata of the specific project",
        "operationId": "getProjectMetadata",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of metadata.",
            "name": "meta_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the specific metadata for the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Update the specific metadata for the specific project",
        "operationId": "updateProjectMetadata",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of metadata.",
            "name": "meta_name",
            "in": "path",
            "required": true
          },
          {
            "name": "metadata",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the specific metadata for the specific project",
        "tags": [
          "projectMetadata"
        ],
        "summary": "Delete the specific metadata for the specific project",
        "operationId": "deleteProjectMetadata",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of metadata.",
            "name": "meta_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots": {
      "get": {
        "description": "Get all robot accounts of specified project",
        "tags": [
          "robotv1"
        ],
        "summary": "Get all robot accounts of specified project",
        "operationId": "ListRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robotv1"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreateV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByIDV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Used to disable/enable a specified robot account.",
        "tags": [
          "robotv1"
        ],
        "summary": "Update status of robot account.",
        "operationId": "UpdateRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robotv1"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobotV1",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/scanner": {
      "get": {
        "description": "Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.",
        "tags": [
          "project"
        ],
        "summary": "Get project level scanner",
        "operationId": "getScannerOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the scanner registration.",
            "schema": {
              "$ref": "#/definitions/ScannerRegistration"
            }
          },
          "400": {
            "description": "Bad project ID"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "403": {
            "description": "Request is not allowed"
          },
          "404": {
            "description": "The requested object is not found"
          },
          "500": {
            "description": "Internal server error happened"
          }
        }
      },
      "put": {
        "description": "Set one of the system configured scanner registration as the indepndent scanner of the specified project.",
        "tags": [
          "project"
        ],
        "summary": "Configure scanner for the specified project",
        "operationId": "setScannerOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectScanner"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/scanner/candidates": {
      "get": {
        "description": "Retrieve the system configured scanner registrations as candidates of setting project level scanner.",
        "tags": [
          "project"
        ],
        "summary": "Get scanner registration candidates for configurating project level scanner",
        "operationId": "listScannerCandidatesOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scanner registrations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScannerRegistration"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/summary": {
      "get": {
        "description": "Get summary of the project.",
        "tags": [
          "project"
        ],
        "summary": "Get summary of the project.",
        "operationId": "getProjectSummary",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get summary of the project successfully.",
            "schema": {
              "$ref": "#/definitions/ProjectSummary"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/events": {
      "get": {
        "description": "Get supportted event types and notify types.",
        "tags": [
          "webhook"
        ],
        "summary": "Get supported event types and notify types.",
        "operationId": "GetSupportedEventTypes",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SupportedWebhookEventTypes"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/jobs": {
      "get": {
        "description": "This endpoint returns webhook jobs of a project.\n",
        "tags": [
          "webhookjob"
        ],
        "summary": "List project webhook jobs",
        "operationId": "ListWebhookJobs",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The policy ID.",
            "name": "policy_id",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The status of webhook job.",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List project webhook jobs successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookJob"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/lasttrigger": {
      "get": {
        "description": "This endpoint returns last trigger information of project webhook policy.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Get project webhook policy last trigger info",
        "operationId": "LastTrigger",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test webhook connection successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookLastTrigger"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/policies": {
      "get": {
        "description": "This endpoint returns webhook policies of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "List project webhook policies.",
        "operationId": "ListWebhookPoliciesOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of webhook policies."
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint create a webhook policy if the project does not have one.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Create project webhook policy.",
        "operationId": "CreateWebhookPolicyOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Properties \"targets\" and \"event_types\" needed.",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project webhook policy create successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}": {
      "get": {
        "description": "This endpoint returns specified webhook policy of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Get project webhook policy",
        "operationId": "GetWebhookPolicyOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the webhook policy",
            "name": "webhook_policy_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get webhook policy successfully.",
            "schema": {
              "$ref": "#/definitions/WebhookPolicy"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is aimed to update the webhook policy of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Update webhook policy of a project.",
        "operationId": "UpdateWebhookPolicyOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the webhook policy",
            "name": "webhook_policy_id",
            "in": "path",
            "required": true
          },
          {
            "description": "All properties needed except \"id\", \"project_id\", \"creation_time\", \"update_time\".",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint is aimed to delete webhookpolicy of a project.\n",
        "tags": [
          "webhook"
        ],
        "summary": "Delete webhook policy of a project",
        "operationId": "DeleteWebhookPolicyOfProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
            "name": "X-Is-Resource-Name",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name or id of the project",
            "name": "project_name_or_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the webhook policy",
            "name": "webhook_policy_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/logs": {
      "get": {
        "description": "Get recent logs of the projects",
        "tags": [
          "project"
        ],
        "summary": "Get recent logs of the projects",
        "operationId": "getLogs",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies": {
      "get": {
        "description": "List preheat policies",
        "tags": [
          "preheat"
        ],
        "summary": "List preheat policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List preheat policies success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PreheatPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of policies"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a preheat policy under a project",
        "tags": [
          "preheat"
        ],
        "summary": "Create a preheat policy under a project",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}": {
      "get": {
        "description": "Get a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Get a preheat policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preheat policy success",
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Update preheat policy",
        "operationId": "UpdatePolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Manual preheat",
        "tags": [
          "preheat"
        ],
        "summary": "Manual preheat",
        "operationId": "ManualPreheat",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The policy schema info",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreheatPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a preheat policy",
        "tags": [
          "preheat"
        ],
        "summary": "Delete a preheat policy",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions": {
      "get": {
        "description": "List executions for the given policy",
        "tags": [
          "preheat"
        ],
        "summary": "List executions for the given policy",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List executions success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Execution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of executions"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}": {
      "get": {
        "description": "Get a execution detail by id",
        "tags": [
          "preheat"
        ],
        "summary": "Get a execution detail by id",
        "operationId": "GetExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get execution success",
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Stop a execution",
        "tags": [
          "preheat"
        ],
        "summary": "Stop a execution",
        "operationId": "StopExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The data of execution",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Execution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks": {
      "get": {
        "description": "List all the related tasks for the given execution",
        "tags": [
          "preheat"
        ],
        "summary": "List all the related tasks for the given execution",
        "operationId": "ListTasks",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List tasks success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tasks"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs": {
      "get": {
        "description": "Get the log text stream of the specified task for the given execution",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "preheat"
        ],
        "summary": "Get the log text stream of the specified task for the given execution",
        "operationId": "GetPreheatLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Preheat Policy Name",
            "name": "preheat_policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Execution ID",
            "name": "execution_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get log success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "Content type of response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/preheat/providers": {
      "get": {
        "description": "Get all providers at project level",
        "tags": [
          "preheat"
        ],
        "summary": "Get all providers at project level",
        "operationId": "ListProvidersUnderProject",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderUnderProject"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories": {
      "get": {
        "description": "List repositories of the specified project",
        "tags": [
          "repository"
        ],
        "summary": "List repositories",
        "operationId": "listRepositories",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}": {
      "get": {
        "description": "Get the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Get repository",
        "operationId": "getRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Update repository",
        "operationId": "updateRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of repository.",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Delete repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts": {
      "get": {
        "description": "List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to",
        "tags": [
          "artifact"
        ],
        "summary": "List artifacts",
        "operationId": "listArtifacts",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
            "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
            "name": "X-Accept-Vulnerabilities",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are included inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are included inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is included inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of artifacts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Copy the artifact specified in the \"from\" parameter to the repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Copy artifact",
        "operationId": "CopyArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".",
            "name": "from",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}": {
      "get": {
        "description": "Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the specific artifact",
        "operationId": "getArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
            "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
            "name": "X-Accept-Vulnerabilities",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are inclued inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are inclued inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is inclued inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is inclued inside the returning artifacts",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag",
        "tags": [
          "artifact"
        ],
        "summary": "Delete the specific artifact",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities": {
      "get": {
        "description": "Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the vulnerabilities addition of the specific artifact",
        "operationId": "getVulnerabilitiesAddition",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
            "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
            "name": "X-Accept-Vulnerabilities",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the vulnerabilities addition"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}": {
      "get": {
        "description": "Get the addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the addition of the specific artifact",
        "operationId": "getAddition",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "build_history",
              "values.yaml",
              "readme.md",
              "dependencies"
            ],
            "type": "string",
            "description": "The type of addition.",
            "name": "addition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the addition"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels": {
      "post": {
        "description": "Add label to the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Add label to artifact",
        "operationId": "addLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "description": "The label that added to the artifact. Only the ID property is needed.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}": {
      "delete": {
        "description": "Remove the label from the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Remove label from artifact",
        "operationId": "removeLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the label that removed from the artifact.",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan": {
      "post": {
        "description": "Scan the specified artifact",
        "tags": [
          "scan"
        ],
        "summary": "Scan the artifact",
        "operationId": "scanArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log": {
      "get": {
        "description": "Get the log of the scan report",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "scan"
        ],
        "summary": "Get the log of the scan report",
        "operationId": "getReportLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The report id to get the log",
            "name": "report_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get scan log file",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags": {
      "get": {
        "description": "List tags of the specific artifact",
        "tags": [
          "artifact"
        ],
        "summary": "List tags",
        "operationId": "listTags",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the returning tags",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the returning tags",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tags"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a tag for the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of tag.",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}": {
      "delete": {
        "description": "Delete the tag of the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Delete tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the tag",
            "name": "tag_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/quotas": {
      "get": {
        "description": "List quotas",
        "tags": [
          "quota"
        ],
        "summary": "List quotas",
        "operationId": "listQuotas",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The reference type of quota.",
            "name": "reference",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The reference id of quota.",
            "name": "reference_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort method, valid values include:\n'hard.resource_name', '-hard.resource_name', 'used.resource_name', '-used.resource_name'.\nHere '-' stands for descending order, resource_name should be the real resource name of the quota.\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the quotas.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Quota"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of access logs"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/quotas/{id}": {
      "get": {
        "description": "Get the specified quota",
        "tags": [
          "quota"
        ],
        "summary": "Get the specified quota",
        "operationId": "getQuota",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the quota.",
            "schema": {
              "$ref": "#/definitions/Quota"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update hard limits of the specified quota",
        "tags": [
          "quota"
        ],
        "summary": "Update the specified quota",
        "operationId": "updateQuota",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The new hard limits for the quota",
            "name": "hard",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuotaUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/registries": {
      "get": {
        "description": "List the registries",
        "tags": [
          "registry"
        ],
        "summary": "List the registries",
        "operationId": "listRegistries",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Deprecated, use ` + "`" + `q` + "`" + ` instead.",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Registry"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a registry",
        "tags": [
          "registry"
        ],
        "summary": "Create a registry",
        "operationId": "createRegistry",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The registry",
            "name": "registry",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/registries/ping": {
      "post": {
        "description": "Check status of a registry",
        "tags": [
          "registry"
        ],
        "summary": "Check status of a registry",
        "operationId": "pingRegistry",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The registry",
            "name": "registry",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryPing"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/registries/{id}": {
      "get": {
        "description": "Get the specific registry",
        "tags": [
          "registry"
        ],
        "summary": "Get the specific registry",
        "operationId": "getRegistry",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Registry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the registry",
        "tags": [
          "registry"
        ],
        "summary": "Update the registry",
        "operationId": "updateRegistry",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The registry ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The registry",
            "name": "registry",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the specific registry",
        "tags": [
          "registry"
        ],
        "summary": "Delete the specific registry",
        "operationId": "deleteRegistry",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Registry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/registries/{id}/info": {
      "get": {
        "description": "Get the registry info",
        "tags": [
          "registry"
        ],
        "summary": "Get the registry info",
        "operationId": "getRegistryInfo",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Registry ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegistryInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/adapterinfos": {
      "get": {
        "description": "List all registered registry provider information",
        "tags": [
          "registry"
        ],
        "summary": "List all registered registry provider information",
        "operationId": "listRegistryProviderInfos",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/RegistryProviderInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/adapters": {
      "get": {
        "description": "List registry adapters",
        "tags": [
          "registry"
        ],
        "summary": "List registry adapters",
        "operationId": "listRegistryProviderTypes",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions": {
      "get": {
        "description": "List replication executions",
        "tags": [
          "replication"
        ],
        "summary": "List replication executions",
        "operationId": "listReplicationExecutions",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The ID of the policy that the executions belong to.",
            "name": "policy_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The execution status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The trigger mode.",
            "name": "trigger",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Start one replication execution according to the policy",
        "tags": [
          "replication"
        ],
        "summary": "Start one replication execution",
        "operationId": "startReplication",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The ID of policy that the execution belongs to",
            "name": "execution",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartReplicationExecution"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions/{id}": {
      "get": {
        "description": "Get the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Get the specific replication execution",
        "operationId": "getReplicationExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationExecution"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Stop the replication execution specified by ID",
        "tags": [
          "replication"
        ],
        "summary": "Stop the specific replication execution",
        "operationId": "stopReplication",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions/{id}/tasks": {
      "get": {
        "description": "List replication tasks for a specific execution",
        "tags": [
          "replication"
        ],
        "summary": "List replication tasks for a specific execution",
        "operationId": "listReplicationTasks",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The task status.",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The resource type.",
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/executions/{id}/tasks/{task_id}/log": {
      "get": {
        "description": "Get the log of the specific replication task",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "replication"
        ],
        "summary": "Get the log of the specific replication task",
        "operationId": "getReplicationLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the execution that the tasks belongs to.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the task.",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of response body"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/policies": {
      "get": {
        "description": "List replication policies",
        "tags": [
          "replication"
        ],
        "summary": "List replication policies",
        "operationId": "listReplicationPolicies",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Deprecated, use \"query\" instead. The policy name.",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplicationPolicy"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of the resources"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Create a replication policy",
        "operationId": "createReplicationPolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The replication policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplicationPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/replication/policies/{id}": {
      "get": {
        "description": "Get the specific replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Get the specific replication policy",
        "operationId": "getReplicationPolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Policy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReplicationPolicy"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Update the replication policy",
        "operationId": "updateReplicationPolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The policy ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The replication policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplicationPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the specific replication policy",
        "tags": [
          "replication"
        ],
        "summary": "Delete the specific replication policy",
        "operationId": "deleteReplicationPolicy",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Replication policy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/repositories": {
      "get": {
        "description": "List all authorized repositories",
        "tags": [
          "repository"
        ],
        "summary": "List all authorized repositories",
        "operationId": "listAllRepositories",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions": {
      "post": {
        "description": "Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.",
        "tags": [
          "Retention"
        ],
        "summary": "Create Retention Policy",
        "operationId": "createRetention",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "Create Retention Policy successfully.",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/metadatas": {
      "get": {
        "description": "Get Retention Metadatas.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Metadatas",
        "operationId": "getRentenitionMetadata",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention Metadatas successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionMetadata"
            }
          }
        }
      }
    },
    "/retentions/{id}": {
      "get": {
        "description": "Get Retention Policy.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention Policy",
        "operationId": "getRetention",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention Policy successfully.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.",
        "tags": [
          "Retention"
        ],
        "summary": "Update Retention Policy",
        "operationId": "updateRetention",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Retention Policy successfully."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.",
        "tags": [
          "Retention"
        ],
        "summary": "Delete Retention Policy",
        "operationId": "deleteRetention",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update Retention Policy successfully."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions": {
      "get": {
        "description": "Get Retention executions, execution status may be delayed before job service schedule it up.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention executions",
        "operationId": "listRetentionExecutions",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a Retention execution successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecution"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Trigger a Retention Execution",
        "operationId": "triggerRetentionExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dry_run": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger a Retention job successfully."
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}": {
      "patch": {
        "description": "Stop a Retention execution, only support \"stop\" action now.",
        "tags": [
          "Retention"
        ],
        "summary": "Stop a Retention execution",
        "operationId": "operateRetentionExecution",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "description": "The action, only support \"stop\" now.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stop a Retention job successfully."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks": {
      "get": {
        "description": "Get Retention tasks, each repository as a task.",
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention tasks",
        "operationId": "listRetentionTasks",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The size of per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job tasks successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RetentionExecutionTask"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/retentions/{id}/executions/{eid}/tasks/{tid}": {
      "get": {
        "description": "Get Retention job task log, tags ratain or deletion detail will be shown in a table.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Retention"
        ],
        "summary": "Get Retention job task log",
        "operationId": "getRetentionTaskLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "eid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Retention execution ID.",
            "name": "tid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get Retention job task log successfully.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/robots": {
      "get": {
        "description": "List the robot accounts with the specified level and project.",
        "tags": [
          "robot"
        ],
        "summary": "Get robot account",
        "operationId": "ListRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Robot"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of robot accounts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a robot account",
        "tags": [
          "robot"
        ],
        "summary": "Create a robot account",
        "operationId": "CreateRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotCreated"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/robots/{robot_id}": {
      "get": {
        "description": "This endpoint returns specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Get a robot account",
        "operationId": "GetRobotByID",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return matched robot information.",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint updates specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Update a robot account",
        "operationId": "UpdateRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes specific robot account information by robot ID.",
        "tags": [
          "robot"
        ],
        "summary": "Delete a robot account",
        "operationId": "DeleteRobot",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Refresh the robot secret",
        "tags": [
          "robot"
        ],
        "summary": "Refresh the robot secret",
        "operationId": "RefreshSec",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "Robot ID",
            "name": "robot_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of a robot account.",
            "name": "robotSec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return refreshed robot sec.",
            "schema": {
              "$ref": "#/definitions/RobotSec"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scanners": {
      "get": {
        "description": "Returns a list of currently configured scanner registrations.\n",
        "tags": [
          "scanner"
        ],
        "summary": "List scanner registrations",
        "operationId": "listScanners",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scanner registrations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScannerRegistration"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creats a new scanner registration with the given data.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Create a scanner registration",
        "operationId": "createScanner",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "A scanner registration to be created.",
            "name": "registration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScannerRegistrationReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scanners/ping": {
      "post": {
        "description": "Pings scanner adapter to test endpoint URL and authorization settings.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Tests scanner registration settings",
        "operationId": "pingScanner",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "A scanner registration settings to be tested.",
            "name": "settings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScannerRegistrationSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scanners/{registration_id}": {
      "get": {
        "description": "Retruns the details of the specified scanner registration.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Get a scanner registration details",
        "operationId": "getScanner",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The scanner registration identifer.",
            "name": "registration_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the scanner registration.",
            "schema": {
              "$ref": "#/definitions/ScannerRegistration"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates the specified scanner registration.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Update a scanner registration",
        "operationId": "updateScanner",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A scanner registraiton to be updated.",
            "name": "registration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScannerRegistrationReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the specified scanner registration.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Delete a scanner registration",
        "operationId": "deleteScanner",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully and return the deleted registration",
            "schema": {
              "$ref": "#/definitions/ScannerRegistration"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Set the specified scanner registration as the system default one.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Set system default scanner registration",
        "operationId": "setScannerAsDefault",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IsDefault"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set the specified scanner registration as system default"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scanners/{registration_id}/metadata": {
      "get": {
        "description": "Get the metadata of the specified scanner registration, including the capabilities and customized properties.\n",
        "tags": [
          "scanner"
        ],
        "summary": "Get the metadata of the specified scanner registration",
        "operationId": "getScannerMetadata",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The scanner registration identifier.",
            "name": "registration_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the specified scanner adapter",
            "schema": {
              "$ref": "#/definitions/ScannerAdapterMetadata"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scans/all/metrics": {
      "get": {
        "description": "Get the metrics of the latest scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scan all process",
        "operationId": "getLatestScanAllMetrics",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/scans/schedule/metrics": {
      "get": {
        "description": "Get the metrics of the latest scheduled scan all process",
        "tags": [
          "scanAll"
        ],
        "summary": "Get the metrics of the latest scheduled scan all process",
        "operationId": "getLatestScheduledScanAllMetrics",
        "deprecated": true,
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "description": "The Search endpoint returns information about the projects, repositories and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order.",
        "tags": [
          "search"
        ],
        "summary": "Search for projects, repositories and helm charts",
        "operationId": "search",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Search parameter for project and repository name.",
            "name": "q",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of search results",
            "schema": {
              "$ref": "#/definitions/Search"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "description": "Get the statistic information about the projects and repositories",
        "tags": [
          "statistic"
        ],
        "summary": "Get the statistic information about the projects and repositories",
        "operationId": "getStatistic",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "The statistic information",
            "schema": {
              "$ref": "#/definitions/Statistic"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/CVEAllowlist": {
      "get": {
        "description": "Get the system level allowlist of CVE.  This API can be called by all authenticated users.",
        "tags": [
          "SystemCVEAllowlist"
        ],
        "summary": "Get the system level allowlist of CVE.",
        "operationId": "getSystemCVEAllowlist",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the CVE allowlist.",
            "schema": {
              "$ref": "#/definitions/CVEAllowlist"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.",
        "tags": [
          "SystemCVEAllowlist"
        ],
        "summary": "Update the system level allowlist of CVE.",
        "operationId": "putSystemCVEAllowlist",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The allowlist with new content",
            "name": "allowlist",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CVEAllowlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the CVE allowlist."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc": {
      "get": {
        "description": "This endpoint let user get gc execution history.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc results.",
        "operationId": "getGCHistory",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GCHistory"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of history"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc/schedule": {
      "get": {
        "description": "This endpoint is for get schedule of gc job.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc's schedule.",
        "operationId": "getGCSchedule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc's schedule.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Update gc's schedule.",
        "operationId": "updateGCSchedule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated gc's schedule successfully."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is for update gc schedule.\n",
        "tags": [
          "gc"
        ],
        "summary": "Create a gc schedule.",
        "operationId": "createGCSchedule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "Updates of gc's schedule.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc/{gc_id}": {
      "get": {
        "description": "This endpoint let user get gc status filtered by specific ID.",
        "tags": [
          "gc"
        ],
        "summary": "Get gc status.",
        "operationId": "getGC",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the gc log",
            "name": "gc_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get gc results successfully.",
            "schema": {
              "$ref": "#/definitions/GCHistory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/gc/{gc_id}/log": {
      "get": {
        "description": "This endpoint let user get gc job logs filtered by specific ID.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "gc"
        ],
        "summary": "Get gc job log.",
        "operationId": "getGCLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the gc log",
            "name": "gc_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get successfully.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/oidc/ping": {
      "post": {
        "description": "Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.\n",
        "tags": [
          "oidc"
        ],
        "summary": "Test the OIDC endpoint.",
        "operationId": "pingOIDC",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "Request body for OIDC endpoint to be tested.",
            "name": "endpoint",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "The URL of OIDC endpoint to be tested.",
                  "type": "string"
                },
                "verify_cert": {
                  "description": "Whether the certificate should be verified",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/system/scanAll/schedule": {
      "get": {
        "description": "This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Get scan all's schedule.",
        "operationId": "getScanAllSchedule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a schedule for the scan all job, which scans all of images in Harbor.",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Update scan all's schedule.",
        "operationId": "updateScanAllSchedule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "Updates the schedule of scan all job, which scans all of images in Harbor.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.",
        "tags": [
          "scanAll"
        ],
        "summary": "Create a schedule or a manual trigger for the scan all job.",
        "operationId": "createScanAllSchedule",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "Create a schedule or a manual trigger for the scan all job.",
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/systeminfo": {
      "get": {
        "description": "This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get general system info",
        "operationId": "getSystemInfo",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get general info successfully.",
            "schema": {
              "$ref": "#/definitions/GeneralInfo"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/systeminfo/getcert": {
      "get": {
        "description": "This endpoint is for downloading a default root certificate.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "systeminfo"
        ],
        "summary": "Get default root certificate.",
        "operationId": "getCert",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get default root certificate successfully.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "description": "To set the filename of the downloaded file."
              }
            }
          },
          "404": {
            "description": "Not found the default root certificate."
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/systeminfo/volumes": {
      "get": {
        "description": "This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.\n",
        "tags": [
          "systeminfo"
        ],
        "summary": "Get system volume info (total/free size).",
        "operationId": "getVolumes",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get system volumes successfully.",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/usergroups": {
      "get": {
        "description": "Get all user groups information",
        "tags": [
          "usergroup"
        ],
        "summary": "Get all user groups information",
        "operationId": "listUserGroups",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get user group successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroup"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create user group information",
        "tags": [
          "usergroup"
        ],
        "summary": "Create user group",
        "operationId": "createUserGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "name": "usergroup",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User group created successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/usergroups/{group_id}": {
      "get": {
        "description": "Get user group information",
        "tags": [
          "usergroup"
        ],
        "summary": "Get user group information",
        "operationId": "getUserGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Group ID",
            "name": "group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User group get successfully.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update user group information",
        "tags": [
          "usergroup"
        ],
        "summary": "Update group information",
        "operationId": "updateUserGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Group ID",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "name": "usergroup",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete user group",
        "tags": [
          "usergroup"
        ],
        "summary": "Delete user group",
        "operationId": "deleteUserGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "name": "group_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List users",
        "operationId": "listUsers",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "return the list of users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResp"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of users"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "This API can be used only when the authentication mode is for local DB.  When self registration is disabled.",
        "tags": [
          "user"
        ],
        "summary": "Create a local user.",
        "operationId": "createUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "description": "The new user",
            "name": "userReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreationReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "When the  self registration is disabled, non-admin does not have permission to create user.  When self registration is enabled, this API can only be called from UI portal, calling it via script will get a 403 error."
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get current user info.",
        "operationId": "getCurrentUserInfo",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get current user information successfully.",
            "schema": {
              "$ref": "#/definitions/UserResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users/current/permissions": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get current user permissions.",
        "operationId": "getCurrentUserPermissions",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The scope for the permission",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, the resources in the response are relative to the scope,\neg for resource '/project/1/repository' if relative is 'true' then the resource in response will be 'repository'.\n",
            "name": "relative",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get current user permission successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "401": {
            "description": "User need to log in first."
          },
          "500": {
            "description": "Internal errors."
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "description": "This endpoint is to search the users by username.  It's open for all authenticated requests.\n",
        "tags": [
          "user"
        ],
        "summary": "Search users by username",
        "operationId": "searchUsers",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Username for filtering results.",
            "name": "username",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Search users by username successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserSearchRespItem"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link to previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of available items"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user's profile.",
        "operationId": "getUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user's info successfully.",
            "schema": {
              "$ref": "#/definitions/UserResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user's profile.",
        "operationId": "updateUserProfile",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int",
            "description": "Registered user ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Only email, realname and comment can be modified.",
            "name": "profile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint let administrator of Harbor mark a registered user as removed.It actually won't be deleted from DB.\n",
        "tags": [
          "user"
        ],
        "summary": "Mark a registered user as be removed.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int",
            "description": "User ID for marking as to be removed.",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/cli_secret": {
      "put": {
        "description": "This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to 'OIDC'. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user.",
        "tags": [
          "user"
        ],
        "summary": "Set CLI secret for a user.",
        "operationId": "setCliSecret",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "secret",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OIDCCliSecretReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The secret is successfully updated"
          },
          "400": {
            "description": "Invalid user ID.  Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "412": {
            "description": "The auth mode of the system is not \"oidc_auth\", or the user is not onboarded via OIDC AuthN."
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/password": {
      "put": {
        "description": "This endpoint is for user to update password. Users with the admin role can change any user's password. Regular users can change only their own password.\n",
        "tags": [
          "user"
        ],
        "summary": "Change the password on a user that already exists.",
        "operationId": "updateUserPassword",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Password to be updated, the attribute 'old_password' is optional when the API is called by the system administrator.",
            "name": "password",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Invalid user ID; Password does not meet requirement"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "The caller does not have permission to update the password of the user with given ID, or the old password in request body is not correct."
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/sysadmin": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a registered user to change to be an administrator of Harbor.",
        "operationId": "setUserSysAdmin",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Toggle a user to admin or not.",
            "name": "sysadmin_flag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSysAdminFlag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Unexpected internal errors."
          }
        }
      }
    }
  },
  "definitions": {
    "Access": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of the access",
          "type": "string"
        },
        "effect": {
          "description": "The effect of the access",
          "type": "string"
        },
        "resource": {
          "description": "The resource of the access",
          "type": "string"
        }
      }
    },
    "AdditionLink": {
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "href": {
          "description": "The link of the addition",
          "type": "string"
        }
      }
    },
    "AdditionLinks": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      }
    },
    "Annotations": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "icon": {
          "description": "The digest of the icon",
          "type": "string"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scan_overview": {
          "description": "The overview of the scan result.",
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string"
        }
      }
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer"
        },
        "op_time": {
          "description": "The time when this operation is triggered.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05Z"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string"
        }
      }
    },
    "AuthproxySetting": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'",
          "type": "string"
        },
        "server_certificate": {
          "description": "The certificate to be pinned when connecting auth proxy.",
          "type": "string"
        },
        "skip_search": {
          "description": "The flag to determine whether Harbor can skip search the user/group when adding him as a member.",
          "type": "boolean"
        },
        "tokenreivew_endpoint": {
          "description": "The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'",
          "type": "string"
        },
        "verify_cert": {
          "description": "The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.",
          "type": "boolean"
        }
      }
    },
    "BoolConfigItem": {
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean"
        },
        "value": {
          "description": "The boolean value of current config item",
          "type": "boolean"
        }
      }
    },
    "CVEAllowlist": {
      "description": "The CVE Allowlist for system or project",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the allowlist.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.",
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "description": "ID of the allowlist",
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVEAllowlistItem"
          }
        },
        "project_id": {
          "description": "ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.",
          "type": "integer"
        },
        "update_time": {
          "description": "The update time of the allowlist.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CVEAllowlistItem": {
      "description": "The item in CVE allowlist",
      "type": "object",
      "properties": {
        "cve_id": {
          "description": "The ID of the CVE, such as \"CVE-2019-10164\"",
          "type": "string"
        }
      }
    },
    "ChartMetadata": {
      "description": "The metadata of chart version",
      "type": "object",
      "required": [
        "name",
        "version",
        "engine",
        "icon",
        "apiVersion",
        "appVersion"
      ],
      "properties": {
        "apiVersion": {
          "description": "The API version of this chart",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed in the chart",
          "type": "string"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "description": "A one-sentence description of chart",
          "type": "string"
        },
        "engine": {
          "description": "The name of template engine",
          "type": "string"
        },
        "home": {
          "description": "The URL to the relevant project page",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file",
          "type": "string"
        },
        "keywords": {
          "description": "A list of string keywords",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the chart",
          "type": "string"
        },
        "sources": {
          "description": "The URL to the source code of chart",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "A SemVer 2 version of chart",
          "type": "string"
        }
      }
    },
    "ChartVersion": {
      "description": "A specified chart entry",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ChartMetadata"
        },
        {
          "type": "object",
          "properties": {
            "created": {
              "description": "The created time of the chart entry",
              "type": "string"
            },
            "digest": {
              "description": "The digest value of the chart entry",
              "type": "string"
            },
            "removed": {
              "description": "A flag to indicate if the chart entry is removed",
              "type": "boolean"
            },
            "urls": {
              "description": "The urls of the chart entry",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "labels": {
          "description": "A list of label",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        }
      }
    },
    "ComponentHealthStatus": {
      "description": "The health status of component",
      "type": "object",
      "properties": {
        "error": {
          "description": "(optional) The error message when the status is \"unhealthy\"",
          "type": "string"
        },
        "name": {
          "description": "The component name",
          "type": "string"
        },
        "status": {
          "description": "The health status of component",
          "type": "string"
        }
      }
    },
    "Configurations": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_from": {
          "description": "The sender name for Email notification.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_host": {
          "description": "The hostname of SMTP server that sends Email notification.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_identity": {
          "description": "By default it's empty so the email_username is picked",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the email server.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_password": {
          "description": "Email password",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_port": {
          "description": "The port of SMTP server",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_ssl": {
          "description": "When it''s set to true the system will access Email server via TLS by default.  If it''s set to false, it still will handle \"STARTTLS\" from server side.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "email_username": {
          "description": "The username for authenticate against SMTP server",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_admin_groups": {
          "description": "The group which has the harbor admin privileges",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_admin_usernames": {
          "description": "The username which has the harbor admin privileges",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_endpoint": {
          "description": "The endpoint of the HTTP auth",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_server_certificate": {
          "description": "The certificate of the HTTP auth provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_skip_search": {
          "description": "Search user before onboard",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_tokenreview_endpoint": {
          "description": "The token review endpoint",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "http_authproxy_verify_cert": {
          "description": "Verify the HTTP auth provider's certificate",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_base_dn": {
          "description": "The Base DN for LDAP binding.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_filter": {
          "description": "The filter for LDAP search",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_admin_dn": {
          "description": "Specify the ldap group which have the same privilege with Harbor admin",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_attribute_name": {
          "description": "The attribute which is used as identity of the LDAP group, default is cn.'",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_base_dn": {
          "description": "The base DN to search LDAP group.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_membership_attribute": {
          "description": "The user attribute to identify the group membership",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_search_filter": {
          "description": "The filter to search the ldap group",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_group_search_scope": {
          "description": "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_scope": {
          "description": "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_search_dn": {
          "description": "The DN of the user to do the search.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_search_password": {
          "description": "The password of the ldap search dn",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_timeout": {
          "description": "Timeout in seconds for connection to LDAP server",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_uid": {
          "description": "The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_url": {
          "description": "The URL of LDAP server",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "ldap_verify_cert": {
          "description": "Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "notification_enable": {
          "description": "Enable notification",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_admin_group": {
          "description": "The OIDC group which has the harbor admin privileges",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_auto_onboard": {
          "description": "Auto onboard the OIDC user",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_client_id": {
          "description": "The client ID of the OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_client_secret": {
          "description": "The OIDC provider secret",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_endpoint": {
          "description": "The endpoint of the OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_extra_redirect_parms": {
          "description": "Extra parameters to add when redirect request to OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_groups_claim": {
          "description": "The attribute claims the group name",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_name": {
          "description": "The OIDC provider name",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_scope": {
          "description": "The scope of the OIDC provider",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_user_claim": {
          "description": "The attribute claims the username",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "oidc_verify_cert": {
          "description": "Verify the OIDC provider's certificate'",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be ''adminonly'' or ''everyone''.",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "quota_per_project_enable": {
          "description": "Enable quota per project",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "robot_name_prefix": {
          "description": "The rebot account name prefix",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "robot_token_duration": {
          "description": "The robot account token duration in days",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "self_registration": {
          "description": "Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "storage_per_project": {
          "description": "The storage quota per project",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "token_expiration": {
          "description": "The expiration time of the token for internal Registry, in minutes.",
          "type": "integer",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_client_id": {
          "description": "The client id of UAA",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_client_secret": {
          "description": "The client secret of the UAA",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_endpoint": {
          "description": "The endpoint of the UAA",
          "type": "string",
          "x-isnullable": true,
          "x-omitempty": true
        },
        "uaa_verify_cert": {
          "description": "Verify the certificate in UAA server",
          "type": "boolean",
          "x-isnullable": true,
          "x-omitempty": true
        }
      }
    },
    "ConfigurationsResponse": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_from": {
          "description": "The sender name for Email notification.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_host": {
          "description": "The hostname of SMTP server that sends Email notification.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_identity": {
          "description": "By default it's empty so the email_username is picked",
          "$ref": "#/definitions/StringConfigItem"
        },
        "email_insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the email server.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "email_port": {
          "description": "The port of SMTP server",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "email_ssl": {
          "description": "When it''s set to true the system will access Email server via TLS by default.  If it''s set to false, it still will handle \"STARTTLS\" from server side.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "email_username": {
          "description": "The username for authenticate against SMTP server",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_admin_groups": {
          "description": "The group which has the harbor admin privileges",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_admin_usernames": {
          "description": "The usernames which has the harbor admin privileges",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_endpoint": {
          "description": "The endpoint of the HTTP auth",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_server_certificate": {
          "description": "The certificate of the HTTP auth provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_skip_search": {
          "description": "Search user before onboard",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "http_authproxy_tokenreview_endpoint": {
          "description": "The token review endpoint",
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_verify_cert": {
          "description": "Verify the HTTP auth provider's certificate",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "ldap_base_dn": {
          "description": "The Base DN for LDAP binding.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_filter": {
          "description": "The filter for LDAP search",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_admin_dn": {
          "description": "Specify the ldap group which have the same privilege with Harbor admin",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_attribute_name": {
          "description": "The attribute which is used as identity of the LDAP group, default is cn.'",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_base_dn": {
          "description": "The base DN to search LDAP group.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_membership_attribute": {
          "description": "The user attribute to identify the group membership",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_search_filter": {
          "description": "The filter to search the ldap group",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_search_scope": {
          "description": "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_scope": {
          "description": "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_search_dn": {
          "description": "The DN of the user to do the search.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_timeout": {
          "description": "Timeout in seconds for connection to LDAP server",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_uid": {
          "description": "The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_url": {
          "description": "The URL of LDAP server",
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_verify_cert": {
          "description": "Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "notification_enable": {
          "description": "Enable notification",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "oidc_admin_group": {
          "description": "The OIDC group which has the harbor admin privileges",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_auto_onboard": {
          "description": "Auto onboard the OIDC user",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "oidc_client_id": {
          "description": "The client ID of the OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_endpoint": {
          "description": "The endpoint of the OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_extra_redirect_parms": {
          "description": "Extra parameters to add when redirect request to OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_groups_claim": {
          "description": "The attribute claims the group name",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_name": {
          "description": "The OIDC provider name",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_scope": {
          "description": "The scope of the OIDC provider",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_user_claim": {
          "description": "The attribute claims the username",
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_verify_cert": {
          "description": "Verify the OIDC provider's certificate'",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be ''adminonly'' or ''everyone''.",
          "$ref": "#/definitions/StringConfigItem"
        },
        "quota_per_project_enable": {
          "description": "Enable quota per project",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "robot_name_prefix": {
          "description": "The rebot account name prefix",
          "$ref": "#/definitions/StringConfigItem"
        },
        "robot_token_duration": {
          "description": "The robot account token duration in days",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "scan_all_policy": {
          "type": "object",
          "properties": {
            "parameter": {
              "description": "The parameters of the policy, the values are dependent on the type of the policy.",
              "type": "object",
              "properties": {
                "daily_time": {
                  "description": "The offset in seconds of UTC 0 o'clock, only valid when the policy type is \"daily\"",
                  "type": "integer"
                }
              }
            },
            "type": {
              "description": "The type of scan all policy, currently the valid values are \"none\" and \"daily\"",
              "type": "string"
            }
          }
        },
        "self_registration": {
          "description": "Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.",
          "$ref": "#/definitions/BoolConfigItem"
        },
        "storage_per_project": {
          "description": "The storage quota per project",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "token_expiration": {
          "description": "The expiration time of the token for internal Registry, in minutes.",
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "uaa_client_id": {
          "description": "The client id of UAA",
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_client_secret": {
          "description": "The client secret of the UAA",
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_endpoint": {
          "description": "The endpoint of the UAA",
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_verify_cert": {
          "description": "Verify the certificate in UAA server",
          "$ref": "#/definitions/BoolConfigItem"
        }
      }
    },
    "ConfigurationsResponseScanAllPolicy": {
      "type": "object",
      "properties": {
        "parameter": {
          "description": "The parameters of the policy, the values are dependent on the type of the policy.",
          "type": "object",
          "properties": {
            "daily_time": {
              "description": "The offset in seconds of UTC 0 o'clock, only valid when the policy type is \"daily\"",
              "type": "integer"
            }
          }
        },
        "type": {
          "description": "The type of scan all policy, currently the valid values are \"none\" and \"daily\"",
          "type": "string"
        }
      }
    },
    "ConfigurationsResponseScanAllPolicyParameter": {
      "description": "The parameters of the policy, the values are dependent on the type of the policy.",
      "type": "object",
      "properties": {
        "daily_time": {
          "description": "The offset in seconds of UTC 0 o'clock, only valid when the policy type is \"daily\"",
          "type": "integer"
        }
      }
    },
    "Error": {
      "description": "a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "Errors": {
      "description": "The error array that describe the errors got during the handling of request",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "EventType": {
      "description": "Webhook supportted event type.",
      "type": "string",
      "example": "pullImage"
    },
    "Execution": {
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time of execution",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of execution",
          "type": "integer"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "start_time": {
          "description": "The start time of execution",
          "type": "string"
        },
        "status": {
          "description": "The status of execution",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of execution",
          "type": "string"
        },
        "trigger": {
          "description": "The trigger of execution",
          "type": "string"
        },
        "vendor_id": {
          "description": "The vendor id of execution",
          "type": "integer"
        },
        "vendor_type": {
          "description": "The vendor type of execution",
          "type": "string"
        }
      }
    },
    "ExtraAttrs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "FilterStyle": {
      "description": "The style of the resource filter",
      "type": "object",
      "properties": {
        "style": {
          "description": "The filter style",
          "type": "string"
        },
        "type": {
          "description": "The filter type",
          "type": "string"
        },
        "values": {
          "description": "The filter values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GCHistory": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of gc job.",
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "description": "if gc job was deleted.",
          "type": "boolean"
        },
        "id": {
          "description": "the id of gc job.",
          "type": "integer"
        },
        "job_kind": {
          "description": "the job kind of gc job.",
          "type": "string"
        },
        "job_name": {
          "description": "the job name of gc job.",
          "type": "string"
        },
        "job_parameters": {
          "description": "the job parameters of gc job.",
          "type": "string"
        },
        "job_status": {
          "description": "the status of gc job.",
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "update_time": {
          "description": "the update time of gc job.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GeneralInfo": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current Harbor instance.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "authproxy_settings": {
          "description": "The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.",
          "x-nullable": true,
          "x-omitempty": true,
          "$ref": "#/definitions/AuthproxySetting"
        },
        "external_url": {
          "description": "The external URL of Harbor, with protocol.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "harbor_version": {
          "description": "The build version of Harbor.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "has_ca_root": {
          "description": "Indicate whether there is a ca root cert file ready for download in the file system.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "notification_enable": {
          "description": "The flag to indicate whether notification mechanism is enabled on Harbor instance.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be 'adminonly' or 'everyone'.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_storage_provider_name": {
          "description": "The storage provider's name of Harbor registry",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "registry_url": {
          "description": "The url of registry against which the docker command should be issued.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "self_registration": {
          "description": "Indicate whether the Harbor instance enable user to register himself.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_chartmuseum": {
          "description": "If the Harbor instance is deployed with nested chartmuseum.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        },
        "with_notary": {
          "description": "If the Harbor instance is deployed with nested notary.",
          "type": "boolean",
          "x-nullable": true,
          "x-omitempty": true
        }
      }
    },
    "Icon": {
      "type": "object",
      "properties": {
        "content": {
          "description": "The base64 encoded content of the icon",
          "type": "string"
        },
        "content-type": {
          "description": "The content type of the icon",
          "type": "string"
        }
      }
    },
    "ImmutableRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer"
        },
        "scope_selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ImmutableSelector"
            }
          }
        },
        "tag_selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImmutableSelector"
          }
        },
        "template": {
          "type": "string"
        }
      }
    },
    "ImmutableSelector": {
      "type": "object",
      "properties": {
        "decoration": {
          "type": "string"
        },
        "extras": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "The auth credential data if exists",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "auth_mode": {
          "description": "The authentication way supported",
          "type": "string"
        },
        "default": {
          "description": "Whether the instance is default or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "description": {
          "description": "Description of instance",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the instance is activated or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "endpoint": {
          "description": "The service endpoint of this instance",
          "type": "string"
        },
        "id": {
          "description": "Unique ID",
          "type": "integer"
        },
        "insecure": {
          "description": "Whether the instance endpoint is insecure or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Instance name",
          "type": "string"
        },
        "setup_timestamp": {
          "description": "The timestamp of instance setting up",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The health status",
          "type": "string"
        },
        "vendor": {
          "description": "Based on which driver, identified by ID",
          "type": "string"
        }
      }
    },
    "IntegerConfigItem": {
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean"
        },
        "value": {
          "description": "The integer value of current config item",
          "type": "integer"
        }
      }
    },
    "InternalConfigurationsResponse": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/goharbor/harbor/src/lib/config"
        },
        "type": "InternalCfg"
      }
    },
    "IsDefault": {
      "type": "object",
      "properties": {
        "is_default": {
          "description": "A flag indicating whether a scanner registration is default.",
          "type": "boolean"
        }
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time the label",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description the label",
          "type": "string"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name the label",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the label",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "LdapConf": {
      "description": "The ldap configure properties",
      "type": "object",
      "properties": {
        "ldap_base_dn": {
          "description": "The base dn of ldap service.",
          "type": "string"
        },
        "ldap_connection_timeout": {
          "description": "The connect timeout of ldap service(second).",
          "type": "integer",
          "format": "int64"
        },
        "ldap_filter": {
          "description": "The serach filter of ldap service.",
          "type": "string"
        },
        "ldap_scope": {
          "description": "The serach scope of ldap service.",
          "type": "integer",
          "format": "int64"
        },
        "ldap_search_dn": {
          "description": "The search dn of ldap service.",
          "type": "string"
        },
        "ldap_search_password": {
          "description": "The search password of ldap service.",
          "type": "string"
        },
        "ldap_uid": {
          "description": "The serach uid from ldap service attributes.",
          "type": "string"
        },
        "ldap_url": {
          "description": "The url of ldap service.",
          "type": "string"
        },
        "ldap_verify_cert": {
          "description": "Verify Ldap server certificate.",
          "type": "boolean"
        }
      }
    },
    "LdapFailedImportUser": {
      "type": "object",
      "properties": {
        "error": {
          "description": "fail reason.",
          "type": "string"
        },
        "uid": {
          "description": "the uid can't add to system.",
          "type": "string"
        }
      }
    },
    "LdapImportUsers": {
      "type": "object",
      "properties": {
        "ldap_uid_list": {
          "description": "selected uid list",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LdapPingResult": {
      "description": "The ldap ping result",
      "type": "object",
      "properties": {
        "message": {
          "description": "The ping operation output message.",
          "type": "string"
        },
        "success": {
          "description": "Test success",
          "type": "boolean"
        }
      }
    },
    "LdapUser": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The user email address from \"mail\" or \"email\" attribute.",
          "type": "string"
        },
        "realname": {
          "description": "The user realname from \"uid\" or \"cn\" attribute.",
          "type": "string"
        },
        "username": {
          "description": "ldap username.",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "icon": {
          "description": "icon",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "maintainers": {
          "description": "maintainers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "source": {
          "description": "source",
          "type": "string"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      }
    },
    "Metrics": {
      "type": "object",
      "properties": {
        "error_task_count": {
          "description": "The count of error task",
          "type": "integer"
        },
        "pending_task_count": {
          "description": "The count of pending task",
          "type": "integer"
        },
        "running_task_count": {
          "description": "The count of running task",
          "type": "integer"
        },
        "scheduled_task_count": {
          "description": "The count of scheduled task",
          "type": "integer"
        },
        "stopped_task_count": {
          "description": "The count of stopped task",
          "type": "integer"
        },
        "success_task_count": {
          "description": "The count of success task",
          "type": "integer"
        },
        "task_count": {
          "description": "The count of task",
          "type": "integer"
        }
      }
    },
    "NativeReportSummary": {
      "description": "The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "example": 100
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "example": 300
        },
        "end_time": {
          "description": "The end time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05Z"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "example": "5f62c830-f996-11e9-957f-0242c0a89008"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "example": "Success"
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "example": "High"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T14:04:05Z"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      }
    },
    "NotifyType": {
      "description": "Webhook supportted notify type.",
      "type": "string",
      "example": "http"
    },
    "OIDCCliSecretReq": {
      "type": "object",
      "properties": {
        "secret": {
          "description": "The new secret",
          "type": "string"
        }
      }
    },
    "OIDCUserInfo": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the OIDC user info record.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "the ID of the OIDC info record",
          "type": "integer",
          "format": "int"
        },
        "secret": {
          "description": "the secret of the OIDC user that can be used for CLI to push/pull artifacts",
          "type": "string"
        },
        "subiss": {
          "description": "the concatenation of sub and issuer in the ID token",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the OIDC user info record.",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "description": "the ID of the user",
          "type": "integer",
          "format": "int"
        }
      }
    },
    "OverallHealthStatus": {
      "description": "The system health status",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentHealthStatus"
          }
        },
        "status": {
          "description": "The overall health status. It is \"healthy\" only when all the components' status are \"healthy\"",
          "type": "string"
        }
      }
    },
    "PasswordReq": {
      "type": "object",
      "properties": {
        "new_password": {
          "description": "New password for marking as to be updated.",
          "type": "string"
        },
        "old_password": {
          "description": "The user's existing password.",
          "type": "string"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The permission action",
          "type": "string"
        },
        "resource": {
          "description": "The permission resoruce",
          "type": "string"
        }
      }
    },
    "Platform": {
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string"
        }
      }
    },
    "PreheatPolicy": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The Create Time of preheat policy",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The Description of preheat policy",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the preheat policy enabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "filters": {
          "description": "The Filters of preheat policy",
          "type": "string"
        },
        "id": {
          "description": "The ID of preheat policy",
          "type": "integer"
        },
        "name": {
          "description": "The Name of preheat policy",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of preheat policy project",
          "type": "integer"
        },
        "provider_id": {
          "description": "The ID of preheat policy provider",
          "type": "integer"
        },
        "provider_name": {
          "description": "The Name of preheat policy provider",
          "type": "string"
        },
        "trigger": {
          "description": "The Trigger of preheat policy",
          "type": "string"
        },
        "update_time": {
          "description": "The Update Time of preheat policy",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer",
          "x-omitempty": false
        },
        "creation_time": {
          "description": "The creation time of the project.",
          "type": "string",
          "format": "date-time"
        },
        "current_user_role_id": {
          "description": "The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.",
          "type": "integer"
        },
        "current_user_role_ids": {
          "description": "The list of role ID of the current user who triggered the API (for UI)",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "cve_allowlist": {
          "description": "The CVE allowlist of this project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "deleted": {
          "description": "A deletion mark of the project.",
          "type": "boolean"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "owner_id": {
          "description": "The owner ID of the project always means the creator of the project.",
          "type": "integer",
          "format": "int32"
        },
        "owner_name": {
          "description": "The owner name of the project.",
          "type": "string"
        },
        "project_id": {
          "description": "Project ID",
          "type": "integer",
          "format": "int32"
        },
        "registry_id": {
          "description": "The ID of referenced registry when the project is a proxy cache project.",
          "type": "integer",
          "format": "int64"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer",
          "x-omitempty": false
        },
        "togglable": {
          "description": "Correspond to the UI about whether the project's publicity is  updatable (for UI)",
          "type": "boolean"
        },
        "update_time": {
          "description": "The update time of the project.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProjectDeletable": {
      "type": "object",
      "properties": {
        "deletable": {
          "description": "Whether the project can be deleted.",
          "type": "boolean"
        },
        "message": {
          "description": "The detail message when the project can not be deleted.",
          "type": "string"
        }
      }
    },
    "ProjectMember": {
      "type": "object",
      "properties": {
        "member_group": {
          "$ref": "#/definitions/UserGroup"
        },
        "member_user": {
          "$ref": "#/definitions/UserEntity"
        },
        "role_id": {
          "description": "The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer",
          "type": "integer"
        }
      }
    },
    "ProjectMemberEntity": {
      "type": "object",
      "properties": {
        "entity_id": {
          "description": "the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.",
          "type": "integer"
        },
        "entity_name": {
          "description": "the name of the group member.",
          "type": "string"
        },
        "entity_type": {
          "description": "the entity's type, u for user entity, g for group entity.",
          "type": "string"
        },
        "id": {
          "description": "the project member id",
          "type": "integer"
        },
        "project_id": {
          "description": "the project id",
          "type": "integer"
        },
        "role_id": {
          "description": "the role id",
          "type": "integer"
        },
        "role_name": {
          "description": "the name of the role",
          "type": "string"
        }
      }
    },
    "ProjectMetadata": {
      "type": "object",
      "properties": {
        "auto_scan": {
          "description": "Whether scan images automatically when pushing. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "enable_content_trust": {
          "description": "Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "prevent_vul": {
          "description": "Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-nullable": true
        },
        "public": {
          "description": "The public status of the project. The valid values are \"true\", \"false\".",
          "type": "string"
        },
        "retention_id": {
          "description": "The ID of the tag retention policy for the project",
          "type": "string",
          "x-nullable": true
        },
        "reuse_sys_cve_allowlist": {
          "description": "Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.",
          "type": "string",
          "x-nullable": true
        },
        "severity": {
          "description": "If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ProjectReq": {
      "type": "object",
      "properties": {
        "cve_allowlist": {
          "description": "The CVE allowlist of the project.",
          "$ref": "#/definitions/CVEAllowlist"
        },
        "metadata": {
          "description": "The metadata of the project.",
          "$ref": "#/definitions/ProjectMetadata"
        },
        "project_name": {
          "description": "The name of the project.",
          "type": "string",
          "maxLength": 255
        },
        "public": {
          "description": "deprecated, reserved for project creation in replication",
          "type": "boolean",
          "x-nullable": true
        },
        "registry_id": {
          "description": "The ID of referenced registry when creating the proxy cache project",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "storage_limit": {
          "description": "The storage quota of the project.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        }
      }
    },
    "ProjectScanner": {
      "type": "object",
      "required": [
        "uuid"
      ],
      "properties": {
        "uuid": {
          "description": "The identifier of the scanner registration",
          "type": "string"
        }
      }
    },
    "ProjectSummary": {
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer",
          "x-omitempty": false
        },
        "developer_count": {
          "description": "The total number of developer members.",
          "type": "integer"
        },
        "guest_count": {
          "description": "The total number of guest members.",
          "type": "integer"
        },
        "limited_guest_count": {
          "description": "The total number of limited guest members.",
          "type": "integer"
        },
        "maintainer_count": {
          "description": "The total number of maintainer members.",
          "type": "integer"
        },
        "project_admin_count": {
          "description": "The total number of project admin members.",
          "type": "integer"
        },
        "quota": {
          "$ref": "#/definitions/ProjectSummaryQuota"
        },
        "registry": {
          "$ref": "#/definitions/Registry"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "ProjectSummaryQuota": {
      "type": "object",
      "properties": {
        "hard": {
          "description": "The hard limits of the quota",
          "$ref": "#/definitions/ResourceList"
        },
        "used": {
          "description": "The used status of the quota",
          "$ref": "#/definitions/ResourceList"
        }
      }
    },
    "ProviderUnderProject": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "provider": {
          "type": "string"
        }
      }
    },
    "Quota": {
      "description": "The quota object",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the quota",
          "type": "string",
          "format": "date-time"
        },
        "hard": {
          "description": "The hard limits of the quota",
          "x-omitempty": false,
          "$ref": "#/definitions/ResourceList"
        },
        "id": {
          "description": "ID of the quota",
          "type": "integer"
        },
        "ref": {
          "description": "The reference object of the quota",
          "$ref": "#/definitions/QuotaRefObject"
        },
        "update_time": {
          "description": "the update time of the quota",
          "type": "string",
          "format": "date-time"
        },
        "used": {
          "description": "The used status of the quota",
          "x-omitempty": false,
          "$ref": "#/definitions/ResourceList"
        }
      }
    },
    "QuotaRefObject": {
      "type": "object",
      "additionalProperties": false
    },
    "QuotaUpdateReq": {
      "type": "object",
      "properties": {
        "hard": {
          "description": "The new hard limits for the quota",
          "$ref": "#/definitions/ResourceList"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Registry": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.",
          "type": "string",
          "format": "date-time"
        },
        "credential": {
          "$ref": "#/definitions/RegistryCredential"
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string"
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean"
        },
        "name": {
          "description": "The registry name.",
          "type": "string"
        },
        "status": {
          "description": "Health status of the registry.",
          "type": "string"
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the policy.",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "The registry URL string.",
          "type": "string"
        }
      }
    },
    "RegistryCredential": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key, e.g. user name when credential type is 'basic'.",
          "type": "string"
        },
        "access_secret": {
          "description": "Access secret, e.g. password when credential type is 'basic'.",
          "type": "string"
        },
        "type": {
          "description": "Credential type, such as 'basic', 'oauth'.",
          "type": "string"
        }
      }
    },
    "RegistryEndpoint": {
      "description": "The style of the resource filter",
      "type": "object",
      "properties": {
        "key": {
          "description": "The endpoint key",
          "type": "string"
        },
        "value": {
          "description": "The endpoint value",
          "type": "string"
        }
      }
    },
    "RegistryInfo": {
      "description": "The registry info contains the base info and capability declarations of the registry",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description",
          "type": "string"
        },
        "supported_resource_filters": {
          "description": "The filters that the registry supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterStyle"
          }
        },
        "supported_triggers": {
          "description": "The triggers that the registry supports",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "The registry type",
          "type": "string"
        }
      }
    },
    "RegistryPing": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "The registry access key.",
          "type": "string",
          "x-nullable": true
        },
        "access_secret": {
          "description": "The registry access secret.",
          "type": "string",
          "x-nullable": true
        },
        "credential_type": {
          "description": "Credential type of the registry, e.g. 'basic'.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-nullable": true
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "description": "The registry URL.",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "RegistryProviderCredentialPattern": {
      "description": "The registry credential pattern",
      "type": "object",
      "properties": {
        "access_key_data": {
          "description": "The access key data",
          "type": "string"
        },
        "access_key_type": {
          "description": "The access key type",
          "type": "string"
        },
        "access_secret_data": {
          "description": "The access secret data",
          "type": "string"
        },
        "access_secret_type": {
          "description": "The access secret type",
          "type": "string"
        }
      }
    },
    "RegistryProviderEndpointPattern": {
      "description": "The registry endpoint pattern",
      "type": "object",
      "properties": {
        "endpoint_type": {
          "description": "The endpoint type",
          "type": "string"
        },
        "endpoints": {
          "description": "The endpoint list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryEndpoint"
          }
        }
      }
    },
    "RegistryProviderInfo": {
      "description": "The registry provider info contains the base info and capability declarations of the registry provider",
      "type": "object",
      "properties": {
        "credential_pattern": {
          "description": "The credential pattern",
          "$ref": "#/definitions/RegistryProviderCredentialPattern"
        },
        "endpoint_pattern": {
          "description": "The endpoint pattern",
          "$ref": "#/definitions/RegistryProviderEndpointPattern"
        }
      }
    },
    "RegistryUpdate": {
      "type": "object",
      "properties": {
        "access_key": {
          "description": "The registry access key.",
          "type": "string",
          "x-nullable": true
        },
        "access_secret": {
          "description": "The registry access secret.",
          "type": "string",
          "x-nullable": true
        },
        "credential_type": {
          "description": "Credential type of the registry, e.g. 'basic'.",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string",
          "x-nullable": true
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-nullable": true
        },
        "name": {
          "description": "The registry name.",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "description": "The registry URL.",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ReplicationExecution": {
      "description": "The replication execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time",
          "type": "string",
          "format": "date-time"
        },
        "failed": {
          "description": "The count of failed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "id": {
          "description": "The ID of the execution",
          "type": "integer"
        },
        "in_progress": {
          "description": "The count of in_progress executions",
          "type": "integer",
          "x-omitempty": false
        },
        "policy_id": {
          "description": "The ID if the policy that the execution belongs to",
          "type": "integer"
        },
        "start_time": {
          "description": "The start time",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the execution",
          "type": "string"
        },
        "status_text": {
          "description": "The status text",
          "type": "string",
          "x-omitempty": false
        },
        "stopped": {
          "description": "The count of stopped executions",
          "type": "integer",
          "x-omitempty": false
        },
        "succeed": {
          "description": "The count of succeed executions",
          "type": "integer",
          "x-omitempty": false
        },
        "total": {
          "description": "The total count of all executions",
          "type": "integer",
          "x-omitempty": false
        },
        "trigger": {
          "description": "The trigger mode",
          "type": "string"
        }
      }
    },
    "ReplicationFilter": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The replication policy filter type.",
          "type": "string"
        },
        "value": {
          "description": "The value of replication policy filter.",
          "type": "object"
        }
      }
    },
    "ReplicationPolicy": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.",
          "type": "string",
          "format": "date-time"
        },
        "deletion": {
          "description": "Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.",
          "type": "boolean"
        },
        "description": {
          "description": "The description of the policy.",
          "type": "string"
        },
        "dest_namespace": {
          "description": "The destination namespace.",
          "type": "string"
        },
        "dest_namespace_replace_count": {
          "description": "Specify how many path components will be replaced by the provided destination namespace.\nThe default value is -1 in which case the legacy mode will be applied.",
          "type": "integer",
          "format": "int8",
          "x-isnullable": true
        },
        "dest_registry": {
          "description": "The destination registry.",
          "$ref": "#/definitions/Registry"
        },
        "enabled": {
          "description": "Whether the policy is enabled or not.",
          "type": "boolean"
        },
        "filters": {
          "description": "The replication policy filter array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicationFilter"
          }
        },
        "id": {
          "description": "The policy ID.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The policy name.",
          "type": "string"
        },
        "override": {
          "description": "Whether to override the resources on the destination registry.",
          "type": "boolean"
        },
        "replicate_deletion": {
          "description": "Whether to replicate the deletion operation.",
          "type": "boolean"
        },
        "src_registry": {
          "description": "The source registry.",
          "$ref": "#/definitions/Registry"
        },
        "trigger": {
          "$ref": "#/definitions/ReplicationTrigger"
        },
        "update_time": {
          "description": "The update time of the policy.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ReplicationTask": {
      "description": "The replication task",
      "type": "object",
      "properties": {
        "dst_resource": {
          "description": "The destination resource that the task operates",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the task",
          "type": "string",
          "format": "date-time"
        },
        "execution_id": {
          "description": "The ID of the execution that the task belongs to",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the task",
          "type": "integer"
        },
        "job_id": {
          "description": "The ID of the underlying job that the task related to",
          "type": "string"
        },
        "operation": {
          "description": "The operation of the task",
          "type": "string"
        },
        "resource_type": {
          "description": "The type of the resource that the task operates",
          "type": "string"
        },
        "src_resource": {
          "description": "The source resource that the task operates",
          "type": "string"
        },
        "start_time": {
          "description": "The start time of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the task",
          "type": "string"
        }
      }
    },
    "ReplicationTrigger": {
      "type": "object",
      "properties": {
        "trigger_settings": {
          "$ref": "#/definitions/ReplicationTriggerSettings"
        },
        "type": {
          "description": "The replication policy trigger type. The valid values are manual, event_based and scheduled.",
          "type": "string"
        }
      }
    },
    "ReplicationTriggerSettings": {
      "type": "object",
      "properties": {
        "cron": {
          "description": "The cron string for scheduled trigger",
          "type": "string"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "creation_time": {
          "description": "The creation time of the repository",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "update_time": {
          "description": "The update time of the repository",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      },
      "x-go-type": {
        "import": {
          "package": "github.com/goharbor/harbor/src/pkg/quota/types"
        },
        "type": "ResourceList"
      }
    },
    "RetentionExecution": {
      "type": "object",
      "properties": {
        "dry_run": {
          "type": "boolean"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "policy_id": {
          "type": "integer",
          "format": "int64"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        }
      }
    },
    "RetentionExecutionTask": {
      "type": "object",
      "properties": {
        "end_time": {
          "type": "string"
        },
        "execution_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "job_id": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "retained": {
          "type": "integer",
          "x-omitempty": false
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_code": {
          "type": "integer",
          "x-omitempty": false
        },
        "status_revision": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "RetentionMetadata": {
      "description": "the tag retention metadata",
      "type": "object",
      "properties": {
        "scope_selectors": {
          "description": "supported scope selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "tag_selectors": {
          "description": "supported tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          }
        },
        "templates": {
          "description": "templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleMetadata"
          }
        }
      }
    },
    "RetentionPolicy": {
      "description": "retention policy",
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRule"
          }
        },
        "scope": {
          "type": "object",
          "$ref": "#/definitions/RetentionPolicyScope"
        },
        "trigger": {
          "type": "object",
          "$ref": "#/definitions/RetentionRuleTrigger"
        }
      }
    },
    "RetentionPolicyScope": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "ref": {
          "type": "integer"
        }
      }
    },
    "RetentionRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer"
        },
        "scope_selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RetentionSelector"
            }
          }
        },
        "tag_selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelector"
          }
        },
        "template": {
          "type": "string"
        }
      }
    },
    "RetentionRuleMetadata": {
      "description": "the tag retention rule metadata",
      "type": "object",
      "properties": {
        "action": {
          "description": "rule action",
          "type": "string"
        },
        "display_text": {
          "description": "rule display text",
          "type": "string"
        },
        "params": {
          "description": "rule params",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleParamMetadata"
          }
        },
        "rule_template": {
          "description": "rule id",
          "type": "string"
        }
      }
    },
    "RetentionRuleParamMetadata": {
      "description": "rule param",
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "RetentionRuleTrigger": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "references": {
          "type": "object"
        },
        "settings": {
          "type": "object"
        }
      }
    },
    "RetentionSelector": {
      "type": "object",
      "properties": {
        "decoration": {
          "type": "string"
        },
        "extras": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      }
    },
    "RetentionSelectorMetadata": {
      "description": "retention selector",
      "type": "object",
      "properties": {
        "decorations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "display_text": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "Robot": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "editable": {
          "description": "The editable status of the robot",
          "type": "boolean",
          "x-omitempty": false
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the robot.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RobotCreate": {
      "description": "The request for robot account creation.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the robot",
          "type": "string"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean"
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          }
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotCreateV1": {
      "type": "object",
      "properties": {
        "access": {
          "description": "The permission of robot account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "description": {
          "description": "The description of robot account",
          "type": "string"
        },
        "expires_at": {
          "description": "The expiration time on or after which the JWT MUST NOT be accepted for processing.",
          "type": "integer"
        },
        "name": {
          "description": "The name of robot account",
          "type": "string"
        }
      }
    },
    "RobotCreated": {
      "description": "The response for robot account creation.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RobotPermission": {
      "type": "object",
      "properties": {
        "access": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          }
        },
        "kind": {
          "description": "The kind of the permission",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the permission",
          "type": "string"
        }
      }
    },
    "RobotSec": {
      "description": "The response for refresh/update robot account secret.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "The secret of the robot",
          "type": "string"
        }
      }
    },
    "RoleRequest": {
      "type": "object",
      "properties": {
        "role_id": {
          "description": "The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer",
          "type": "integer"
        }
      }
    },
    "ScanOverview": {
      "description": "The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      }
    },
    "Scanner": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the scanner",
          "type": "string",
          "example": "Trivy"
        },
        "vendor": {
          "description": "Name of the scanner provider",
          "type": "string",
          "example": "Aqua Security"
        },
        "version": {
          "description": "Version of the scanner adapter",
          "type": "string",
          "example": "v0.9.1"
        }
      }
    },
    "ScannerAdapterMetadata": {
      "description": "The metadata info of the scanner adapter",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScannerCapability"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "harbor.scanner-adapter/registry-authorization-type": "Bearer"
          }
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        }
      }
    },
    "ScannerCapability": {
      "type": "object",
      "properties": {
        "consumes_mime_types": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "application/vnd.docker.distribution.manifest.v2+json"
          }
        },
        "produces_mime_types": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
          }
        }
      }
    },
    "ScannerRegistration": {
      "description": "Registration represents a named configuration for invoking a scanner via its adapter.\n",
      "type": "object",
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\n",
          "type": "string",
          "x-omitempty": false,
          "example": "Bearer: JWTTOKENGOESHERE"
        },
        "adapter": {
          "description": "Optional property to describe the name of the scanner registration",
          "type": "string",
          "example": "Trivy"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\n",
          "type": "string",
          "default": "",
          "x-omitempty": false,
          "example": "Bearer"
        },
        "create_time": {
          "description": "The creation time of this registration",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "An optional description of this registration.",
          "type": "string",
          "x-omitempty": false,
          "example": "A free-to-use tool that scans container images for package vulnerabilities.\n"
        },
        "disabled": {
          "description": "Indicate whether the registration is enabled or not",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "health": {
          "description": "Indicate the healthy of the registration",
          "type": "string",
          "default": "",
          "example": "healthy"
        },
        "is_default": {
          "description": "Indicate if the registration is set as the system default one",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "name": {
          "description": "The name of this registration.",
          "type": "string",
          "example": "Trivy"
        },
        "skip_certVerify": {
          "description": "Indicate if skip the certificate verification when sending HTTP requests",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "update_time": {
          "description": "The update time of this registration",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "A base URL of the scanner adapter",
          "type": "string",
          "format": "url",
          "example": "http://harbor-scanner-trivy:8080"
        },
        "use_internal_addr": {
          "description": "Indicate whether use internal registry addr for the scanner to pull content or not",
          "type": "boolean",
          "default": false,
          "x-omitempty": false
        },
        "uuid": {
          "description": "The unique identifier of this registration.",
          "type": "string"
        },
        "vendor": {
          "description": "Optional property to describe the vendor of the scanner registration",
          "type": "string",
          "example": "CentOS"
        },
        "version": {
          "description": "Optional property to describe the version of the scanner registration",
          "type": "string",
          "example": "1.0.1"
        }
      }
    },
    "ScannerRegistrationReq": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\n",
          "type": "string",
          "example": "Bearer: JWTTOKENGOESHERE"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\n",
          "type": "string",
          "example": "Bearer"
        },
        "description": {
          "description": "An optional description of this registration.",
          "type": "string",
          "example": "A free-to-use tool that scans container images for package vulnerabilities.\n"
        },
        "disabled": {
          "description": "Indicate whether the registration is enabled or not",
          "type": "boolean",
          "default": false
        },
        "name": {
          "description": "The name of this registration",
          "type": "string",
          "example": "Trivy"
        },
        "skip_certVerify": {
          "description": "Indicate if skip the certificate verification when sending HTTP requests",
          "type": "boolean",
          "default": false
        },
        "url": {
          "description": "A base URL of the scanner adapter.",
          "type": "string",
          "format": "uri",
          "example": "http://harbor-scanner-trivy:8080"
        },
        "use_internal_addr": {
          "description": "Indicate whether use internal registry addr for the scanner to pull content or not",
          "type": "boolean",
          "default": false
        }
      }
    },
    "ScannerRegistrationSettings": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\n",
          "type": "string",
          "example": "Bearer: JWTTOKENGOESHERE"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\n",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "The name of this registration",
          "type": "string",
          "example": "Trivy"
        },
        "url": {
          "description": "A base URL of the scanner adapter.",
          "type": "string",
          "format": "uri",
          "example": "http://harbor-scanner-trivy:8080"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "description": "The id of the schedule.",
          "type": "integer",
          "readOnly": true
        },
        "parameters": {
          "description": "The parameters of schedule job",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "status": {
          "description": "The status of the schedule.",
          "type": "string",
          "readOnly": true
        },
        "update_time": {
          "description": "the update time of the schedule.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "ScheduleObj": {
      "type": "object",
      "properties": {
        "cron": {
          "description": "A cron expression, a time-based job scheduler.",
          "type": "string"
        },
        "type": {
          "description": "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.\n'Manual' means to trigger it right away and 'None' means to cancel the schedule.\n",
          "type": "string",
          "enum": [
            "Hourly",
            "Daily",
            "Weekly",
            "Custom",
            "Manual",
            "None"
          ]
        }
      }
    },
    "Search": {
      "type": "object",
      "properties": {
        "chart": {
          "description": "Search results of the charts that macthed the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          },
          "x-isnullable": true,
          "x-omitempty": true
        },
        "project": {
          "description": "Search results of the projects that matched the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "repository": {
          "description": "Search results of the repositories that matched the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchRepository"
          }
        }
      }
    },
    "SearchRepository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of artifacts in the repository",
          "type": "integer"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer"
        },
        "project_name": {
          "description": "The name of the project that the repository belongs to",
          "type": "string"
        },
        "project_public": {
          "description": "The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)",
          "type": "boolean"
        },
        "pull_count": {
          "description": "The count how many times the repository is pulled",
          "type": "integer"
        },
        "repository_name": {
          "description": "The name of the repository",
          "type": "string"
        }
      }
    },
    "SearchResult": {
      "description": "The chart search result item",
      "type": "object",
      "properties": {
        "Chart": {
          "$ref": "#/definitions/ChartVersion"
        },
        "Name": {
          "description": "The chart name with repo name",
          "type": "string"
        },
        "Score": {
          "description": "The matched level",
          "type": "integer"
        }
      }
    },
    "StartReplicationExecution": {
      "type": "object",
      "properties": {
        "policy_id": {
          "description": "The ID of policy that the execution belongs to.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Statistic": {
      "type": "object",
      "properties": {
        "private_project_count": {
          "description": "The count of the private projects",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "private_repo_count": {
          "description": "The count of the private repositories",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "public_project_count": {
          "description": "The count of the public projects",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "public_repo_count": {
          "description": "The count of the public repositories",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "total_project_count": {
          "description": "The count of the total projects, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "total_repo_count": {
          "description": "The count of the total repositories, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "total_storage_consumption": {
          "description": "The total storage consumption of blobs, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        }
      }
    },
    "Stats": {
      "description": "Stats provides the overall progress of the scan all process.",
      "type": "object",
      "properties": {
        "completed": {
          "description": "The number of the finished scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 90
        },
        "metrics": {
          "description": "The metrics data for the each status",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "example": {
            "Error": 2,
            "Running": 3,
            "Success": 5
          }
        },
        "ongoing": {
          "description": "A flag indicating job status of scan all.",
          "type": "boolean",
          "x-omitempty": false
        },
        "total": {
          "description": "The total number of scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "trigger": {
          "description": "The trigger of the scan all job.",
          "type": "string",
          "enum": [
            "Manual",
            "Schedule",
            "Event"
          ]
        }
      }
    },
    "Storage": {
      "type": "object",
      "properties": {
        "free": {
          "description": "Free volume size.",
          "type": "integer",
          "format": "uint64"
        },
        "total": {
          "description": "Total volume size.",
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "StringConfigItem": {
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean"
        },
        "value": {
          "description": "The string value of current config item",
          "type": "string"
        }
      }
    },
    "SupportedWebhookEventTypes": {
      "description": "Supportted webhook event types and notify types.",
      "type": "object",
      "properties": {
        "event_type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        },
        "notify_type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotifyType"
          }
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "storage": {
          "description": "The storage of system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "pull_time": {
          "description": "The latest pull time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of task",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of task",
          "type": "string"
        },
        "execution_id": {
          "description": "The ID of task execution",
          "type": "integer"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of task",
          "type": "integer"
        },
        "run_count": {
          "description": "The count of task run",
          "type": "integer",
          "format": "int32"
        },
        "start_time": {
          "description": "The start time of task",
          "type": "string"
        },
        "status": {
          "description": "The status of task",
          "type": "string"
        },
        "status_message": {
          "description": "The status message of task",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of task",
          "type": "string"
        }
      }
    },
    "UserCreationReq": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "maxLength": 255
        },
        "password": {
          "type": "string"
        },
        "realname": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "UserEntity": {
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer"
        },
        "username": {
          "description": "The name of the user.",
          "type": "string"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "group_name": {
          "description": "The name of the user group",
          "type": "string"
        },
        "group_type": {
          "description": "The group type, 1 for LDAP group, 2 for HTTP group.",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the user group",
          "type": "integer"
        },
        "ldap_group_dn": {
          "description": "The DN of the LDAP group if group type is 1 (LDAP group).",
          "type": "string"
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "realname": {
          "type": "string"
        }
      }
    },
    "UserResp": {
      "type": "object",
      "properties": {
        "admin_role_in_auth": {
          "description": "indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user",
          "type": "boolean",
          "x-omitempty": false
        },
        "comment": {
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time of the user.",
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "oidc_user_meta": {
          "$ref": "#/definitions/OIDCUserInfo"
        },
        "realname": {
          "type": "string"
        },
        "sysadmin_flag": {
          "type": "boolean",
          "x-omitempty": false
        },
        "update_time": {
          "description": "The update time of the user.",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "integer",
          "format": "int"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "UserSearch": {
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "UserSearchRespItem": {
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "UserSysAdminFlag": {
      "type": "object",
      "properties": {
        "sysadmin_flag": {
          "description": "true-admin, false-not admin.",
          "type": "boolean"
        }
      }
    },
    "VulnerabilitySummary": {
      "description": "VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.\n",
      "type": "object",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 100
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "x-omitempty": false,
          "example": {
            "Critical": 5,
            "High": 5
          }
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int",
          "x-omitempty": false,
          "example": 500
        }
      }
    },
    "WebhookJob": {
      "description": "The webhook job.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The webhook job creation time.",
          "type": "string",
          "format": "date-time"
        },
        "event_type": {
          "description": "The webhook job event type.",
          "type": "string"
        },
        "id": {
          "description": "The webhook job ID.",
          "type": "integer",
          "format": "int64"
        },
        "job_detail": {
          "description": "The webhook job notify detailed data.",
          "type": "string"
        },
        "notify_type": {
          "description": "The webhook job notify type.",
          "type": "string"
        },
        "policy_id": {
          "description": "The webhook policy ID.",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The webhook job status.",
          "type": "string"
        },
        "update_time": {
          "description": "The webhook job update time.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "WebhookLastTrigger": {
      "description": "The webhook policy and last trigger time group by event type.",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of webhook policy.",
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "description": "Whether or not the webhook policy enabled.",
          "type": "boolean"
        },
        "event_type": {
          "description": "The webhook event type.",
          "type": "string"
        },
        "last_trigger_time": {
          "description": "The last trigger time of webhook policy.",
          "type": "string",
          "format": "date-time"
        },
        "policy_name": {
          "description": "The webhook policy name.",
          "type": "string"
        }
      }
    },
    "WebhookPolicy": {
      "description": "The webhook policy object",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the webhook policy.",
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "description": "The creator of the webhook policy.",
          "type": "string"
        },
        "description": {
          "description": "The description of webhook policy.",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the webhook policy is enabled or not.",
          "type": "boolean",
          "x-omitempty": false
        },
        "event_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "The webhook policy ID.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of webhook policy.",
          "type": "string"
        },
        "project_id": {
          "description": "The project ID of webhook policy.",
          "type": "integer"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTargetObject"
          }
        },
        "update_time": {
          "description": "The update time of the webhook policy.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "WebhookTargetObject": {
      "description": "The webhook policy target object.",
      "type": "object",
      "properties": {
        "address": {
          "description": "The webhook target address.",
          "type": "string"
        },
        "auth_header": {
          "description": "The webhook auth header.",
          "type": "string"
        },
        "skip_cert_verify": {
          "description": "Whether or not to skip cert verify.",
          "type": "boolean"
        },
        "type": {
          "description": "The webhook target notify type.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "acceptVulnerabilities": {
      "type": "string",
      "default": "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0",
      "description": "A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.\nCurrently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'",
      "name": "X-Accept-Vulnerabilities",
      "in": "header"
    },
    "digest": {
      "type": "string",
      "description": "The digest of the resource",
      "name": "digest",
      "in": "path",
      "required": true
    },
    "executionId": {
      "type": "integer",
      "description": "Execution ID",
      "name": "execution_id",
      "in": "path",
      "required": true
    },
    "gcId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the gc log",
      "name": "gc_id",
      "in": "path",
      "required": true
    },
    "immutableRuleId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the immutable rule",
      "name": "immutable_rule_id",
      "in": "path",
      "required": true
    },
    "instanceName": {
      "type": "string",
      "description": "Instance Name",
      "name": "preheat_instance_name",
      "in": "path",
      "required": true
    },
    "isResourceName": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.",
      "name": "X-Is-Resource-Name",
      "in": "header"
    },
    "labelId": {
      "type": "integer",
      "format": "int64",
      "description": "Label ID",
      "name": "label_id",
      "in": "path",
      "required": true
    },
    "page": {
      "type": "integer",
      "format": "int64",
      "default": 1,
      "description": "The page number",
      "name": "page",
      "in": "query"
    },
    "pageSize": {
      "maximum": 100,
      "type": "integer",
      "format": "int64",
      "default": 10,
      "description": "The size of per page",
      "name": "page_size",
      "in": "query"
    },
    "preheatPolicyName": {
      "type": "string",
      "description": "Preheat Policy Name",
      "name": "preheat_policy_name",
      "in": "path",
      "required": true
    },
    "projectName": {
      "type": "string",
      "description": "The name of the project",
      "name": "project_name",
      "in": "path",
      "required": true
    },
    "projectNameOrId": {
      "type": "string",
      "description": "The name or id of the project",
      "name": "project_name_or_id",
      "in": "path",
      "required": true
    },
    "query": {
      "type": "string",
      "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
      "name": "q",
      "in": "query"
    },
    "reference": {
      "type": "string",
      "description": "The reference of the artifact, can be digest or tag",
      "name": "reference",
      "in": "path",
      "required": true
    },
    "repositoryName": {
      "type": "string",
      "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
      "name": "repository_name",
      "in": "path",
      "required": true
    },
    "requestId": {
      "minLength": 1,
      "type": "string",
      "description": "An unique ID for the request",
      "name": "X-Request-Id",
      "in": "header"
    },
    "resourceNameInLocation": {
      "type": "boolean",
      "default": false,
      "description": "The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.",
      "name": "X-Resource-Name-In-Location",
      "in": "header"
    },
    "robotId": {
      "type": "integer",
      "description": "Robot ID",
      "name": "robot_id",
      "in": "path",
      "required": true
    },
    "sort": {
      "type": "string",
      "description": "Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\"",
      "name": "sort",
      "in": "query"
    },
    "tagName": {
      "type": "string",
      "description": "The name of the tag",
      "name": "tag_name",
      "in": "path",
      "required": true
    },
    "taskId": {
      "type": "integer",
      "description": "Task ID",
      "name": "task_id",
      "in": "path",
      "required": true
    },
    "webhookPolicyId": {
      "type": "integer",
      "format": "int64",
      "description": "The ID of the webhook policy",
      "name": "webhook_policy_id",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "Success",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "201": {
      "description": "Created",
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location of the resource"
        },
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "202": {
      "description": "Accepted",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "405": {
      "description": "Method not allowed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "412": {
      "description": "Precondition failed",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "415": {
      "description": "Unsupported MediaType",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    },
    {}
  ]
}`))
}
