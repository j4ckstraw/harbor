// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"

	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/artifact"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/auditlog"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/configure"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/gc"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/health"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/icon"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/immutable"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/label"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/ldap"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/member"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/oidc"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/ping"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/preheat"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/project"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/project_metadata"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/quota"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/registry"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/replication"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/repository"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/retention"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/robot"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/robotv1"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/scan"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/scan_all"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/scanner"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/search"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/statistic"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/system_cve_allowlist"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/systeminfo"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/user"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/usergroup"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/webhook"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/webhookjob"
)

type contextKey string

const AuthKey contextKey = "Auth"

// go:generate mockery -name ArtifactAPI -inpkg

/* ArtifactAPI  */
type ArtifactAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CopyArtifact Copy artifact */
	CopyArtifact(ctx context.Context, params artifact.CopyArtifactParams) middleware.Responder

	/* AddLabel Add label to artifact */
	AddLabel(ctx context.Context, params artifact.AddLabelParams) middleware.Responder

	/* CreateTag Create tag */
	CreateTag(ctx context.Context, params artifact.CreateTagParams) middleware.Responder

	/* DeleteArtifact Delete the specific artifact */
	DeleteArtifact(ctx context.Context, params artifact.DeleteArtifactParams) middleware.Responder

	/* DeleteTag Delete tag */
	DeleteTag(ctx context.Context, params artifact.DeleteTagParams) middleware.Responder

	/* GetAddition Get the addition of the specific artifact */
	GetAddition(ctx context.Context, params artifact.GetAdditionParams) middleware.Responder

	/* GetArtifact Get the specific artifact */
	GetArtifact(ctx context.Context, params artifact.GetArtifactParams) middleware.Responder

	/* GetVulnerabilitiesAddition Get the vulnerabilities addition of the specific artifact */
	GetVulnerabilitiesAddition(ctx context.Context, params artifact.GetVulnerabilitiesAdditionParams) middleware.Responder

	/* ListArtifacts List artifacts */
	ListArtifacts(ctx context.Context, params artifact.ListArtifactsParams) middleware.Responder

	/* ListTags List tags */
	ListTags(ctx context.Context, params artifact.ListTagsParams) middleware.Responder

	/* RemoveLabel Remove label from artifact */
	RemoveLabel(ctx context.Context, params artifact.RemoveLabelParams) middleware.Responder
}

// go:generate mockery -name AuditlogAPI -inpkg

/* AuditlogAPI  */
type AuditlogAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* ListAuditLogs Get recent logs of the projects which the user is a member of */
	ListAuditLogs(ctx context.Context, params auditlog.ListAuditLogsParams) middleware.Responder
}

// go:generate mockery -name ConfigureAPI -inpkg

/* ConfigureAPI  */
type ConfigureAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetConfigurations Get system configurations. */
	GetConfigurations(ctx context.Context, params configure.GetConfigurationsParams) middleware.Responder

	/* GetInternalconfig Get internal configurations. */
	GetInternalconfig(ctx context.Context, params configure.GetInternalconfigParams) middleware.Responder

	/* UpdateConfigurations Modify system configurations. */
	UpdateConfigurations(ctx context.Context, params configure.UpdateConfigurationsParams) middleware.Responder
}

// go:generate mockery -name GCAPI -inpkg

/* GCAPI  */
type GCAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateGCSchedule Create a gc schedule. */
	CreateGCSchedule(ctx context.Context, params gc.CreateGCScheduleParams) middleware.Responder

	/* GetGC Get gc status. */
	GetGC(ctx context.Context, params gc.GetGCParams) middleware.Responder

	/* GetGCHistory Get gc results. */
	GetGCHistory(ctx context.Context, params gc.GetGCHistoryParams) middleware.Responder

	/* GetGCLog Get gc job log. */
	GetGCLog(ctx context.Context, params gc.GetGCLogParams) middleware.Responder

	/* GetGCSchedule Get gc's schedule. */
	GetGCSchedule(ctx context.Context, params gc.GetGCScheduleParams) middleware.Responder

	/* UpdateGCSchedule Update gc's schedule. */
	UpdateGCSchedule(ctx context.Context, params gc.UpdateGCScheduleParams) middleware.Responder
}

// go:generate mockery -name HealthAPI -inpkg

/* HealthAPI  */
type HealthAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetHealth Check the status of Harbor components */
	GetHealth(ctx context.Context, params health.GetHealthParams) middleware.Responder
}

// go:generate mockery -name IconAPI -inpkg

/* IconAPI  */
type IconAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetIcon Get artifact icon */
	GetIcon(ctx context.Context, params icon.GetIconParams) middleware.Responder
}

// go:generate mockery -name ImmutableAPI -inpkg

/* ImmutableAPI  */
type ImmutableAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateImmuRule Add an immutable tag rule to current project */
	CreateImmuRule(ctx context.Context, params immutable.CreateImmuRuleParams) middleware.Responder

	/* DeleteImmuRule Delete the immutable tag rule. */
	DeleteImmuRule(ctx context.Context, params immutable.DeleteImmuRuleParams) middleware.Responder

	/* ListImmuRules List all immutable tag rules of current project */
	ListImmuRules(ctx context.Context, params immutable.ListImmuRulesParams) middleware.Responder

	/* UpdateImmuRule Update the immutable tag rule or enable or disable the rule */
	UpdateImmuRule(ctx context.Context, params immutable.UpdateImmuRuleParams) middleware.Responder
}

// go:generate mockery -name LabelAPI -inpkg

/* LabelAPI  */
type LabelAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateLabel Post creates a label */
	CreateLabel(ctx context.Context, params label.CreateLabelParams) middleware.Responder

	/* DeleteLabel Delete the label specified by ID. */
	DeleteLabel(ctx context.Context, params label.DeleteLabelParams) middleware.Responder

	/* GetLabelByID Get the label specified by ID. */
	GetLabelByID(ctx context.Context, params label.GetLabelByIDParams) middleware.Responder

	/* ListLabels List labels according to the query strings. */
	ListLabels(ctx context.Context, params label.ListLabelsParams) middleware.Responder

	/* UpdateLabel Update the label properties. */
	UpdateLabel(ctx context.Context, params label.UpdateLabelParams) middleware.Responder
}

// go:generate mockery -name LdapAPI -inpkg

/* LdapAPI  */
type LdapAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* ImportLdapUser Import selected available ldap users. */
	ImportLdapUser(ctx context.Context, params ldap.ImportLdapUserParams) middleware.Responder

	/* PingLdap Ping available ldap service. */
	PingLdap(ctx context.Context, params ldap.PingLdapParams) middleware.Responder

	/* SearchLdapGroup Search available ldap groups. */
	SearchLdapGroup(ctx context.Context, params ldap.SearchLdapGroupParams) middleware.Responder

	/* SearchLdapUser Search available ldap users. */
	SearchLdapUser(ctx context.Context, params ldap.SearchLdapUserParams) middleware.Responder
}

// go:generate mockery -name MemberAPI -inpkg

/* MemberAPI  */
type MemberAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateProjectMember Create project member */
	CreateProjectMember(ctx context.Context, params member.CreateProjectMemberParams) middleware.Responder

	/* DeleteProjectMember Delete project member */
	DeleteProjectMember(ctx context.Context, params member.DeleteProjectMemberParams) middleware.Responder

	/* GetProjectMember Get the project member information */
	GetProjectMember(ctx context.Context, params member.GetProjectMemberParams) middleware.Responder

	/* ListProjectMembers Get all project member information */
	ListProjectMembers(ctx context.Context, params member.ListProjectMembersParams) middleware.Responder

	/* UpdateProjectMember Update project member */
	UpdateProjectMember(ctx context.Context, params member.UpdateProjectMemberParams) middleware.Responder
}

// go:generate mockery -name OIDCAPI -inpkg

/* OIDCAPI  */
type OIDCAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* PingOIDC Test the OIDC endpoint. */
	PingOIDC(ctx context.Context, params oidc.PingOIDCParams) middleware.Responder
}

// go:generate mockery -name PingAPI -inpkg

/* PingAPI  */
type PingAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetPing Ping Harbor to check if it's alive. */
	GetPing(ctx context.Context, params ping.GetPingParams) middleware.Responder
}

// go:generate mockery -name PreheatAPI -inpkg

/* PreheatAPI  */
type PreheatAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateInstance Create p2p provider instances */
	CreateInstance(ctx context.Context, params preheat.CreateInstanceParams) middleware.Responder

	/* CreatePolicy Create a preheat policy under a project */
	CreatePolicy(ctx context.Context, params preheat.CreatePolicyParams) middleware.Responder

	/* DeleteInstance Delete the specified P2P provider instance */
	DeleteInstance(ctx context.Context, params preheat.DeleteInstanceParams) middleware.Responder

	/* DeletePolicy Delete a preheat policy */
	DeletePolicy(ctx context.Context, params preheat.DeletePolicyParams) middleware.Responder

	/* GetExecution Get a execution detail by id */
	GetExecution(ctx context.Context, params preheat.GetExecutionParams) middleware.Responder

	/* GetInstance Get a P2P provider instance */
	GetInstance(ctx context.Context, params preheat.GetInstanceParams) middleware.Responder

	/* GetPolicy Get a preheat policy */
	GetPolicy(ctx context.Context, params preheat.GetPolicyParams) middleware.Responder

	/* GetPreheatLog Get the log text stream of the specified task for the given execution */
	GetPreheatLog(ctx context.Context, params preheat.GetPreheatLogParams) middleware.Responder

	/* ListExecutions List executions for the given policy */
	ListExecutions(ctx context.Context, params preheat.ListExecutionsParams) middleware.Responder

	/* ListInstances List P2P provider instances */
	ListInstances(ctx context.Context, params preheat.ListInstancesParams) middleware.Responder

	/* ListPolicies List preheat policies */
	ListPolicies(ctx context.Context, params preheat.ListPoliciesParams) middleware.Responder

	/* ListProviders List P2P providers */
	ListProviders(ctx context.Context, params preheat.ListProvidersParams) middleware.Responder

	/* ListProvidersUnderProject Get all providers at project level */
	ListProvidersUnderProject(ctx context.Context, params preheat.ListProvidersUnderProjectParams) middleware.Responder

	/* ListTasks List all the related tasks for the given execution */
	ListTasks(ctx context.Context, params preheat.ListTasksParams) middleware.Responder

	/* ManualPreheat Manual preheat */
	ManualPreheat(ctx context.Context, params preheat.ManualPreheatParams) middleware.Responder

	/* PingInstances Ping status of a instance. */
	PingInstances(ctx context.Context, params preheat.PingInstancesParams) middleware.Responder

	/* StopExecution Stop a execution */
	StopExecution(ctx context.Context, params preheat.StopExecutionParams) middleware.Responder

	/* UpdateInstance Update the specified P2P provider instance */
	UpdateInstance(ctx context.Context, params preheat.UpdateInstanceParams) middleware.Responder

	/* UpdatePolicy Update preheat policy */
	UpdatePolicy(ctx context.Context, params preheat.UpdatePolicyParams) middleware.Responder
}

// go:generate mockery -name ProjectAPI -inpkg

/* ProjectAPI  */
type ProjectAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateProject Create a new project. */
	CreateProject(ctx context.Context, params project.CreateProjectParams) middleware.Responder

	/* DeleteProject Delete project by projectID */
	DeleteProject(ctx context.Context, params project.DeleteProjectParams) middleware.Responder

	/* GetLogs Get recent logs of the projects */
	GetLogs(ctx context.Context, params project.GetLogsParams) middleware.Responder

	/* GetProject Return specific project detail information */
	GetProject(ctx context.Context, params project.GetProjectParams) middleware.Responder

	/* GetProjectDeletable Get the deletable status of the project */
	GetProjectDeletable(ctx context.Context, params project.GetProjectDeletableParams) middleware.Responder

	/* GetProjectSummary Get summary of the project. */
	GetProjectSummary(ctx context.Context, params project.GetProjectSummaryParams) middleware.Responder

	/* GetScannerOfProject Get project level scanner */
	GetScannerOfProject(ctx context.Context, params project.GetScannerOfProjectParams) middleware.Responder

	/* HeadProject Check if the project name user provided already exists. */
	HeadProject(ctx context.Context, params project.HeadProjectParams) middleware.Responder

	/* ListProjects List projects */
	ListProjects(ctx context.Context, params project.ListProjectsParams) middleware.Responder

	/* ListScannerCandidatesOfProject Get scanner registration candidates for configurating project level scanner */
	ListScannerCandidatesOfProject(ctx context.Context, params project.ListScannerCandidatesOfProjectParams) middleware.Responder

	/* SetScannerOfProject Configure scanner for the specified project */
	SetScannerOfProject(ctx context.Context, params project.SetScannerOfProjectParams) middleware.Responder

	/* UpdateProject Update properties for a selected project. */
	UpdateProject(ctx context.Context, params project.UpdateProjectParams) middleware.Responder
}

// go:generate mockery -name ProjectMetadataAPI -inpkg

/* ProjectMetadataAPI  */
type ProjectMetadataAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* AddProjectMetadatas Add metadata for the specific project */
	AddProjectMetadatas(ctx context.Context, params project_metadata.AddProjectMetadatasParams) middleware.Responder

	/* DeleteProjectMetadata Delete the specific metadata for the specific project */
	DeleteProjectMetadata(ctx context.Context, params project_metadata.DeleteProjectMetadataParams) middleware.Responder

	/* GetProjectMetadata Get the specific metadata of the specific project */
	GetProjectMetadata(ctx context.Context, params project_metadata.GetProjectMetadataParams) middleware.Responder

	/* ListProjectMetadatas Get the metadata of the specific project */
	ListProjectMetadatas(ctx context.Context, params project_metadata.ListProjectMetadatasParams) middleware.Responder

	/* UpdateProjectMetadata Update the specific metadata for the specific project */
	UpdateProjectMetadata(ctx context.Context, params project_metadata.UpdateProjectMetadataParams) middleware.Responder
}

// go:generate mockery -name QuotaAPI -inpkg

/* QuotaAPI  */
type QuotaAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetQuota Get the specified quota */
	GetQuota(ctx context.Context, params quota.GetQuotaParams) middleware.Responder

	/* ListQuotas List quotas */
	ListQuotas(ctx context.Context, params quota.ListQuotasParams) middleware.Responder

	/* UpdateQuota Update the specified quota */
	UpdateQuota(ctx context.Context, params quota.UpdateQuotaParams) middleware.Responder
}

// go:generate mockery -name RegistryAPI -inpkg

/* RegistryAPI  */
type RegistryAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateRegistry Create a registry */
	CreateRegistry(ctx context.Context, params registry.CreateRegistryParams) middleware.Responder

	/* DeleteRegistry Delete the specific registry */
	DeleteRegistry(ctx context.Context, params registry.DeleteRegistryParams) middleware.Responder

	/* GetRegistry Get the specific registry */
	GetRegistry(ctx context.Context, params registry.GetRegistryParams) middleware.Responder

	/* GetRegistryInfo Get the registry info */
	GetRegistryInfo(ctx context.Context, params registry.GetRegistryInfoParams) middleware.Responder

	/* ListRegistries List the registries */
	ListRegistries(ctx context.Context, params registry.ListRegistriesParams) middleware.Responder

	/* ListRegistryProviderInfos List all registered registry provider information */
	ListRegistryProviderInfos(ctx context.Context, params registry.ListRegistryProviderInfosParams) middleware.Responder

	/* ListRegistryProviderTypes List registry adapters */
	ListRegistryProviderTypes(ctx context.Context, params registry.ListRegistryProviderTypesParams) middleware.Responder

	/* PingRegistry Check status of a registry */
	PingRegistry(ctx context.Context, params registry.PingRegistryParams) middleware.Responder

	/* UpdateRegistry Update the registry */
	UpdateRegistry(ctx context.Context, params registry.UpdateRegistryParams) middleware.Responder
}

// go:generate mockery -name ReplicationAPI -inpkg

/* ReplicationAPI  */
type ReplicationAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateReplicationPolicy Create a replication policy */
	CreateReplicationPolicy(ctx context.Context, params replication.CreateReplicationPolicyParams) middleware.Responder

	/* DeleteReplicationPolicy Delete the specific replication policy */
	DeleteReplicationPolicy(ctx context.Context, params replication.DeleteReplicationPolicyParams) middleware.Responder

	/* GetReplicationExecution Get the specific replication execution */
	GetReplicationExecution(ctx context.Context, params replication.GetReplicationExecutionParams) middleware.Responder

	/* GetReplicationLog Get the log of the specific replication task */
	GetReplicationLog(ctx context.Context, params replication.GetReplicationLogParams) middleware.Responder

	/* GetReplicationPolicy Get the specific replication policy */
	GetReplicationPolicy(ctx context.Context, params replication.GetReplicationPolicyParams) middleware.Responder

	/* ListReplicationExecutions List replication executions */
	ListReplicationExecutions(ctx context.Context, params replication.ListReplicationExecutionsParams) middleware.Responder

	/* ListReplicationPolicies List replication policies */
	ListReplicationPolicies(ctx context.Context, params replication.ListReplicationPoliciesParams) middleware.Responder

	/* ListReplicationTasks List replication tasks for a specific execution */
	ListReplicationTasks(ctx context.Context, params replication.ListReplicationTasksParams) middleware.Responder

	/* StartReplication Start one replication execution */
	StartReplication(ctx context.Context, params replication.StartReplicationParams) middleware.Responder

	/* StopReplication Stop the specific replication execution */
	StopReplication(ctx context.Context, params replication.StopReplicationParams) middleware.Responder

	/* UpdateReplicationPolicy Update the replication policy */
	UpdateReplicationPolicy(ctx context.Context, params replication.UpdateReplicationPolicyParams) middleware.Responder
}

// go:generate mockery -name RepositoryAPI -inpkg

/* RepositoryAPI  */
type RepositoryAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* DeleteRepository Delete repository */
	DeleteRepository(ctx context.Context, params repository.DeleteRepositoryParams) middleware.Responder

	/* GetRepository Get repository */
	GetRepository(ctx context.Context, params repository.GetRepositoryParams) middleware.Responder

	/* ListAllRepositories List all authorized repositories */
	ListAllRepositories(ctx context.Context, params repository.ListAllRepositoriesParams) middleware.Responder

	/* ListRepositories List repositories */
	ListRepositories(ctx context.Context, params repository.ListRepositoriesParams) middleware.Responder

	/* UpdateRepository Update repository */
	UpdateRepository(ctx context.Context, params repository.UpdateRepositoryParams) middleware.Responder
}

// go:generate mockery -name RetentionAPI -inpkg

/* RetentionAPI  */
type RetentionAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateRetention Create Retention Policy */
	CreateRetention(ctx context.Context, params retention.CreateRetentionParams) middleware.Responder

	/* DeleteRetention Delete Retention Policy */
	DeleteRetention(ctx context.Context, params retention.DeleteRetentionParams) middleware.Responder

	/* GetRentenitionMetadata Get Retention Metadatas */
	GetRentenitionMetadata(ctx context.Context, params retention.GetRentenitionMetadataParams) middleware.Responder

	/* GetRetention Get Retention Policy */
	GetRetention(ctx context.Context, params retention.GetRetentionParams) middleware.Responder

	/* GetRetentionTaskLog Get Retention job task log */
	GetRetentionTaskLog(ctx context.Context, params retention.GetRetentionTaskLogParams) middleware.Responder

	/* ListRetentionExecutions Get Retention executions */
	ListRetentionExecutions(ctx context.Context, params retention.ListRetentionExecutionsParams) middleware.Responder

	/* ListRetentionTasks Get Retention tasks */
	ListRetentionTasks(ctx context.Context, params retention.ListRetentionTasksParams) middleware.Responder

	/* OperateRetentionExecution Stop a Retention execution */
	OperateRetentionExecution(ctx context.Context, params retention.OperateRetentionExecutionParams) middleware.Responder

	/* TriggerRetentionExecution Trigger a Retention Execution */
	TriggerRetentionExecution(ctx context.Context, params retention.TriggerRetentionExecutionParams) middleware.Responder

	/* UpdateRetention Update Retention Policy */
	UpdateRetention(ctx context.Context, params retention.UpdateRetentionParams) middleware.Responder
}

// go:generate mockery -name RobotAPI -inpkg

/* RobotAPI  */
type RobotAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateRobot Create a robot account */
	CreateRobot(ctx context.Context, params robot.CreateRobotParams) middleware.Responder

	/* DeleteRobot Delete a robot account */
	DeleteRobot(ctx context.Context, params robot.DeleteRobotParams) middleware.Responder

	/* GetRobotByID Get a robot account */
	GetRobotByID(ctx context.Context, params robot.GetRobotByIDParams) middleware.Responder

	/* ListRobot Get robot account */
	ListRobot(ctx context.Context, params robot.ListRobotParams) middleware.Responder

	/* RefreshSec Refresh the robot secret */
	RefreshSec(ctx context.Context, params robot.RefreshSecParams) middleware.Responder

	/* UpdateRobot Update a robot account */
	UpdateRobot(ctx context.Context, params robot.UpdateRobotParams) middleware.Responder
}

// go:generate mockery -name Robotv1API -inpkg

/* Robotv1API  */
type Robotv1API interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateRobotV1 Create a robot account */
	CreateRobotV1(ctx context.Context, params robotv1.CreateRobotV1Params) middleware.Responder

	/* DeleteRobotV1 Delete a robot account */
	DeleteRobotV1(ctx context.Context, params robotv1.DeleteRobotV1Params) middleware.Responder

	/* GetRobotByIDV1 Get a robot account */
	GetRobotByIDV1(ctx context.Context, params robotv1.GetRobotByIDV1Params) middleware.Responder

	/* ListRobotV1 Get all robot accounts of specified project */
	ListRobotV1(ctx context.Context, params robotv1.ListRobotV1Params) middleware.Responder

	/* UpdateRobotV1 Update status of robot account. */
	UpdateRobotV1(ctx context.Context, params robotv1.UpdateRobotV1Params) middleware.Responder
}

// go:generate mockery -name ScanAPI -inpkg

/* ScanAPI  */
type ScanAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetReportLog Get the log of the scan report */
	GetReportLog(ctx context.Context, params scan.GetReportLogParams) middleware.Responder

	/* ScanArtifact Scan the artifact */
	ScanArtifact(ctx context.Context, params scan.ScanArtifactParams) middleware.Responder
}

// go:generate mockery -name ScanAllAPI -inpkg

/* ScanAllAPI  */
type ScanAllAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateScanAllSchedule Create a schedule or a manual trigger for the scan all job. */
	CreateScanAllSchedule(ctx context.Context, params scan_all.CreateScanAllScheduleParams) middleware.Responder

	/* GetLatestScanAllMetrics Get the metrics of the latest scan all process */
	GetLatestScanAllMetrics(ctx context.Context, params scan_all.GetLatestScanAllMetricsParams) middleware.Responder

	/* GetLatestScheduledScanAllMetrics Get the metrics of the latest scheduled scan all process */
	GetLatestScheduledScanAllMetrics(ctx context.Context, params scan_all.GetLatestScheduledScanAllMetricsParams) middleware.Responder

	/* GetScanAllSchedule Get scan all's schedule. */
	GetScanAllSchedule(ctx context.Context, params scan_all.GetScanAllScheduleParams) middleware.Responder

	/* UpdateScanAllSchedule Update scan all's schedule. */
	UpdateScanAllSchedule(ctx context.Context, params scan_all.UpdateScanAllScheduleParams) middleware.Responder
}

// go:generate mockery -name ScannerAPI -inpkg

/* ScannerAPI  */
type ScannerAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateScanner Create a scanner registration */
	CreateScanner(ctx context.Context, params scanner.CreateScannerParams) middleware.Responder

	/* DeleteScanner Delete a scanner registration */
	DeleteScanner(ctx context.Context, params scanner.DeleteScannerParams) middleware.Responder

	/* GetScanner Get a scanner registration details */
	GetScanner(ctx context.Context, params scanner.GetScannerParams) middleware.Responder

	/* GetScannerMetadata Get the metadata of the specified scanner registration */
	GetScannerMetadata(ctx context.Context, params scanner.GetScannerMetadataParams) middleware.Responder

	/* ListScanners List scanner registrations */
	ListScanners(ctx context.Context, params scanner.ListScannersParams) middleware.Responder

	/* PingScanner Tests scanner registration settings */
	PingScanner(ctx context.Context, params scanner.PingScannerParams) middleware.Responder

	/* SetScannerAsDefault Set system default scanner registration */
	SetScannerAsDefault(ctx context.Context, params scanner.SetScannerAsDefaultParams) middleware.Responder

	/* UpdateScanner Update a scanner registration */
	UpdateScanner(ctx context.Context, params scanner.UpdateScannerParams) middleware.Responder
}

// go:generate mockery -name SearchAPI -inpkg

/* SearchAPI  */
type SearchAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* Search Search for projects, repositories and helm charts */
	Search(ctx context.Context, params search.SearchParams) middleware.Responder
}

// go:generate mockery -name StatisticAPI -inpkg

/* StatisticAPI  */
type StatisticAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetStatistic Get the statistic information about the projects and repositories */
	GetStatistic(ctx context.Context, params statistic.GetStatisticParams) middleware.Responder
}

// go:generate mockery -name SystemCVEAllowlistAPI -inpkg

/* SystemCVEAllowlistAPI  */
type SystemCVEAllowlistAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetSystemCVEAllowlist Get the system level allowlist of CVE. */
	GetSystemCVEAllowlist(ctx context.Context, params system_cve_allowlist.GetSystemCVEAllowlistParams) middleware.Responder

	/* PutSystemCVEAllowlist Update the system level allowlist of CVE. */
	PutSystemCVEAllowlist(ctx context.Context, params system_cve_allowlist.PutSystemCVEAllowlistParams) middleware.Responder
}

// go:generate mockery -name SysteminfoAPI -inpkg

/* SysteminfoAPI  */
type SysteminfoAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* GetCert Get default root certificate. */
	GetCert(ctx context.Context, params systeminfo.GetCertParams) middleware.Responder

	/* GetSystemInfo Get general system info */
	GetSystemInfo(ctx context.Context, params systeminfo.GetSystemInfoParams) middleware.Responder

	/* GetVolumes Get system volume info (total/free size). */
	GetVolumes(ctx context.Context, params systeminfo.GetVolumesParams) middleware.Responder
}

// go:generate mockery -name UserAPI -inpkg

/* UserAPI  */
type UserAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateUser Create a local user. */
	CreateUser(ctx context.Context, params user.CreateUserParams) middleware.Responder

	/* DeleteUser Mark a registered user as be removed. */
	DeleteUser(ctx context.Context, params user.DeleteUserParams) middleware.Responder

	/* GetCurrentUserInfo Get current user info. */
	GetCurrentUserInfo(ctx context.Context, params user.GetCurrentUserInfoParams) middleware.Responder

	/* GetCurrentUserPermissions Get current user permissions. */
	GetCurrentUserPermissions(ctx context.Context, params user.GetCurrentUserPermissionsParams) middleware.Responder

	/* GetUser Get a user's profile. */
	GetUser(ctx context.Context, params user.GetUserParams) middleware.Responder

	/* ListUsers List users */
	ListUsers(ctx context.Context, params user.ListUsersParams) middleware.Responder

	/* SearchUsers Search users by username */
	SearchUsers(ctx context.Context, params user.SearchUsersParams) middleware.Responder

	/* SetCliSecret Set CLI secret for a user. */
	SetCliSecret(ctx context.Context, params user.SetCliSecretParams) middleware.Responder

	/* SetUserSysAdmin Update a registered user to change to be an administrator of Harbor. */
	SetUserSysAdmin(ctx context.Context, params user.SetUserSysAdminParams) middleware.Responder

	/* UpdateUserPassword Change the password on a user that already exists. */
	UpdateUserPassword(ctx context.Context, params user.UpdateUserPasswordParams) middleware.Responder

	/* UpdateUserProfile Update user's profile. */
	UpdateUserProfile(ctx context.Context, params user.UpdateUserProfileParams) middleware.Responder
}

// go:generate mockery -name UsergroupAPI -inpkg

/* UsergroupAPI  */
type UsergroupAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateUserGroup Create user group */
	CreateUserGroup(ctx context.Context, params usergroup.CreateUserGroupParams) middleware.Responder

	/* DeleteUserGroup Delete user group */
	DeleteUserGroup(ctx context.Context, params usergroup.DeleteUserGroupParams) middleware.Responder

	/* GetUserGroup Get user group information */
	GetUserGroup(ctx context.Context, params usergroup.GetUserGroupParams) middleware.Responder

	/* ListUserGroups Get all user groups information */
	ListUserGroups(ctx context.Context, params usergroup.ListUserGroupsParams) middleware.Responder

	/* UpdateUserGroup Update group information */
	UpdateUserGroup(ctx context.Context, params usergroup.UpdateUserGroupParams) middleware.Responder
}

// go:generate mockery -name WebhookAPI -inpkg

/* WebhookAPI  */
type WebhookAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* CreateWebhookPolicyOfProject Create project webhook policy. */
	CreateWebhookPolicyOfProject(ctx context.Context, params webhook.CreateWebhookPolicyOfProjectParams) middleware.Responder

	/* DeleteWebhookPolicyOfProject Delete webhook policy of a project */
	DeleteWebhookPolicyOfProject(ctx context.Context, params webhook.DeleteWebhookPolicyOfProjectParams) middleware.Responder

	/* GetSupportedEventTypes Get supported event types and notify types. */
	GetSupportedEventTypes(ctx context.Context, params webhook.GetSupportedEventTypesParams) middleware.Responder

	/* GetWebhookPolicyOfProject Get project webhook policy */
	GetWebhookPolicyOfProject(ctx context.Context, params webhook.GetWebhookPolicyOfProjectParams) middleware.Responder

	/* LastTrigger Get project webhook policy last trigger info */
	LastTrigger(ctx context.Context, params webhook.LastTriggerParams) middleware.Responder

	/* ListWebhookPoliciesOfProject List project webhook policies. */
	ListWebhookPoliciesOfProject(ctx context.Context, params webhook.ListWebhookPoliciesOfProjectParams) middleware.Responder

	/* UpdateWebhookPolicyOfProject Update webhook policy of a project. */
	UpdateWebhookPolicyOfProject(ctx context.Context, params webhook.UpdateWebhookPolicyOfProjectParams) middleware.Responder
}

// go:generate mockery -name WebhookjobAPI -inpkg

/* WebhookjobAPI  */
type WebhookjobAPI interface {
	/* Prepare action before the operation */
	Prepare(ctx context.Context, operation string, params interface{}) middleware.Responder

	/* ListWebhookJobs List project webhook jobs */
	ListWebhookJobs(ctx context.Context, params webhookjob.ListWebhookJobsParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	ArtifactAPI
	AuditlogAPI
	ConfigureAPI
	GCAPI
	HealthAPI
	IconAPI
	ImmutableAPI
	LabelAPI
	LdapAPI
	MemberAPI
	OIDCAPI
	PingAPI
	PreheatAPI
	ProjectAPI
	ProjectMetadataAPI
	QuotaAPI
	RegistryAPI
	ReplicationAPI
	RepositoryAPI
	RetentionAPI
	RobotAPI
	Robotv1API
	ScanAPI
	ScanAllAPI
	ScannerAPI
	SearchAPI
	StatisticAPI
	SystemCVEAllowlistAPI
	SysteminfoAPI
	UserAPI
	UsergroupAPI
	WebhookAPI
	WebhookjobAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error

	// AuthBasic for basic authentication
	AuthBasic func(user string, pass string) (interface{}, error)

	// Authenticator to use for all APIKey authentication
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// Authenticator to use for all Bearer authentication
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// Authenticator to use for all Basic authentication
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *Harbor instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.HarborAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewHarborAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	if c.APIKeyAuthenticator != nil {
		api.APIKeyAuthenticator = c.APIKeyAuthenticator
	}
	if c.BasicAuthenticator != nil {
		api.BasicAuthenticator = c.BasicAuthenticator
	}
	if c.BearerAuthenticator != nil {
		api.BearerAuthenticator = c.BearerAuthenticator
	}

	api.JSONConsumer = runtime.JSONConsumer()
	api.BinProducer = runtime.ByteStreamProducer()
	api.JSONProducer = runtime.JSONProducer()
	api.TxtProducer = runtime.TextProducer()
	api.BasicAuth = func(user string, pass string) (interface{}, error) {
		if c.AuthBasic == nil {
			return "", nil
		}
		return c.AuthBasic(user, pass)
	}

	api.APIAuthorizer = authorizer(c.Authorizer)
	api.ArtifactCopyArtifactHandler = artifact.CopyArtifactHandlerFunc(func(params artifact.CopyArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CopyArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "CopyArtifact", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.CopyArtifact(ctx, params)
	})
	api.ImmutableCreateImmuRuleHandler = immutable.CreateImmuRuleHandlerFunc(func(params immutable.CreateImmuRuleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateImmuRule", &params); res != nil {
				return res
			}
		}
		if res := c.ImmutableAPI.Prepare(ctx, "CreateImmuRule", &params); res != nil {
			return res
		}
		return c.ImmutableAPI.CreateImmuRule(ctx, params)
	})
	api.PreheatCreateInstanceHandler = preheat.CreateInstanceHandlerFunc(func(params preheat.CreateInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "CreateInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.CreateInstance(ctx, params)
	})
	api.LabelCreateLabelHandler = label.CreateLabelHandlerFunc(func(params label.CreateLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateLabel", &params); res != nil {
				return res
			}
		}
		if res := c.LabelAPI.Prepare(ctx, "CreateLabel", &params); res != nil {
			return res
		}
		return c.LabelAPI.CreateLabel(ctx, params)
	})
	api.PreheatCreatePolicyHandler = preheat.CreatePolicyHandlerFunc(func(params preheat.CreatePolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreatePolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "CreatePolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.CreatePolicy(ctx, params)
	})
	api.RobotCreateRobotHandler = robot.CreateRobotHandlerFunc(func(params robot.CreateRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "CreateRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.CreateRobot(ctx, params)
	})
	api.Robotv1CreateRobotV1Handler = robotv1.CreateRobotV1HandlerFunc(func(params robotv1.CreateRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "CreateRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.CreateRobotV1(ctx, params)
	})
	api.WebhookCreateWebhookPolicyOfProjectHandler = webhook.CreateWebhookPolicyOfProjectHandlerFunc(func(params webhook.CreateWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateWebhookPolicyOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "CreateWebhookPolicyOfProject", &params); res != nil {
			return res
		}
		return c.WebhookAPI.CreateWebhookPolicyOfProject(ctx, params)
	})
	api.ImmutableDeleteImmuRuleHandler = immutable.DeleteImmuRuleHandlerFunc(func(params immutable.DeleteImmuRuleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteImmuRule", &params); res != nil {
				return res
			}
		}
		if res := c.ImmutableAPI.Prepare(ctx, "DeleteImmuRule", &params); res != nil {
			return res
		}
		return c.ImmutableAPI.DeleteImmuRule(ctx, params)
	})
	api.PreheatDeleteInstanceHandler = preheat.DeleteInstanceHandlerFunc(func(params preheat.DeleteInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "DeleteInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.DeleteInstance(ctx, params)
	})
	api.LabelDeleteLabelHandler = label.DeleteLabelHandlerFunc(func(params label.DeleteLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteLabel", &params); res != nil {
				return res
			}
		}
		if res := c.LabelAPI.Prepare(ctx, "DeleteLabel", &params); res != nil {
			return res
		}
		return c.LabelAPI.DeleteLabel(ctx, params)
	})
	api.PreheatDeletePolicyHandler = preheat.DeletePolicyHandlerFunc(func(params preheat.DeletePolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeletePolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "DeletePolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.DeletePolicy(ctx, params)
	})
	api.RobotDeleteRobotHandler = robot.DeleteRobotHandlerFunc(func(params robot.DeleteRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "DeleteRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.DeleteRobot(ctx, params)
	})
	api.Robotv1DeleteRobotV1Handler = robotv1.DeleteRobotV1HandlerFunc(func(params robotv1.DeleteRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "DeleteRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.DeleteRobotV1(ctx, params)
	})
	api.WebhookDeleteWebhookPolicyOfProjectHandler = webhook.DeleteWebhookPolicyOfProjectHandlerFunc(func(params webhook.DeleteWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteWebhookPolicyOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "DeleteWebhookPolicyOfProject", &params); res != nil {
			return res
		}
		return c.WebhookAPI.DeleteWebhookPolicyOfProject(ctx, params)
	})
	api.PreheatGetExecutionHandler = preheat.GetExecutionHandlerFunc(func(params preheat.GetExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetExecution", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetExecution", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetExecution(ctx, params)
	})
	api.PreheatGetInstanceHandler = preheat.GetInstanceHandlerFunc(func(params preheat.GetInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetInstance(ctx, params)
	})
	api.LabelGetLabelByIDHandler = label.GetLabelByIDHandlerFunc(func(params label.GetLabelByIDParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLabelByID", &params); res != nil {
				return res
			}
		}
		if res := c.LabelAPI.Prepare(ctx, "GetLabelByID", &params); res != nil {
			return res
		}
		return c.LabelAPI.GetLabelByID(ctx, params)
	})
	api.PreheatGetPolicyHandler = preheat.GetPolicyHandlerFunc(func(params preheat.GetPolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetPolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetPolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetPolicy(ctx, params)
	})
	api.PreheatGetPreheatLogHandler = preheat.GetPreheatLogHandlerFunc(func(params preheat.GetPreheatLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetPreheatLog", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "GetPreheatLog", &params); res != nil {
			return res
		}
		return c.PreheatAPI.GetPreheatLog(ctx, params)
	})
	api.RobotGetRobotByIDHandler = robot.GetRobotByIDHandlerFunc(func(params robot.GetRobotByIDParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRobotByID", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "GetRobotByID", &params); res != nil {
			return res
		}
		return c.RobotAPI.GetRobotByID(ctx, params)
	})
	api.Robotv1GetRobotByIDV1Handler = robotv1.GetRobotByIDV1HandlerFunc(func(params robotv1.GetRobotByIDV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRobotByIDV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "GetRobotByIDV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.GetRobotByIDV1(ctx, params)
	})
	api.WebhookGetSupportedEventTypesHandler = webhook.GetSupportedEventTypesHandlerFunc(func(params webhook.GetSupportedEventTypesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetSupportedEventTypes", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "GetSupportedEventTypes", &params); res != nil {
			return res
		}
		return c.WebhookAPI.GetSupportedEventTypes(ctx, params)
	})
	api.WebhookGetWebhookPolicyOfProjectHandler = webhook.GetWebhookPolicyOfProjectHandlerFunc(func(params webhook.GetWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetWebhookPolicyOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "GetWebhookPolicyOfProject", &params); res != nil {
			return res
		}
		return c.WebhookAPI.GetWebhookPolicyOfProject(ctx, params)
	})
	api.WebhookLastTriggerHandler = webhook.LastTriggerHandlerFunc(func(params webhook.LastTriggerParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "LastTrigger", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "LastTrigger", &params); res != nil {
			return res
		}
		return c.WebhookAPI.LastTrigger(ctx, params)
	})
	api.PreheatListExecutionsHandler = preheat.ListExecutionsHandlerFunc(func(params preheat.ListExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListExecutions", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListExecutions", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListExecutions(ctx, params)
	})
	api.ImmutableListImmuRulesHandler = immutable.ListImmuRulesHandlerFunc(func(params immutable.ListImmuRulesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListImmuRules", &params); res != nil {
				return res
			}
		}
		if res := c.ImmutableAPI.Prepare(ctx, "ListImmuRules", &params); res != nil {
			return res
		}
		return c.ImmutableAPI.ListImmuRules(ctx, params)
	})
	api.PreheatListInstancesHandler = preheat.ListInstancesHandlerFunc(func(params preheat.ListInstancesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListInstances", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListInstances", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListInstances(ctx, params)
	})
	api.LabelListLabelsHandler = label.ListLabelsHandlerFunc(func(params label.ListLabelsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListLabels", &params); res != nil {
				return res
			}
		}
		if res := c.LabelAPI.Prepare(ctx, "ListLabels", &params); res != nil {
			return res
		}
		return c.LabelAPI.ListLabels(ctx, params)
	})
	api.PreheatListPoliciesHandler = preheat.ListPoliciesHandlerFunc(func(params preheat.ListPoliciesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListPolicies", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListPolicies", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListPolicies(ctx, params)
	})
	api.PreheatListProvidersHandler = preheat.ListProvidersHandlerFunc(func(params preheat.ListProvidersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProviders", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListProviders", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListProviders(ctx, params)
	})
	api.PreheatListProvidersUnderProjectHandler = preheat.ListProvidersUnderProjectHandlerFunc(func(params preheat.ListProvidersUnderProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProvidersUnderProject", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListProvidersUnderProject", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListProvidersUnderProject(ctx, params)
	})
	api.RobotListRobotHandler = robot.ListRobotHandlerFunc(func(params robot.ListRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "ListRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.ListRobot(ctx, params)
	})
	api.Robotv1ListRobotV1Handler = robotv1.ListRobotV1HandlerFunc(func(params robotv1.ListRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "ListRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.ListRobotV1(ctx, params)
	})
	api.PreheatListTasksHandler = preheat.ListTasksHandlerFunc(func(params preheat.ListTasksParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListTasks", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ListTasks", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ListTasks(ctx, params)
	})
	api.WebhookjobListWebhookJobsHandler = webhookjob.ListWebhookJobsHandlerFunc(func(params webhookjob.ListWebhookJobsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListWebhookJobs", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookjobAPI.Prepare(ctx, "ListWebhookJobs", &params); res != nil {
			return res
		}
		return c.WebhookjobAPI.ListWebhookJobs(ctx, params)
	})
	api.WebhookListWebhookPoliciesOfProjectHandler = webhook.ListWebhookPoliciesOfProjectHandlerFunc(func(params webhook.ListWebhookPoliciesOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListWebhookPoliciesOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "ListWebhookPoliciesOfProject", &params); res != nil {
			return res
		}
		return c.WebhookAPI.ListWebhookPoliciesOfProject(ctx, params)
	})
	api.PreheatManualPreheatHandler = preheat.ManualPreheatHandlerFunc(func(params preheat.ManualPreheatParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ManualPreheat", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "ManualPreheat", &params); res != nil {
			return res
		}
		return c.PreheatAPI.ManualPreheat(ctx, params)
	})
	api.PreheatPingInstancesHandler = preheat.PingInstancesHandlerFunc(func(params preheat.PingInstancesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PingInstances", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "PingInstances", &params); res != nil {
			return res
		}
		return c.PreheatAPI.PingInstances(ctx, params)
	})
	api.RobotRefreshSecHandler = robot.RefreshSecHandlerFunc(func(params robot.RefreshSecParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "RefreshSec", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "RefreshSec", &params); res != nil {
			return res
		}
		return c.RobotAPI.RefreshSec(ctx, params)
	})
	api.PreheatStopExecutionHandler = preheat.StopExecutionHandlerFunc(func(params preheat.StopExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "StopExecution", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "StopExecution", &params); res != nil {
			return res
		}
		return c.PreheatAPI.StopExecution(ctx, params)
	})
	api.ImmutableUpdateImmuRuleHandler = immutable.UpdateImmuRuleHandlerFunc(func(params immutable.UpdateImmuRuleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateImmuRule", &params); res != nil {
				return res
			}
		}
		if res := c.ImmutableAPI.Prepare(ctx, "UpdateImmuRule", &params); res != nil {
			return res
		}
		return c.ImmutableAPI.UpdateImmuRule(ctx, params)
	})
	api.PreheatUpdateInstanceHandler = preheat.UpdateInstanceHandlerFunc(func(params preheat.UpdateInstanceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateInstance", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "UpdateInstance", &params); res != nil {
			return res
		}
		return c.PreheatAPI.UpdateInstance(ctx, params)
	})
	api.LabelUpdateLabelHandler = label.UpdateLabelHandlerFunc(func(params label.UpdateLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateLabel", &params); res != nil {
				return res
			}
		}
		if res := c.LabelAPI.Prepare(ctx, "UpdateLabel", &params); res != nil {
			return res
		}
		return c.LabelAPI.UpdateLabel(ctx, params)
	})
	api.PreheatUpdatePolicyHandler = preheat.UpdatePolicyHandlerFunc(func(params preheat.UpdatePolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdatePolicy", &params); res != nil {
				return res
			}
		}
		if res := c.PreheatAPI.Prepare(ctx, "UpdatePolicy", &params); res != nil {
			return res
		}
		return c.PreheatAPI.UpdatePolicy(ctx, params)
	})
	api.RobotUpdateRobotHandler = robot.UpdateRobotHandlerFunc(func(params robot.UpdateRobotParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRobot", &params); res != nil {
				return res
			}
		}
		if res := c.RobotAPI.Prepare(ctx, "UpdateRobot", &params); res != nil {
			return res
		}
		return c.RobotAPI.UpdateRobot(ctx, params)
	})
	api.Robotv1UpdateRobotV1Handler = robotv1.UpdateRobotV1HandlerFunc(func(params robotv1.UpdateRobotV1Params, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRobotV1", &params); res != nil {
				return res
			}
		}
		if res := c.Robotv1API.Prepare(ctx, "UpdateRobotV1", &params); res != nil {
			return res
		}
		return c.Robotv1API.UpdateRobotV1(ctx, params)
	})
	api.WebhookUpdateWebhookPolicyOfProjectHandler = webhook.UpdateWebhookPolicyOfProjectHandlerFunc(func(params webhook.UpdateWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateWebhookPolicyOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.WebhookAPI.Prepare(ctx, "UpdateWebhookPolicyOfProject", &params); res != nil {
			return res
		}
		return c.WebhookAPI.UpdateWebhookPolicyOfProject(ctx, params)
	})
	api.ArtifactAddLabelHandler = artifact.AddLabelHandlerFunc(func(params artifact.AddLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "AddLabel", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "AddLabel", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.AddLabel(ctx, params)
	})
	api.ProjectMetadataAddProjectMetadatasHandler = project_metadata.AddProjectMetadatasHandlerFunc(func(params project_metadata.AddProjectMetadatasParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "AddProjectMetadatas", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectMetadataAPI.Prepare(ctx, "AddProjectMetadatas", &params); res != nil {
			return res
		}
		return c.ProjectMetadataAPI.AddProjectMetadatas(ctx, params)
	})
	api.GCCreateGCScheduleHandler = gc.CreateGCScheduleHandlerFunc(func(params gc.CreateGCScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateGCSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "CreateGCSchedule", &params); res != nil {
			return res
		}
		return c.GCAPI.CreateGCSchedule(ctx, params)
	})
	api.ProjectCreateProjectHandler = project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "CreateProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.CreateProject(ctx, params)
	})
	api.MemberCreateProjectMemberHandler = member.CreateProjectMemberHandlerFunc(func(params member.CreateProjectMemberParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateProjectMember", &params); res != nil {
				return res
			}
		}
		if res := c.MemberAPI.Prepare(ctx, "CreateProjectMember", &params); res != nil {
			return res
		}
		return c.MemberAPI.CreateProjectMember(ctx, params)
	})
	api.RegistryCreateRegistryHandler = registry.CreateRegistryHandlerFunc(func(params registry.CreateRegistryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRegistry", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "CreateRegistry", &params); res != nil {
			return res
		}
		return c.RegistryAPI.CreateRegistry(ctx, params)
	})
	api.ReplicationCreateReplicationPolicyHandler = replication.CreateReplicationPolicyHandlerFunc(func(params replication.CreateReplicationPolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateReplicationPolicy", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "CreateReplicationPolicy", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.CreateReplicationPolicy(ctx, params)
	})
	api.RetentionCreateRetentionHandler = retention.CreateRetentionHandlerFunc(func(params retention.CreateRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "CreateRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.CreateRetention(ctx, params)
	})
	api.ScanAllCreateScanAllScheduleHandler = scan_all.CreateScanAllScheduleHandlerFunc(func(params scan_all.CreateScanAllScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateScanAllSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "CreateScanAllSchedule", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.CreateScanAllSchedule(ctx, params)
	})
	api.ScannerCreateScannerHandler = scanner.CreateScannerHandlerFunc(func(params scanner.CreateScannerParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateScanner", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "CreateScanner", &params); res != nil {
			return res
		}
		return c.ScannerAPI.CreateScanner(ctx, params)
	})
	api.ArtifactCreateTagHandler = artifact.CreateTagHandlerFunc(func(params artifact.CreateTagParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateTag", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "CreateTag", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.CreateTag(ctx, params)
	})
	api.UserCreateUserHandler = user.CreateUserHandlerFunc(func(params user.CreateUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateUser", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "CreateUser", &params); res != nil {
			return res
		}
		return c.UserAPI.CreateUser(ctx, params)
	})
	api.UsergroupCreateUserGroupHandler = usergroup.CreateUserGroupHandlerFunc(func(params usergroup.CreateUserGroupParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "CreateUserGroup", &params); res != nil {
				return res
			}
		}
		if res := c.UsergroupAPI.Prepare(ctx, "CreateUserGroup", &params); res != nil {
			return res
		}
		return c.UsergroupAPI.CreateUserGroup(ctx, params)
	})
	api.ArtifactDeleteArtifactHandler = artifact.DeleteArtifactHandlerFunc(func(params artifact.DeleteArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "DeleteArtifact", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.DeleteArtifact(ctx, params)
	})
	api.ProjectDeleteProjectHandler = project.DeleteProjectHandlerFunc(func(params project.DeleteProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "DeleteProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.DeleteProject(ctx, params)
	})
	api.MemberDeleteProjectMemberHandler = member.DeleteProjectMemberHandlerFunc(func(params member.DeleteProjectMemberParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteProjectMember", &params); res != nil {
				return res
			}
		}
		if res := c.MemberAPI.Prepare(ctx, "DeleteProjectMember", &params); res != nil {
			return res
		}
		return c.MemberAPI.DeleteProjectMember(ctx, params)
	})
	api.ProjectMetadataDeleteProjectMetadataHandler = project_metadata.DeleteProjectMetadataHandlerFunc(func(params project_metadata.DeleteProjectMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteProjectMetadata", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectMetadataAPI.Prepare(ctx, "DeleteProjectMetadata", &params); res != nil {
			return res
		}
		return c.ProjectMetadataAPI.DeleteProjectMetadata(ctx, params)
	})
	api.RegistryDeleteRegistryHandler = registry.DeleteRegistryHandlerFunc(func(params registry.DeleteRegistryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRegistry", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "DeleteRegistry", &params); res != nil {
			return res
		}
		return c.RegistryAPI.DeleteRegistry(ctx, params)
	})
	api.ReplicationDeleteReplicationPolicyHandler = replication.DeleteReplicationPolicyHandlerFunc(func(params replication.DeleteReplicationPolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteReplicationPolicy", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "DeleteReplicationPolicy", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.DeleteReplicationPolicy(ctx, params)
	})
	api.RepositoryDeleteRepositoryHandler = repository.DeleteRepositoryHandlerFunc(func(params repository.DeleteRepositoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRepository", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "DeleteRepository", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.DeleteRepository(ctx, params)
	})
	api.RetentionDeleteRetentionHandler = retention.DeleteRetentionHandlerFunc(func(params retention.DeleteRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "DeleteRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.DeleteRetention(ctx, params)
	})
	api.ScannerDeleteScannerHandler = scanner.DeleteScannerHandlerFunc(func(params scanner.DeleteScannerParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteScanner", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "DeleteScanner", &params); res != nil {
			return res
		}
		return c.ScannerAPI.DeleteScanner(ctx, params)
	})
	api.ArtifactDeleteTagHandler = artifact.DeleteTagHandlerFunc(func(params artifact.DeleteTagParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteTag", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "DeleteTag", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.DeleteTag(ctx, params)
	})
	api.UserDeleteUserHandler = user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteUser", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "DeleteUser", &params); res != nil {
			return res
		}
		return c.UserAPI.DeleteUser(ctx, params)
	})
	api.UsergroupDeleteUserGroupHandler = usergroup.DeleteUserGroupHandlerFunc(func(params usergroup.DeleteUserGroupParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "DeleteUserGroup", &params); res != nil {
				return res
			}
		}
		if res := c.UsergroupAPI.Prepare(ctx, "DeleteUserGroup", &params); res != nil {
			return res
		}
		return c.UsergroupAPI.DeleteUserGroup(ctx, params)
	})
	api.ArtifactGetAdditionHandler = artifact.GetAdditionHandlerFunc(func(params artifact.GetAdditionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetAddition", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "GetAddition", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.GetAddition(ctx, params)
	})
	api.ArtifactGetArtifactHandler = artifact.GetArtifactHandlerFunc(func(params artifact.GetArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "GetArtifact", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.GetArtifact(ctx, params)
	})
	api.SysteminfoGetCertHandler = systeminfo.GetCertHandlerFunc(func(params systeminfo.GetCertParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetCert", &params); res != nil {
				return res
			}
		}
		if res := c.SysteminfoAPI.Prepare(ctx, "GetCert", &params); res != nil {
			return res
		}
		return c.SysteminfoAPI.GetCert(ctx, params)
	})
	api.ConfigureGetConfigurationsHandler = configure.GetConfigurationsHandlerFunc(func(params configure.GetConfigurationsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetConfigurations", &params); res != nil {
				return res
			}
		}
		if res := c.ConfigureAPI.Prepare(ctx, "GetConfigurations", &params); res != nil {
			return res
		}
		return c.ConfigureAPI.GetConfigurations(ctx, params)
	})
	api.UserGetCurrentUserInfoHandler = user.GetCurrentUserInfoHandlerFunc(func(params user.GetCurrentUserInfoParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetCurrentUserInfo", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "GetCurrentUserInfo", &params); res != nil {
			return res
		}
		return c.UserAPI.GetCurrentUserInfo(ctx, params)
	})
	api.UserGetCurrentUserPermissionsHandler = user.GetCurrentUserPermissionsHandlerFunc(func(params user.GetCurrentUserPermissionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetCurrentUserPermissions", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "GetCurrentUserPermissions", &params); res != nil {
			return res
		}
		return c.UserAPI.GetCurrentUserPermissions(ctx, params)
	})
	api.GCGetGCHandler = gc.GetGCHandlerFunc(func(params gc.GetGCParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGC", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGC", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGC(ctx, params)
	})
	api.GCGetGCHistoryHandler = gc.GetGCHistoryHandlerFunc(func(params gc.GetGCHistoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGCHistory", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGCHistory", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGCHistory(ctx, params)
	})
	api.GCGetGCLogHandler = gc.GetGCLogHandlerFunc(func(params gc.GetGCLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGCLog", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGCLog", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGCLog(ctx, params)
	})
	api.GCGetGCScheduleHandler = gc.GetGCScheduleHandlerFunc(func(params gc.GetGCScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetGCSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "GetGCSchedule", &params); res != nil {
			return res
		}
		return c.GCAPI.GetGCSchedule(ctx, params)
	})
	api.HealthGetHealthHandler = health.GetHealthHandlerFunc(func(params health.GetHealthParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetHealth", &params); res != nil {
				return res
			}
		}
		if res := c.HealthAPI.Prepare(ctx, "GetHealth", &params); res != nil {
			return res
		}
		return c.HealthAPI.GetHealth(ctx, params)
	})
	api.IconGetIconHandler = icon.GetIconHandlerFunc(func(params icon.GetIconParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetIcon", &params); res != nil {
				return res
			}
		}
		if res := c.IconAPI.Prepare(ctx, "GetIcon", &params); res != nil {
			return res
		}
		return c.IconAPI.GetIcon(ctx, params)
	})
	api.ConfigureGetInternalconfigHandler = configure.GetInternalconfigHandlerFunc(func(params configure.GetInternalconfigParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetInternalconfig", &params); res != nil {
				return res
			}
		}
		if res := c.ConfigureAPI.Prepare(ctx, "GetInternalconfig", &params); res != nil {
			return res
		}
		return c.ConfigureAPI.GetInternalconfig(ctx, params)
	})
	api.ScanAllGetLatestScanAllMetricsHandler = scan_all.GetLatestScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScanAllMetricsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLatestScanAllMetrics", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "GetLatestScanAllMetrics", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.GetLatestScanAllMetrics(ctx, params)
	})
	api.ScanAllGetLatestScheduledScanAllMetricsHandler = scan_all.GetLatestScheduledScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScheduledScanAllMetricsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLatestScheduledScanAllMetrics", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "GetLatestScheduledScanAllMetrics", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.GetLatestScheduledScanAllMetrics(ctx, params)
	})
	api.ProjectGetLogsHandler = project.GetLogsHandlerFunc(func(params project.GetLogsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetLogs", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetLogs", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetLogs(ctx, params)
	})
	api.PingGetPingHandler = ping.GetPingHandlerFunc(func(params ping.GetPingParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetPing", &params); res != nil {
				return res
			}
		}
		if res := c.PingAPI.Prepare(ctx, "GetPing", &params); res != nil {
			return res
		}
		return c.PingAPI.GetPing(ctx, params)
	})
	api.ProjectGetProjectHandler = project.GetProjectHandlerFunc(func(params project.GetProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetProject(ctx, params)
	})
	api.ProjectGetProjectDeletableHandler = project.GetProjectDeletableHandlerFunc(func(params project.GetProjectDeletableParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProjectDeletable", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetProjectDeletable", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetProjectDeletable(ctx, params)
	})
	api.MemberGetProjectMemberHandler = member.GetProjectMemberHandlerFunc(func(params member.GetProjectMemberParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProjectMember", &params); res != nil {
				return res
			}
		}
		if res := c.MemberAPI.Prepare(ctx, "GetProjectMember", &params); res != nil {
			return res
		}
		return c.MemberAPI.GetProjectMember(ctx, params)
	})
	api.ProjectMetadataGetProjectMetadataHandler = project_metadata.GetProjectMetadataHandlerFunc(func(params project_metadata.GetProjectMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProjectMetadata", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectMetadataAPI.Prepare(ctx, "GetProjectMetadata", &params); res != nil {
			return res
		}
		return c.ProjectMetadataAPI.GetProjectMetadata(ctx, params)
	})
	api.ProjectGetProjectSummaryHandler = project.GetProjectSummaryHandlerFunc(func(params project.GetProjectSummaryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetProjectSummary", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetProjectSummary", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetProjectSummary(ctx, params)
	})
	api.QuotaGetQuotaHandler = quota.GetQuotaHandlerFunc(func(params quota.GetQuotaParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetQuota", &params); res != nil {
				return res
			}
		}
		if res := c.QuotaAPI.Prepare(ctx, "GetQuota", &params); res != nil {
			return res
		}
		return c.QuotaAPI.GetQuota(ctx, params)
	})
	api.RegistryGetRegistryHandler = registry.GetRegistryHandlerFunc(func(params registry.GetRegistryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRegistry", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "GetRegistry", &params); res != nil {
			return res
		}
		return c.RegistryAPI.GetRegistry(ctx, params)
	})
	api.RegistryGetRegistryInfoHandler = registry.GetRegistryInfoHandlerFunc(func(params registry.GetRegistryInfoParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRegistryInfo", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "GetRegistryInfo", &params); res != nil {
			return res
		}
		return c.RegistryAPI.GetRegistryInfo(ctx, params)
	})
	api.RetentionGetRentenitionMetadataHandler = retention.GetRentenitionMetadataHandlerFunc(func(params retention.GetRentenitionMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRentenitionMetadata", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "GetRentenitionMetadata", &params); res != nil {
			return res
		}
		return c.RetentionAPI.GetRentenitionMetadata(ctx, params)
	})
	api.ReplicationGetReplicationExecutionHandler = replication.GetReplicationExecutionHandlerFunc(func(params replication.GetReplicationExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReplicationExecution", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "GetReplicationExecution", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.GetReplicationExecution(ctx, params)
	})
	api.ReplicationGetReplicationLogHandler = replication.GetReplicationLogHandlerFunc(func(params replication.GetReplicationLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReplicationLog", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "GetReplicationLog", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.GetReplicationLog(ctx, params)
	})
	api.ReplicationGetReplicationPolicyHandler = replication.GetReplicationPolicyHandlerFunc(func(params replication.GetReplicationPolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReplicationPolicy", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "GetReplicationPolicy", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.GetReplicationPolicy(ctx, params)
	})
	api.ScanGetReportLogHandler = scan.GetReportLogHandlerFunc(func(params scan.GetReportLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetReportLog", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAPI.Prepare(ctx, "GetReportLog", &params); res != nil {
			return res
		}
		return c.ScanAPI.GetReportLog(ctx, params)
	})
	api.RepositoryGetRepositoryHandler = repository.GetRepositoryHandlerFunc(func(params repository.GetRepositoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRepository", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "GetRepository", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.GetRepository(ctx, params)
	})
	api.RetentionGetRetentionHandler = retention.GetRetentionHandlerFunc(func(params retention.GetRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "GetRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.GetRetention(ctx, params)
	})
	api.RetentionGetRetentionTaskLogHandler = retention.GetRetentionTaskLogHandlerFunc(func(params retention.GetRetentionTaskLogParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetRetentionTaskLog", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "GetRetentionTaskLog", &params); res != nil {
			return res
		}
		return c.RetentionAPI.GetRetentionTaskLog(ctx, params)
	})
	api.ScanAllGetScanAllScheduleHandler = scan_all.GetScanAllScheduleHandlerFunc(func(params scan_all.GetScanAllScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetScanAllSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "GetScanAllSchedule", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.GetScanAllSchedule(ctx, params)
	})
	api.ScannerGetScannerHandler = scanner.GetScannerHandlerFunc(func(params scanner.GetScannerParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetScanner", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "GetScanner", &params); res != nil {
			return res
		}
		return c.ScannerAPI.GetScanner(ctx, params)
	})
	api.ScannerGetScannerMetadataHandler = scanner.GetScannerMetadataHandlerFunc(func(params scanner.GetScannerMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetScannerMetadata", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "GetScannerMetadata", &params); res != nil {
			return res
		}
		return c.ScannerAPI.GetScannerMetadata(ctx, params)
	})
	api.ProjectGetScannerOfProjectHandler = project.GetScannerOfProjectHandlerFunc(func(params project.GetScannerOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetScannerOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "GetScannerOfProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.GetScannerOfProject(ctx, params)
	})
	api.StatisticGetStatisticHandler = statistic.GetStatisticHandlerFunc(func(params statistic.GetStatisticParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetStatistic", &params); res != nil {
				return res
			}
		}
		if res := c.StatisticAPI.Prepare(ctx, "GetStatistic", &params); res != nil {
			return res
		}
		return c.StatisticAPI.GetStatistic(ctx, params)
	})
	api.SystemCVEAllowlistGetSystemCVEAllowlistHandler = system_cve_allowlist.GetSystemCVEAllowlistHandlerFunc(func(params system_cve_allowlist.GetSystemCVEAllowlistParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetSystemCVEAllowlist", &params); res != nil {
				return res
			}
		}
		if res := c.SystemCVEAllowlistAPI.Prepare(ctx, "GetSystemCVEAllowlist", &params); res != nil {
			return res
		}
		return c.SystemCVEAllowlistAPI.GetSystemCVEAllowlist(ctx, params)
	})
	api.SysteminfoGetSystemInfoHandler = systeminfo.GetSystemInfoHandlerFunc(func(params systeminfo.GetSystemInfoParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetSystemInfo", &params); res != nil {
				return res
			}
		}
		if res := c.SysteminfoAPI.Prepare(ctx, "GetSystemInfo", &params); res != nil {
			return res
		}
		return c.SysteminfoAPI.GetSystemInfo(ctx, params)
	})
	api.UserGetUserHandler = user.GetUserHandlerFunc(func(params user.GetUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetUser", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "GetUser", &params); res != nil {
			return res
		}
		return c.UserAPI.GetUser(ctx, params)
	})
	api.UsergroupGetUserGroupHandler = usergroup.GetUserGroupHandlerFunc(func(params usergroup.GetUserGroupParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetUserGroup", &params); res != nil {
				return res
			}
		}
		if res := c.UsergroupAPI.Prepare(ctx, "GetUserGroup", &params); res != nil {
			return res
		}
		return c.UsergroupAPI.GetUserGroup(ctx, params)
	})
	api.SysteminfoGetVolumesHandler = systeminfo.GetVolumesHandlerFunc(func(params systeminfo.GetVolumesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetVolumes", &params); res != nil {
				return res
			}
		}
		if res := c.SysteminfoAPI.Prepare(ctx, "GetVolumes", &params); res != nil {
			return res
		}
		return c.SysteminfoAPI.GetVolumes(ctx, params)
	})
	api.ArtifactGetVulnerabilitiesAdditionHandler = artifact.GetVulnerabilitiesAdditionHandlerFunc(func(params artifact.GetVulnerabilitiesAdditionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "GetVulnerabilitiesAddition", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "GetVulnerabilitiesAddition", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.GetVulnerabilitiesAddition(ctx, params)
	})
	api.ProjectHeadProjectHandler = project.HeadProjectHandlerFunc(func(params project.HeadProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "HeadProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "HeadProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.HeadProject(ctx, params)
	})
	api.LdapImportLdapUserHandler = ldap.ImportLdapUserHandlerFunc(func(params ldap.ImportLdapUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ImportLdapUser", &params); res != nil {
				return res
			}
		}
		if res := c.LdapAPI.Prepare(ctx, "ImportLdapUser", &params); res != nil {
			return res
		}
		return c.LdapAPI.ImportLdapUser(ctx, params)
	})
	api.RepositoryListAllRepositoriesHandler = repository.ListAllRepositoriesHandlerFunc(func(params repository.ListAllRepositoriesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListAllRepositories", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "ListAllRepositories", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.ListAllRepositories(ctx, params)
	})
	api.ArtifactListArtifactsHandler = artifact.ListArtifactsHandlerFunc(func(params artifact.ListArtifactsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListArtifacts", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "ListArtifacts", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.ListArtifacts(ctx, params)
	})
	api.AuditlogListAuditLogsHandler = auditlog.ListAuditLogsHandlerFunc(func(params auditlog.ListAuditLogsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListAuditLogs", &params); res != nil {
				return res
			}
		}
		if res := c.AuditlogAPI.Prepare(ctx, "ListAuditLogs", &params); res != nil {
			return res
		}
		return c.AuditlogAPI.ListAuditLogs(ctx, params)
	})
	api.MemberListProjectMembersHandler = member.ListProjectMembersHandlerFunc(func(params member.ListProjectMembersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProjectMembers", &params); res != nil {
				return res
			}
		}
		if res := c.MemberAPI.Prepare(ctx, "ListProjectMembers", &params); res != nil {
			return res
		}
		return c.MemberAPI.ListProjectMembers(ctx, params)
	})
	api.ProjectMetadataListProjectMetadatasHandler = project_metadata.ListProjectMetadatasHandlerFunc(func(params project_metadata.ListProjectMetadatasParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProjectMetadatas", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectMetadataAPI.Prepare(ctx, "ListProjectMetadatas", &params); res != nil {
			return res
		}
		return c.ProjectMetadataAPI.ListProjectMetadatas(ctx, params)
	})
	api.ProjectListProjectsHandler = project.ListProjectsHandlerFunc(func(params project.ListProjectsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListProjects", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "ListProjects", &params); res != nil {
			return res
		}
		return c.ProjectAPI.ListProjects(ctx, params)
	})
	api.QuotaListQuotasHandler = quota.ListQuotasHandlerFunc(func(params quota.ListQuotasParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListQuotas", &params); res != nil {
				return res
			}
		}
		if res := c.QuotaAPI.Prepare(ctx, "ListQuotas", &params); res != nil {
			return res
		}
		return c.QuotaAPI.ListQuotas(ctx, params)
	})
	api.RegistryListRegistriesHandler = registry.ListRegistriesHandlerFunc(func(params registry.ListRegistriesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRegistries", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "ListRegistries", &params); res != nil {
			return res
		}
		return c.RegistryAPI.ListRegistries(ctx, params)
	})
	api.RegistryListRegistryProviderInfosHandler = registry.ListRegistryProviderInfosHandlerFunc(func(params registry.ListRegistryProviderInfosParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRegistryProviderInfos", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "ListRegistryProviderInfos", &params); res != nil {
			return res
		}
		return c.RegistryAPI.ListRegistryProviderInfos(ctx, params)
	})
	api.RegistryListRegistryProviderTypesHandler = registry.ListRegistryProviderTypesHandlerFunc(func(params registry.ListRegistryProviderTypesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRegistryProviderTypes", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "ListRegistryProviderTypes", &params); res != nil {
			return res
		}
		return c.RegistryAPI.ListRegistryProviderTypes(ctx, params)
	})
	api.ReplicationListReplicationExecutionsHandler = replication.ListReplicationExecutionsHandlerFunc(func(params replication.ListReplicationExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListReplicationExecutions", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "ListReplicationExecutions", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.ListReplicationExecutions(ctx, params)
	})
	api.ReplicationListReplicationPoliciesHandler = replication.ListReplicationPoliciesHandlerFunc(func(params replication.ListReplicationPoliciesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListReplicationPolicies", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "ListReplicationPolicies", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.ListReplicationPolicies(ctx, params)
	})
	api.ReplicationListReplicationTasksHandler = replication.ListReplicationTasksHandlerFunc(func(params replication.ListReplicationTasksParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListReplicationTasks", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "ListReplicationTasks", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.ListReplicationTasks(ctx, params)
	})
	api.RepositoryListRepositoriesHandler = repository.ListRepositoriesHandlerFunc(func(params repository.ListRepositoriesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRepositories", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "ListRepositories", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.ListRepositories(ctx, params)
	})
	api.RetentionListRetentionExecutionsHandler = retention.ListRetentionExecutionsHandlerFunc(func(params retention.ListRetentionExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRetentionExecutions", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "ListRetentionExecutions", &params); res != nil {
			return res
		}
		return c.RetentionAPI.ListRetentionExecutions(ctx, params)
	})
	api.RetentionListRetentionTasksHandler = retention.ListRetentionTasksHandlerFunc(func(params retention.ListRetentionTasksParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListRetentionTasks", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "ListRetentionTasks", &params); res != nil {
			return res
		}
		return c.RetentionAPI.ListRetentionTasks(ctx, params)
	})
	api.ProjectListScannerCandidatesOfProjectHandler = project.ListScannerCandidatesOfProjectHandlerFunc(func(params project.ListScannerCandidatesOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListScannerCandidatesOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "ListScannerCandidatesOfProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.ListScannerCandidatesOfProject(ctx, params)
	})
	api.ScannerListScannersHandler = scanner.ListScannersHandlerFunc(func(params scanner.ListScannersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListScanners", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "ListScanners", &params); res != nil {
			return res
		}
		return c.ScannerAPI.ListScanners(ctx, params)
	})
	api.ArtifactListTagsHandler = artifact.ListTagsHandlerFunc(func(params artifact.ListTagsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListTags", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "ListTags", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.ListTags(ctx, params)
	})
	api.UsergroupListUserGroupsHandler = usergroup.ListUserGroupsHandlerFunc(func(params usergroup.ListUserGroupsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListUserGroups", &params); res != nil {
				return res
			}
		}
		if res := c.UsergroupAPI.Prepare(ctx, "ListUserGroups", &params); res != nil {
			return res
		}
		return c.UsergroupAPI.ListUserGroups(ctx, params)
	})
	api.UserListUsersHandler = user.ListUsersHandlerFunc(func(params user.ListUsersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ListUsers", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "ListUsers", &params); res != nil {
			return res
		}
		return c.UserAPI.ListUsers(ctx, params)
	})
	api.RetentionOperateRetentionExecutionHandler = retention.OperateRetentionExecutionHandlerFunc(func(params retention.OperateRetentionExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "OperateRetentionExecution", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "OperateRetentionExecution", &params); res != nil {
			return res
		}
		return c.RetentionAPI.OperateRetentionExecution(ctx, params)
	})
	api.LdapPingLdapHandler = ldap.PingLdapHandlerFunc(func(params ldap.PingLdapParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PingLdap", &params); res != nil {
				return res
			}
		}
		if res := c.LdapAPI.Prepare(ctx, "PingLdap", &params); res != nil {
			return res
		}
		return c.LdapAPI.PingLdap(ctx, params)
	})
	api.OIDCPingOIDCHandler = oidc.PingOIDCHandlerFunc(func(params oidc.PingOIDCParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PingOIDC", &params); res != nil {
				return res
			}
		}
		if res := c.OIDCAPI.Prepare(ctx, "PingOIDC", &params); res != nil {
			return res
		}
		return c.OIDCAPI.PingOIDC(ctx, params)
	})
	api.RegistryPingRegistryHandler = registry.PingRegistryHandlerFunc(func(params registry.PingRegistryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PingRegistry", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "PingRegistry", &params); res != nil {
			return res
		}
		return c.RegistryAPI.PingRegistry(ctx, params)
	})
	api.ScannerPingScannerHandler = scanner.PingScannerHandlerFunc(func(params scanner.PingScannerParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PingScanner", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "PingScanner", &params); res != nil {
			return res
		}
		return c.ScannerAPI.PingScanner(ctx, params)
	})
	api.SystemCVEAllowlistPutSystemCVEAllowlistHandler = system_cve_allowlist.PutSystemCVEAllowlistHandlerFunc(func(params system_cve_allowlist.PutSystemCVEAllowlistParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "PutSystemCVEAllowlist", &params); res != nil {
				return res
			}
		}
		if res := c.SystemCVEAllowlistAPI.Prepare(ctx, "PutSystemCVEAllowlist", &params); res != nil {
			return res
		}
		return c.SystemCVEAllowlistAPI.PutSystemCVEAllowlist(ctx, params)
	})
	api.ArtifactRemoveLabelHandler = artifact.RemoveLabelHandlerFunc(func(params artifact.RemoveLabelParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "RemoveLabel", &params); res != nil {
				return res
			}
		}
		if res := c.ArtifactAPI.Prepare(ctx, "RemoveLabel", &params); res != nil {
			return res
		}
		return c.ArtifactAPI.RemoveLabel(ctx, params)
	})
	api.ScanScanArtifactHandler = scan.ScanArtifactHandlerFunc(func(params scan.ScanArtifactParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "ScanArtifact", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAPI.Prepare(ctx, "ScanArtifact", &params); res != nil {
			return res
		}
		return c.ScanAPI.ScanArtifact(ctx, params)
	})
	api.SearchSearchHandler = search.SearchHandlerFunc(func(params search.SearchParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "Search", &params); res != nil {
				return res
			}
		}
		if res := c.SearchAPI.Prepare(ctx, "Search", &params); res != nil {
			return res
		}
		return c.SearchAPI.Search(ctx, params)
	})
	api.LdapSearchLdapGroupHandler = ldap.SearchLdapGroupHandlerFunc(func(params ldap.SearchLdapGroupParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SearchLdapGroup", &params); res != nil {
				return res
			}
		}
		if res := c.LdapAPI.Prepare(ctx, "SearchLdapGroup", &params); res != nil {
			return res
		}
		return c.LdapAPI.SearchLdapGroup(ctx, params)
	})
	api.LdapSearchLdapUserHandler = ldap.SearchLdapUserHandlerFunc(func(params ldap.SearchLdapUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SearchLdapUser", &params); res != nil {
				return res
			}
		}
		if res := c.LdapAPI.Prepare(ctx, "SearchLdapUser", &params); res != nil {
			return res
		}
		return c.LdapAPI.SearchLdapUser(ctx, params)
	})
	api.UserSearchUsersHandler = user.SearchUsersHandlerFunc(func(params user.SearchUsersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SearchUsers", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "SearchUsers", &params); res != nil {
			return res
		}
		return c.UserAPI.SearchUsers(ctx, params)
	})
	api.UserSetCliSecretHandler = user.SetCliSecretHandlerFunc(func(params user.SetCliSecretParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SetCliSecret", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "SetCliSecret", &params); res != nil {
			return res
		}
		return c.UserAPI.SetCliSecret(ctx, params)
	})
	api.ScannerSetScannerAsDefaultHandler = scanner.SetScannerAsDefaultHandlerFunc(func(params scanner.SetScannerAsDefaultParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SetScannerAsDefault", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "SetScannerAsDefault", &params); res != nil {
			return res
		}
		return c.ScannerAPI.SetScannerAsDefault(ctx, params)
	})
	api.ProjectSetScannerOfProjectHandler = project.SetScannerOfProjectHandlerFunc(func(params project.SetScannerOfProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SetScannerOfProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "SetScannerOfProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.SetScannerOfProject(ctx, params)
	})
	api.UserSetUserSysAdminHandler = user.SetUserSysAdminHandlerFunc(func(params user.SetUserSysAdminParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "SetUserSysAdmin", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "SetUserSysAdmin", &params); res != nil {
			return res
		}
		return c.UserAPI.SetUserSysAdmin(ctx, params)
	})
	api.ReplicationStartReplicationHandler = replication.StartReplicationHandlerFunc(func(params replication.StartReplicationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "StartReplication", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "StartReplication", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.StartReplication(ctx, params)
	})
	api.ReplicationStopReplicationHandler = replication.StopReplicationHandlerFunc(func(params replication.StopReplicationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "StopReplication", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "StopReplication", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.StopReplication(ctx, params)
	})
	api.RetentionTriggerRetentionExecutionHandler = retention.TriggerRetentionExecutionHandlerFunc(func(params retention.TriggerRetentionExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "TriggerRetentionExecution", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "TriggerRetentionExecution", &params); res != nil {
			return res
		}
		return c.RetentionAPI.TriggerRetentionExecution(ctx, params)
	})
	api.ConfigureUpdateConfigurationsHandler = configure.UpdateConfigurationsHandlerFunc(func(params configure.UpdateConfigurationsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateConfigurations", &params); res != nil {
				return res
			}
		}
		if res := c.ConfigureAPI.Prepare(ctx, "UpdateConfigurations", &params); res != nil {
			return res
		}
		return c.ConfigureAPI.UpdateConfigurations(ctx, params)
	})
	api.GCUpdateGCScheduleHandler = gc.UpdateGCScheduleHandlerFunc(func(params gc.UpdateGCScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateGCSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.GCAPI.Prepare(ctx, "UpdateGCSchedule", &params); res != nil {
			return res
		}
		return c.GCAPI.UpdateGCSchedule(ctx, params)
	})
	api.ProjectUpdateProjectHandler = project.UpdateProjectHandlerFunc(func(params project.UpdateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateProject", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectAPI.Prepare(ctx, "UpdateProject", &params); res != nil {
			return res
		}
		return c.ProjectAPI.UpdateProject(ctx, params)
	})
	api.MemberUpdateProjectMemberHandler = member.UpdateProjectMemberHandlerFunc(func(params member.UpdateProjectMemberParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateProjectMember", &params); res != nil {
				return res
			}
		}
		if res := c.MemberAPI.Prepare(ctx, "UpdateProjectMember", &params); res != nil {
			return res
		}
		return c.MemberAPI.UpdateProjectMember(ctx, params)
	})
	api.ProjectMetadataUpdateProjectMetadataHandler = project_metadata.UpdateProjectMetadataHandlerFunc(func(params project_metadata.UpdateProjectMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateProjectMetadata", &params); res != nil {
				return res
			}
		}
		if res := c.ProjectMetadataAPI.Prepare(ctx, "UpdateProjectMetadata", &params); res != nil {
			return res
		}
		return c.ProjectMetadataAPI.UpdateProjectMetadata(ctx, params)
	})
	api.QuotaUpdateQuotaHandler = quota.UpdateQuotaHandlerFunc(func(params quota.UpdateQuotaParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateQuota", &params); res != nil {
				return res
			}
		}
		if res := c.QuotaAPI.Prepare(ctx, "UpdateQuota", &params); res != nil {
			return res
		}
		return c.QuotaAPI.UpdateQuota(ctx, params)
	})
	api.RegistryUpdateRegistryHandler = registry.UpdateRegistryHandlerFunc(func(params registry.UpdateRegistryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRegistry", &params); res != nil {
				return res
			}
		}
		if res := c.RegistryAPI.Prepare(ctx, "UpdateRegistry", &params); res != nil {
			return res
		}
		return c.RegistryAPI.UpdateRegistry(ctx, params)
	})
	api.ReplicationUpdateReplicationPolicyHandler = replication.UpdateReplicationPolicyHandlerFunc(func(params replication.UpdateReplicationPolicyParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateReplicationPolicy", &params); res != nil {
				return res
			}
		}
		if res := c.ReplicationAPI.Prepare(ctx, "UpdateReplicationPolicy", &params); res != nil {
			return res
		}
		return c.ReplicationAPI.UpdateReplicationPolicy(ctx, params)
	})
	api.RepositoryUpdateRepositoryHandler = repository.UpdateRepositoryHandlerFunc(func(params repository.UpdateRepositoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRepository", &params); res != nil {
				return res
			}
		}
		if res := c.RepositoryAPI.Prepare(ctx, "UpdateRepository", &params); res != nil {
			return res
		}
		return c.RepositoryAPI.UpdateRepository(ctx, params)
	})
	api.RetentionUpdateRetentionHandler = retention.UpdateRetentionHandlerFunc(func(params retention.UpdateRetentionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateRetention", &params); res != nil {
				return res
			}
		}
		if res := c.RetentionAPI.Prepare(ctx, "UpdateRetention", &params); res != nil {
			return res
		}
		return c.RetentionAPI.UpdateRetention(ctx, params)
	})
	api.ScanAllUpdateScanAllScheduleHandler = scan_all.UpdateScanAllScheduleHandlerFunc(func(params scan_all.UpdateScanAllScheduleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateScanAllSchedule", &params); res != nil {
				return res
			}
		}
		if res := c.ScanAllAPI.Prepare(ctx, "UpdateScanAllSchedule", &params); res != nil {
			return res
		}
		return c.ScanAllAPI.UpdateScanAllSchedule(ctx, params)
	})
	api.ScannerUpdateScannerHandler = scanner.UpdateScannerHandlerFunc(func(params scanner.UpdateScannerParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateScanner", &params); res != nil {
				return res
			}
		}
		if res := c.ScannerAPI.Prepare(ctx, "UpdateScanner", &params); res != nil {
			return res
		}
		return c.ScannerAPI.UpdateScanner(ctx, params)
	})
	api.UsergroupUpdateUserGroupHandler = usergroup.UpdateUserGroupHandlerFunc(func(params usergroup.UpdateUserGroupParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateUserGroup", &params); res != nil {
				return res
			}
		}
		if res := c.UsergroupAPI.Prepare(ctx, "UpdateUserGroup", &params); res != nil {
			return res
		}
		return c.UsergroupAPI.UpdateUserGroup(ctx, params)
	})
	api.UserUpdateUserPasswordHandler = user.UpdateUserPasswordHandlerFunc(func(params user.UpdateUserPasswordParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateUserPassword", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "UpdateUserPassword", &params); res != nil {
			return res
		}
		return c.UserAPI.UpdateUserPassword(ctx, params)
	})
	api.UserUpdateUserProfileHandler = user.UpdateUserProfileHandlerFunc(func(params user.UpdateUserProfileParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		if api.BeforePrepare != nil {
			if res := api.BeforePrepare(ctx, "UpdateUserProfile", &params); res != nil {
				return res
			}
		}
		if res := c.UserAPI.Prepare(ctx, "UpdateUserProfile", &params); res != nil {
			return res
		}
		return c.UserAPI.UpdateUserProfile(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
