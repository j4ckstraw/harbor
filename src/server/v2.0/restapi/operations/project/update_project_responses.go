// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateProjectOKCode is the HTTP code returned for type UpdateProjectOK
const UpdateProjectOKCode int = 200

/*UpdateProjectOK Success

swagger:response updateProjectOK
*/
type UpdateProjectOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateProjectOK creates UpdateProjectOK with default headers values
func NewUpdateProjectOK() *UpdateProjectOK {

	return &UpdateProjectOK{}
}

// WithXRequestID adds the xRequestId to the update project o k response
func (o *UpdateProjectOK) WithXRequestID(xRequestID string) *UpdateProjectOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project o k response
func (o *UpdateProjectOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateProjectBadRequestCode is the HTTP code returned for type UpdateProjectBadRequest
const UpdateProjectBadRequestCode int = 400

/*UpdateProjectBadRequest Bad request

swagger:response updateProjectBadRequest
*/
type UpdateProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectBadRequest creates UpdateProjectBadRequest with default headers values
func NewUpdateProjectBadRequest() *UpdateProjectBadRequest {

	return &UpdateProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the update project bad request response
func (o *UpdateProjectBadRequest) WithXRequestID(xRequestID string) *UpdateProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project bad request response
func (o *UpdateProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project bad request response
func (o *UpdateProjectBadRequest) WithPayload(payload *models.Errors) *UpdateProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project bad request response
func (o *UpdateProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectUnauthorizedCode is the HTTP code returned for type UpdateProjectUnauthorized
const UpdateProjectUnauthorizedCode int = 401

/*UpdateProjectUnauthorized Unauthorized

swagger:response updateProjectUnauthorized
*/
type UpdateProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectUnauthorized creates UpdateProjectUnauthorized with default headers values
func NewUpdateProjectUnauthorized() *UpdateProjectUnauthorized {

	return &UpdateProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update project unauthorized response
func (o *UpdateProjectUnauthorized) WithXRequestID(xRequestID string) *UpdateProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project unauthorized response
func (o *UpdateProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project unauthorized response
func (o *UpdateProjectUnauthorized) WithPayload(payload *models.Errors) *UpdateProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project unauthorized response
func (o *UpdateProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectForbiddenCode is the HTTP code returned for type UpdateProjectForbidden
const UpdateProjectForbiddenCode int = 403

/*UpdateProjectForbidden Forbidden

swagger:response updateProjectForbidden
*/
type UpdateProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectForbidden creates UpdateProjectForbidden with default headers values
func NewUpdateProjectForbidden() *UpdateProjectForbidden {

	return &UpdateProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the update project forbidden response
func (o *UpdateProjectForbidden) WithXRequestID(xRequestID string) *UpdateProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project forbidden response
func (o *UpdateProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project forbidden response
func (o *UpdateProjectForbidden) WithPayload(payload *models.Errors) *UpdateProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project forbidden response
func (o *UpdateProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectNotFoundCode is the HTTP code returned for type UpdateProjectNotFound
const UpdateProjectNotFoundCode int = 404

/*UpdateProjectNotFound Not found

swagger:response updateProjectNotFound
*/
type UpdateProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectNotFound creates UpdateProjectNotFound with default headers values
func NewUpdateProjectNotFound() *UpdateProjectNotFound {

	return &UpdateProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the update project not found response
func (o *UpdateProjectNotFound) WithXRequestID(xRequestID string) *UpdateProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project not found response
func (o *UpdateProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project not found response
func (o *UpdateProjectNotFound) WithPayload(payload *models.Errors) *UpdateProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project not found response
func (o *UpdateProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectInternalServerErrorCode is the HTTP code returned for type UpdateProjectInternalServerError
const UpdateProjectInternalServerErrorCode int = 500

/*UpdateProjectInternalServerError Internal server error

swagger:response updateProjectInternalServerError
*/
type UpdateProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectInternalServerError creates UpdateProjectInternalServerError with default headers values
func NewUpdateProjectInternalServerError() *UpdateProjectInternalServerError {

	return &UpdateProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update project internal server error response
func (o *UpdateProjectInternalServerError) WithXRequestID(xRequestID string) *UpdateProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project internal server error response
func (o *UpdateProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project internal server error response
func (o *UpdateProjectInternalServerError) WithPayload(payload *models.Errors) *UpdateProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project internal server error response
func (o *UpdateProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
