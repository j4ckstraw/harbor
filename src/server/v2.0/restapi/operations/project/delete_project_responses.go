// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteProjectOKCode is the HTTP code returned for type DeleteProjectOK
const DeleteProjectOKCode int = 200

/*DeleteProjectOK Success

swagger:response deleteProjectOK
*/
type DeleteProjectOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteProjectOK creates DeleteProjectOK with default headers values
func NewDeleteProjectOK() *DeleteProjectOK {

	return &DeleteProjectOK{}
}

// WithXRequestID adds the xRequestId to the delete project o k response
func (o *DeleteProjectOK) WithXRequestID(xRequestID string) *DeleteProjectOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project o k response
func (o *DeleteProjectOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteProjectBadRequestCode is the HTTP code returned for type DeleteProjectBadRequest
const DeleteProjectBadRequestCode int = 400

/*DeleteProjectBadRequest Bad request

swagger:response deleteProjectBadRequest
*/
type DeleteProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectBadRequest creates DeleteProjectBadRequest with default headers values
func NewDeleteProjectBadRequest() *DeleteProjectBadRequest {

	return &DeleteProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete project bad request response
func (o *DeleteProjectBadRequest) WithXRequestID(xRequestID string) *DeleteProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project bad request response
func (o *DeleteProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project bad request response
func (o *DeleteProjectBadRequest) WithPayload(payload *models.Errors) *DeleteProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project bad request response
func (o *DeleteProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectForbiddenCode is the HTTP code returned for type DeleteProjectForbidden
const DeleteProjectForbiddenCode int = 403

/*DeleteProjectForbidden Forbidden

swagger:response deleteProjectForbidden
*/
type DeleteProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectForbidden creates DeleteProjectForbidden with default headers values
func NewDeleteProjectForbidden() *DeleteProjectForbidden {

	return &DeleteProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the delete project forbidden response
func (o *DeleteProjectForbidden) WithXRequestID(xRequestID string) *DeleteProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project forbidden response
func (o *DeleteProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project forbidden response
func (o *DeleteProjectForbidden) WithPayload(payload *models.Errors) *DeleteProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project forbidden response
func (o *DeleteProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectNotFoundCode is the HTTP code returned for type DeleteProjectNotFound
const DeleteProjectNotFoundCode int = 404

/*DeleteProjectNotFound Not found

swagger:response deleteProjectNotFound
*/
type DeleteProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectNotFound creates DeleteProjectNotFound with default headers values
func NewDeleteProjectNotFound() *DeleteProjectNotFound {

	return &DeleteProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the delete project not found response
func (o *DeleteProjectNotFound) WithXRequestID(xRequestID string) *DeleteProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project not found response
func (o *DeleteProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project not found response
func (o *DeleteProjectNotFound) WithPayload(payload *models.Errors) *DeleteProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project not found response
func (o *DeleteProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectPreconditionFailedCode is the HTTP code returned for type DeleteProjectPreconditionFailed
const DeleteProjectPreconditionFailedCode int = 412

/*DeleteProjectPreconditionFailed Precondition failed

swagger:response deleteProjectPreconditionFailed
*/
type DeleteProjectPreconditionFailed struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectPreconditionFailed creates DeleteProjectPreconditionFailed with default headers values
func NewDeleteProjectPreconditionFailed() *DeleteProjectPreconditionFailed {

	return &DeleteProjectPreconditionFailed{}
}

// WithXRequestID adds the xRequestId to the delete project precondition failed response
func (o *DeleteProjectPreconditionFailed) WithXRequestID(xRequestID string) *DeleteProjectPreconditionFailed {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project precondition failed response
func (o *DeleteProjectPreconditionFailed) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project precondition failed response
func (o *DeleteProjectPreconditionFailed) WithPayload(payload *models.Errors) *DeleteProjectPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project precondition failed response
func (o *DeleteProjectPreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectInternalServerErrorCode is the HTTP code returned for type DeleteProjectInternalServerError
const DeleteProjectInternalServerErrorCode int = 500

/*DeleteProjectInternalServerError Internal server error

swagger:response deleteProjectInternalServerError
*/
type DeleteProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectInternalServerError creates DeleteProjectInternalServerError with default headers values
func NewDeleteProjectInternalServerError() *DeleteProjectInternalServerError {

	return &DeleteProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete project internal server error response
func (o *DeleteProjectInternalServerError) WithXRequestID(xRequestID string) *DeleteProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project internal server error response
func (o *DeleteProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project internal server error response
func (o *DeleteProjectInternalServerError) WithPayload(payload *models.Errors) *DeleteProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project internal server error response
func (o *DeleteProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
