// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateProjectCreatedCode is the HTTP code returned for type CreateProjectCreated
const CreateProjectCreatedCode int = 201

/*CreateProjectCreated Created

swagger:response createProjectCreated
*/
type CreateProjectCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreateProjectCreated creates CreateProjectCreated with default headers values
func NewCreateProjectCreated() *CreateProjectCreated {

	return &CreateProjectCreated{}
}

// WithLocation adds the location to the create project created response
func (o *CreateProjectCreated) WithLocation(location string) *CreateProjectCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create project created response
func (o *CreateProjectCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create project created response
func (o *CreateProjectCreated) WithXRequestID(xRequestID string) *CreateProjectCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project created response
func (o *CreateProjectCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreateProjectCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateProjectBadRequestCode is the HTTP code returned for type CreateProjectBadRequest
const CreateProjectBadRequestCode int = 400

/*CreateProjectBadRequest Bad request

swagger:response createProjectBadRequest
*/
type CreateProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectBadRequest creates CreateProjectBadRequest with default headers values
func NewCreateProjectBadRequest() *CreateProjectBadRequest {

	return &CreateProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the create project bad request response
func (o *CreateProjectBadRequest) WithXRequestID(xRequestID string) *CreateProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project bad request response
func (o *CreateProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project bad request response
func (o *CreateProjectBadRequest) WithPayload(payload *models.Errors) *CreateProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project bad request response
func (o *CreateProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectUnauthorizedCode is the HTTP code returned for type CreateProjectUnauthorized
const CreateProjectUnauthorizedCode int = 401

/*CreateProjectUnauthorized Unauthorized

swagger:response createProjectUnauthorized
*/
type CreateProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectUnauthorized creates CreateProjectUnauthorized with default headers values
func NewCreateProjectUnauthorized() *CreateProjectUnauthorized {

	return &CreateProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create project unauthorized response
func (o *CreateProjectUnauthorized) WithXRequestID(xRequestID string) *CreateProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project unauthorized response
func (o *CreateProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project unauthorized response
func (o *CreateProjectUnauthorized) WithPayload(payload *models.Errors) *CreateProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project unauthorized response
func (o *CreateProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectConflictCode is the HTTP code returned for type CreateProjectConflict
const CreateProjectConflictCode int = 409

/*CreateProjectConflict Conflict

swagger:response createProjectConflict
*/
type CreateProjectConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectConflict creates CreateProjectConflict with default headers values
func NewCreateProjectConflict() *CreateProjectConflict {

	return &CreateProjectConflict{}
}

// WithXRequestID adds the xRequestId to the create project conflict response
func (o *CreateProjectConflict) WithXRequestID(xRequestID string) *CreateProjectConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project conflict response
func (o *CreateProjectConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project conflict response
func (o *CreateProjectConflict) WithPayload(payload *models.Errors) *CreateProjectConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project conflict response
func (o *CreateProjectConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectInternalServerErrorCode is the HTTP code returned for type CreateProjectInternalServerError
const CreateProjectInternalServerErrorCode int = 500

/*CreateProjectInternalServerError Internal server error

swagger:response createProjectInternalServerError
*/
type CreateProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectInternalServerError creates CreateProjectInternalServerError with default headers values
func NewCreateProjectInternalServerError() *CreateProjectInternalServerError {

	return &CreateProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create project internal server error response
func (o *CreateProjectInternalServerError) WithXRequestID(xRequestID string) *CreateProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project internal server error response
func (o *CreateProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project internal server error response
func (o *CreateProjectInternalServerError) WithPayload(payload *models.Errors) *CreateProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project internal server error response
func (o *CreateProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
