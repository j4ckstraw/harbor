// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// HeadProjectOKCode is the HTTP code returned for type HeadProjectOK
const HeadProjectOKCode int = 200

/*HeadProjectOK Success

swagger:response headProjectOK
*/
type HeadProjectOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewHeadProjectOK creates HeadProjectOK with default headers values
func NewHeadProjectOK() *HeadProjectOK {

	return &HeadProjectOK{}
}

// WithXRequestID adds the xRequestId to the head project o k response
func (o *HeadProjectOK) WithXRequestID(xRequestID string) *HeadProjectOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the head project o k response
func (o *HeadProjectOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *HeadProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// HeadProjectNotFoundCode is the HTTP code returned for type HeadProjectNotFound
const HeadProjectNotFoundCode int = 404

/*HeadProjectNotFound Not found

swagger:response headProjectNotFound
*/
type HeadProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewHeadProjectNotFound creates HeadProjectNotFound with default headers values
func NewHeadProjectNotFound() *HeadProjectNotFound {

	return &HeadProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the head project not found response
func (o *HeadProjectNotFound) WithXRequestID(xRequestID string) *HeadProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the head project not found response
func (o *HeadProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the head project not found response
func (o *HeadProjectNotFound) WithPayload(payload *models.Errors) *HeadProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the head project not found response
func (o *HeadProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HeadProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HeadProjectInternalServerErrorCode is the HTTP code returned for type HeadProjectInternalServerError
const HeadProjectInternalServerErrorCode int = 500

/*HeadProjectInternalServerError Internal server error

swagger:response headProjectInternalServerError
*/
type HeadProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewHeadProjectInternalServerError creates HeadProjectInternalServerError with default headers values
func NewHeadProjectInternalServerError() *HeadProjectInternalServerError {

	return &HeadProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the head project internal server error response
func (o *HeadProjectInternalServerError) WithXRequestID(xRequestID string) *HeadProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the head project internal server error response
func (o *HeadProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the head project internal server error response
func (o *HeadProjectInternalServerError) WithPayload(payload *models.Errors) *HeadProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the head project internal server error response
func (o *HeadProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HeadProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
