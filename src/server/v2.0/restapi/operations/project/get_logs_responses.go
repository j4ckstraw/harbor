// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetLogsOKCode is the HTTP code returned for type GetLogsOK
const GetLogsOKCode int = 200

/*GetLogsOK Success

swagger:response getLogsOK
*/
type GetLogsOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of auditlogs

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.AuditLog `json:"body,omitempty"`
}

// NewGetLogsOK creates GetLogsOK with default headers values
func NewGetLogsOK() *GetLogsOK {

	return &GetLogsOK{}
}

// WithLink adds the link to the get logs o k response
func (o *GetLogsOK) WithLink(link string) *GetLogsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the get logs o k response
func (o *GetLogsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the get logs o k response
func (o *GetLogsOK) WithXTotalCount(xTotalCount int64) *GetLogsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the get logs o k response
func (o *GetLogsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the get logs o k response
func (o *GetLogsOK) WithPayload(payload []*models.AuditLog) *GetLogsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get logs o k response
func (o *GetLogsOK) SetPayload(payload []*models.AuditLog) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.AuditLog, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLogsBadRequestCode is the HTTP code returned for type GetLogsBadRequest
const GetLogsBadRequestCode int = 400

/*GetLogsBadRequest Bad request

swagger:response getLogsBadRequest
*/
type GetLogsBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLogsBadRequest creates GetLogsBadRequest with default headers values
func NewGetLogsBadRequest() *GetLogsBadRequest {

	return &GetLogsBadRequest{}
}

// WithXRequestID adds the xRequestId to the get logs bad request response
func (o *GetLogsBadRequest) WithXRequestID(xRequestID string) *GetLogsBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get logs bad request response
func (o *GetLogsBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get logs bad request response
func (o *GetLogsBadRequest) WithPayload(payload *models.Errors) *GetLogsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get logs bad request response
func (o *GetLogsBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLogsUnauthorizedCode is the HTTP code returned for type GetLogsUnauthorized
const GetLogsUnauthorizedCode int = 401

/*GetLogsUnauthorized Unauthorized

swagger:response getLogsUnauthorized
*/
type GetLogsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLogsUnauthorized creates GetLogsUnauthorized with default headers values
func NewGetLogsUnauthorized() *GetLogsUnauthorized {

	return &GetLogsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get logs unauthorized response
func (o *GetLogsUnauthorized) WithXRequestID(xRequestID string) *GetLogsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get logs unauthorized response
func (o *GetLogsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get logs unauthorized response
func (o *GetLogsUnauthorized) WithPayload(payload *models.Errors) *GetLogsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get logs unauthorized response
func (o *GetLogsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLogsInternalServerErrorCode is the HTTP code returned for type GetLogsInternalServerError
const GetLogsInternalServerErrorCode int = 500

/*GetLogsInternalServerError Internal server error

swagger:response getLogsInternalServerError
*/
type GetLogsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLogsInternalServerError creates GetLogsInternalServerError with default headers values
func NewGetLogsInternalServerError() *GetLogsInternalServerError {

	return &GetLogsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get logs internal server error response
func (o *GetLogsInternalServerError) WithXRequestID(xRequestID string) *GetLogsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get logs internal server error response
func (o *GetLogsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get logs internal server error response
func (o *GetLogsInternalServerError) WithPayload(payload *models.Errors) *GetLogsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get logs internal server error response
func (o *GetLogsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
