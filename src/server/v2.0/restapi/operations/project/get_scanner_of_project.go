// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetScannerOfProjectHandlerFunc turns a function with the right signature into a get scanner of project handler
type GetScannerOfProjectHandlerFunc func(GetScannerOfProjectParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetScannerOfProjectHandlerFunc) Handle(params GetScannerOfProjectParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetScannerOfProjectHandler interface for that can handle valid get scanner of project params
type GetScannerOfProjectHandler interface {
	Handle(GetScannerOfProjectParams, interface{}) middleware.Responder
}

// NewGetScannerOfProject creates a new http.Handler for the get scanner of project operation
func NewGetScannerOfProject(ctx *middleware.Context, handler GetScannerOfProjectHandler) *GetScannerOfProject {
	return &GetScannerOfProject{Context: ctx, Handler: handler}
}

/*GetScannerOfProject swagger:route GET /projects/{project_name_or_id}/scanner project getScannerOfProject

Get project level scanner

Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.

*/
type GetScannerOfProject struct {
	Context *middleware.Context
	Handler GetScannerOfProjectHandler
}

func (o *GetScannerOfProject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetScannerOfProjectParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
