// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// SetScannerOfProjectOKCode is the HTTP code returned for type SetScannerOfProjectOK
const SetScannerOfProjectOKCode int = 200

/*SetScannerOfProjectOK Success

swagger:response setScannerOfProjectOK
*/
type SetScannerOfProjectOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewSetScannerOfProjectOK creates SetScannerOfProjectOK with default headers values
func NewSetScannerOfProjectOK() *SetScannerOfProjectOK {

	return &SetScannerOfProjectOK{}
}

// WithXRequestID adds the xRequestId to the set scanner of project o k response
func (o *SetScannerOfProjectOK) WithXRequestID(xRequestID string) *SetScannerOfProjectOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner of project o k response
func (o *SetScannerOfProjectOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *SetScannerOfProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetScannerOfProjectBadRequestCode is the HTTP code returned for type SetScannerOfProjectBadRequest
const SetScannerOfProjectBadRequestCode int = 400

/*SetScannerOfProjectBadRequest Bad request

swagger:response setScannerOfProjectBadRequest
*/
type SetScannerOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerOfProjectBadRequest creates SetScannerOfProjectBadRequest with default headers values
func NewSetScannerOfProjectBadRequest() *SetScannerOfProjectBadRequest {

	return &SetScannerOfProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the set scanner of project bad request response
func (o *SetScannerOfProjectBadRequest) WithXRequestID(xRequestID string) *SetScannerOfProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner of project bad request response
func (o *SetScannerOfProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner of project bad request response
func (o *SetScannerOfProjectBadRequest) WithPayload(payload *models.Errors) *SetScannerOfProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner of project bad request response
func (o *SetScannerOfProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerOfProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetScannerOfProjectUnauthorizedCode is the HTTP code returned for type SetScannerOfProjectUnauthorized
const SetScannerOfProjectUnauthorizedCode int = 401

/*SetScannerOfProjectUnauthorized Unauthorized

swagger:response setScannerOfProjectUnauthorized
*/
type SetScannerOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerOfProjectUnauthorized creates SetScannerOfProjectUnauthorized with default headers values
func NewSetScannerOfProjectUnauthorized() *SetScannerOfProjectUnauthorized {

	return &SetScannerOfProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the set scanner of project unauthorized response
func (o *SetScannerOfProjectUnauthorized) WithXRequestID(xRequestID string) *SetScannerOfProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner of project unauthorized response
func (o *SetScannerOfProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner of project unauthorized response
func (o *SetScannerOfProjectUnauthorized) WithPayload(payload *models.Errors) *SetScannerOfProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner of project unauthorized response
func (o *SetScannerOfProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerOfProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetScannerOfProjectForbiddenCode is the HTTP code returned for type SetScannerOfProjectForbidden
const SetScannerOfProjectForbiddenCode int = 403

/*SetScannerOfProjectForbidden Forbidden

swagger:response setScannerOfProjectForbidden
*/
type SetScannerOfProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerOfProjectForbidden creates SetScannerOfProjectForbidden with default headers values
func NewSetScannerOfProjectForbidden() *SetScannerOfProjectForbidden {

	return &SetScannerOfProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the set scanner of project forbidden response
func (o *SetScannerOfProjectForbidden) WithXRequestID(xRequestID string) *SetScannerOfProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner of project forbidden response
func (o *SetScannerOfProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner of project forbidden response
func (o *SetScannerOfProjectForbidden) WithPayload(payload *models.Errors) *SetScannerOfProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner of project forbidden response
func (o *SetScannerOfProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerOfProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetScannerOfProjectNotFoundCode is the HTTP code returned for type SetScannerOfProjectNotFound
const SetScannerOfProjectNotFoundCode int = 404

/*SetScannerOfProjectNotFound Not found

swagger:response setScannerOfProjectNotFound
*/
type SetScannerOfProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerOfProjectNotFound creates SetScannerOfProjectNotFound with default headers values
func NewSetScannerOfProjectNotFound() *SetScannerOfProjectNotFound {

	return &SetScannerOfProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the set scanner of project not found response
func (o *SetScannerOfProjectNotFound) WithXRequestID(xRequestID string) *SetScannerOfProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner of project not found response
func (o *SetScannerOfProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner of project not found response
func (o *SetScannerOfProjectNotFound) WithPayload(payload *models.Errors) *SetScannerOfProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner of project not found response
func (o *SetScannerOfProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerOfProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetScannerOfProjectInternalServerErrorCode is the HTTP code returned for type SetScannerOfProjectInternalServerError
const SetScannerOfProjectInternalServerErrorCode int = 500

/*SetScannerOfProjectInternalServerError Internal server error

swagger:response setScannerOfProjectInternalServerError
*/
type SetScannerOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerOfProjectInternalServerError creates SetScannerOfProjectInternalServerError with default headers values
func NewSetScannerOfProjectInternalServerError() *SetScannerOfProjectInternalServerError {

	return &SetScannerOfProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the set scanner of project internal server error response
func (o *SetScannerOfProjectInternalServerError) WithXRequestID(xRequestID string) *SetScannerOfProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner of project internal server error response
func (o *SetScannerOfProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner of project internal server error response
func (o *SetScannerOfProjectInternalServerError) WithPayload(payload *models.Errors) *SetScannerOfProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner of project internal server error response
func (o *SetScannerOfProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerOfProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
