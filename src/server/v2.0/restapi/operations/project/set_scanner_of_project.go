// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetScannerOfProjectHandlerFunc turns a function with the right signature into a set scanner of project handler
type SetScannerOfProjectHandlerFunc func(SetScannerOfProjectParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SetScannerOfProjectHandlerFunc) Handle(params SetScannerOfProjectParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SetScannerOfProjectHandler interface for that can handle valid set scanner of project params
type SetScannerOfProjectHandler interface {
	Handle(SetScannerOfProjectParams, interface{}) middleware.Responder
}

// NewSetScannerOfProject creates a new http.Handler for the set scanner of project operation
func NewSetScannerOfProject(ctx *middleware.Context, handler SetScannerOfProjectHandler) *SetScannerOfProject {
	return &SetScannerOfProject{Context: ctx, Handler: handler}
}

/*SetScannerOfProject swagger:route PUT /projects/{project_name_or_id}/scanner project setScannerOfProject

Configure scanner for the specified project

Set one of the system configured scanner registration as the indepndent scanner of the specified project.

*/
type SetScannerOfProject struct {
	Context *middleware.Context
	Handler SetScannerOfProjectHandler
}

func (o *SetScannerOfProject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetScannerOfProjectParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
