// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListProjectsOKCode is the HTTP code returned for type ListProjectsOK
const ListProjectsOKCode int = 200

/*ListProjectsOK Return all matched projects.

swagger:response listProjectsOK
*/
type ListProjectsOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of projects

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Project `json:"body,omitempty"`
}

// NewListProjectsOK creates ListProjectsOK with default headers values
func NewListProjectsOK() *ListProjectsOK {

	return &ListProjectsOK{}
}

// WithLink adds the link to the list projects o k response
func (o *ListProjectsOK) WithLink(link string) *ListProjectsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list projects o k response
func (o *ListProjectsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list projects o k response
func (o *ListProjectsOK) WithXTotalCount(xTotalCount int64) *ListProjectsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list projects o k response
func (o *ListProjectsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list projects o k response
func (o *ListProjectsOK) WithPayload(payload []*models.Project) *ListProjectsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list projects o k response
func (o *ListProjectsOK) SetPayload(payload []*models.Project) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Project, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListProjectsUnauthorizedCode is the HTTP code returned for type ListProjectsUnauthorized
const ListProjectsUnauthorizedCode int = 401

/*ListProjectsUnauthorized Unauthorized

swagger:response listProjectsUnauthorized
*/
type ListProjectsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectsUnauthorized creates ListProjectsUnauthorized with default headers values
func NewListProjectsUnauthorized() *ListProjectsUnauthorized {

	return &ListProjectsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list projects unauthorized response
func (o *ListProjectsUnauthorized) WithXRequestID(xRequestID string) *ListProjectsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list projects unauthorized response
func (o *ListProjectsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list projects unauthorized response
func (o *ListProjectsUnauthorized) WithPayload(payload *models.Errors) *ListProjectsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list projects unauthorized response
func (o *ListProjectsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectsInternalServerErrorCode is the HTTP code returned for type ListProjectsInternalServerError
const ListProjectsInternalServerErrorCode int = 500

/*ListProjectsInternalServerError Internal server error

swagger:response listProjectsInternalServerError
*/
type ListProjectsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectsInternalServerError creates ListProjectsInternalServerError with default headers values
func NewListProjectsInternalServerError() *ListProjectsInternalServerError {

	return &ListProjectsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list projects internal server error response
func (o *ListProjectsInternalServerError) WithXRequestID(xRequestID string) *ListProjectsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list projects internal server error response
func (o *ListProjectsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list projects internal server error response
func (o *ListProjectsInternalServerError) WithPayload(payload *models.Errors) *ListProjectsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list projects internal server error response
func (o *ListProjectsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
