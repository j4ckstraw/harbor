// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/artifact"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/auditlog"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/configure"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/gc"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/health"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/icon"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/immutable"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/label"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/ldap"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/member"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/oidc"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/ping"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/preheat"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/project"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/project_metadata"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/quota"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/registry"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/replication"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/repository"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/retention"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/robot"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/robotv1"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/scan"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/scan_all"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/scanner"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/search"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/statistic"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/system_cve_allowlist"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/systeminfo"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/user"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/usergroup"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/webhook"
	"github.com/goharbor/harbor/src/server/v2.0/restapi/operations/webhookjob"
)

// NewHarborAPI creates a new Harbor instance
func NewHarborAPI(spec *loads.Document) *HarborAPI {
	return &HarborAPI{
		handlers:             make(map[string]map[string]http.Handler),
		formats:              strfmt.Default,
		defaultConsumes:      "application/json",
		defaultProduces:      "application/json",
		customConsumers:      make(map[string]runtime.Consumer),
		customProducers:      make(map[string]runtime.Producer),
		operationMiddlewares: make(map[string]middleware.Builder),
		PreServerShutdown:    func() {},
		ServerShutdown:       func() {},
		spec:                 spec,
		useSwaggerUI:         false,
		ServeError:           errors.ServeError,
		BasicAuthenticator:   security.BasicAuth,
		APIKeyAuthenticator:  security.APIKeyAuth,
		BearerAuthenticator:  security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),
		TxtProducer:  runtime.TextProducer(),

		ArtifactCopyArtifactHandler: artifact.CopyArtifactHandlerFunc(func(params artifact.CopyArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.CopyArtifact has not yet been implemented")
		}),
		ImmutableCreateImmuRuleHandler: immutable.CreateImmuRuleHandlerFunc(func(params immutable.CreateImmuRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation immutable.CreateImmuRule has not yet been implemented")
		}),
		PreheatCreateInstanceHandler: preheat.CreateInstanceHandlerFunc(func(params preheat.CreateInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.CreateInstance has not yet been implemented")
		}),
		LabelCreateLabelHandler: label.CreateLabelHandlerFunc(func(params label.CreateLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation label.CreateLabel has not yet been implemented")
		}),
		PreheatCreatePolicyHandler: preheat.CreatePolicyHandlerFunc(func(params preheat.CreatePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.CreatePolicy has not yet been implemented")
		}),
		RobotCreateRobotHandler: robot.CreateRobotHandlerFunc(func(params robot.CreateRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robot.CreateRobot has not yet been implemented")
		}),
		Robotv1CreateRobotV1Handler: robotv1.CreateRobotV1HandlerFunc(func(params robotv1.CreateRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robotv1.CreateRobotV1 has not yet been implemented")
		}),
		WebhookCreateWebhookPolicyOfProjectHandler: webhook.CreateWebhookPolicyOfProjectHandlerFunc(func(params webhook.CreateWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.CreateWebhookPolicyOfProject has not yet been implemented")
		}),
		ImmutableDeleteImmuRuleHandler: immutable.DeleteImmuRuleHandlerFunc(func(params immutable.DeleteImmuRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation immutable.DeleteImmuRule has not yet been implemented")
		}),
		PreheatDeleteInstanceHandler: preheat.DeleteInstanceHandlerFunc(func(params preheat.DeleteInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.DeleteInstance has not yet been implemented")
		}),
		LabelDeleteLabelHandler: label.DeleteLabelHandlerFunc(func(params label.DeleteLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation label.DeleteLabel has not yet been implemented")
		}),
		PreheatDeletePolicyHandler: preheat.DeletePolicyHandlerFunc(func(params preheat.DeletePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.DeletePolicy has not yet been implemented")
		}),
		RobotDeleteRobotHandler: robot.DeleteRobotHandlerFunc(func(params robot.DeleteRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robot.DeleteRobot has not yet been implemented")
		}),
		Robotv1DeleteRobotV1Handler: robotv1.DeleteRobotV1HandlerFunc(func(params robotv1.DeleteRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robotv1.DeleteRobotV1 has not yet been implemented")
		}),
		WebhookDeleteWebhookPolicyOfProjectHandler: webhook.DeleteWebhookPolicyOfProjectHandlerFunc(func(params webhook.DeleteWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.DeleteWebhookPolicyOfProject has not yet been implemented")
		}),
		PreheatGetExecutionHandler: preheat.GetExecutionHandlerFunc(func(params preheat.GetExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.GetExecution has not yet been implemented")
		}),
		PreheatGetInstanceHandler: preheat.GetInstanceHandlerFunc(func(params preheat.GetInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.GetInstance has not yet been implemented")
		}),
		LabelGetLabelByIDHandler: label.GetLabelByIDHandlerFunc(func(params label.GetLabelByIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation label.GetLabelByID has not yet been implemented")
		}),
		PreheatGetPolicyHandler: preheat.GetPolicyHandlerFunc(func(params preheat.GetPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.GetPolicy has not yet been implemented")
		}),
		PreheatGetPreheatLogHandler: preheat.GetPreheatLogHandlerFunc(func(params preheat.GetPreheatLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.GetPreheatLog has not yet been implemented")
		}),
		RobotGetRobotByIDHandler: robot.GetRobotByIDHandlerFunc(func(params robot.GetRobotByIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robot.GetRobotByID has not yet been implemented")
		}),
		Robotv1GetRobotByIDV1Handler: robotv1.GetRobotByIDV1HandlerFunc(func(params robotv1.GetRobotByIDV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robotv1.GetRobotByIDV1 has not yet been implemented")
		}),
		WebhookGetSupportedEventTypesHandler: webhook.GetSupportedEventTypesHandlerFunc(func(params webhook.GetSupportedEventTypesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.GetSupportedEventTypes has not yet been implemented")
		}),
		WebhookGetWebhookPolicyOfProjectHandler: webhook.GetWebhookPolicyOfProjectHandlerFunc(func(params webhook.GetWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.GetWebhookPolicyOfProject has not yet been implemented")
		}),
		WebhookLastTriggerHandler: webhook.LastTriggerHandlerFunc(func(params webhook.LastTriggerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.LastTrigger has not yet been implemented")
		}),
		PreheatListExecutionsHandler: preheat.ListExecutionsHandlerFunc(func(params preheat.ListExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ListExecutions has not yet been implemented")
		}),
		ImmutableListImmuRulesHandler: immutable.ListImmuRulesHandlerFunc(func(params immutable.ListImmuRulesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation immutable.ListImmuRules has not yet been implemented")
		}),
		PreheatListInstancesHandler: preheat.ListInstancesHandlerFunc(func(params preheat.ListInstancesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ListInstances has not yet been implemented")
		}),
		LabelListLabelsHandler: label.ListLabelsHandlerFunc(func(params label.ListLabelsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation label.ListLabels has not yet been implemented")
		}),
		PreheatListPoliciesHandler: preheat.ListPoliciesHandlerFunc(func(params preheat.ListPoliciesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ListPolicies has not yet been implemented")
		}),
		PreheatListProvidersHandler: preheat.ListProvidersHandlerFunc(func(params preheat.ListProvidersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ListProviders has not yet been implemented")
		}),
		PreheatListProvidersUnderProjectHandler: preheat.ListProvidersUnderProjectHandlerFunc(func(params preheat.ListProvidersUnderProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ListProvidersUnderProject has not yet been implemented")
		}),
		RobotListRobotHandler: robot.ListRobotHandlerFunc(func(params robot.ListRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robot.ListRobot has not yet been implemented")
		}),
		Robotv1ListRobotV1Handler: robotv1.ListRobotV1HandlerFunc(func(params robotv1.ListRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robotv1.ListRobotV1 has not yet been implemented")
		}),
		PreheatListTasksHandler: preheat.ListTasksHandlerFunc(func(params preheat.ListTasksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ListTasks has not yet been implemented")
		}),
		WebhookjobListWebhookJobsHandler: webhookjob.ListWebhookJobsHandlerFunc(func(params webhookjob.ListWebhookJobsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhookjob.ListWebhookJobs has not yet been implemented")
		}),
		WebhookListWebhookPoliciesOfProjectHandler: webhook.ListWebhookPoliciesOfProjectHandlerFunc(func(params webhook.ListWebhookPoliciesOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.ListWebhookPoliciesOfProject has not yet been implemented")
		}),
		PreheatManualPreheatHandler: preheat.ManualPreheatHandlerFunc(func(params preheat.ManualPreheatParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.ManualPreheat has not yet been implemented")
		}),
		PreheatPingInstancesHandler: preheat.PingInstancesHandlerFunc(func(params preheat.PingInstancesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.PingInstances has not yet been implemented")
		}),
		RobotRefreshSecHandler: robot.RefreshSecHandlerFunc(func(params robot.RefreshSecParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robot.RefreshSec has not yet been implemented")
		}),
		PreheatStopExecutionHandler: preheat.StopExecutionHandlerFunc(func(params preheat.StopExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.StopExecution has not yet been implemented")
		}),
		ImmutableUpdateImmuRuleHandler: immutable.UpdateImmuRuleHandlerFunc(func(params immutable.UpdateImmuRuleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation immutable.UpdateImmuRule has not yet been implemented")
		}),
		PreheatUpdateInstanceHandler: preheat.UpdateInstanceHandlerFunc(func(params preheat.UpdateInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.UpdateInstance has not yet been implemented")
		}),
		LabelUpdateLabelHandler: label.UpdateLabelHandlerFunc(func(params label.UpdateLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation label.UpdateLabel has not yet been implemented")
		}),
		PreheatUpdatePolicyHandler: preheat.UpdatePolicyHandlerFunc(func(params preheat.UpdatePolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation preheat.UpdatePolicy has not yet been implemented")
		}),
		RobotUpdateRobotHandler: robot.UpdateRobotHandlerFunc(func(params robot.UpdateRobotParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robot.UpdateRobot has not yet been implemented")
		}),
		Robotv1UpdateRobotV1Handler: robotv1.UpdateRobotV1HandlerFunc(func(params robotv1.UpdateRobotV1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation robotv1.UpdateRobotV1 has not yet been implemented")
		}),
		WebhookUpdateWebhookPolicyOfProjectHandler: webhook.UpdateWebhookPolicyOfProjectHandlerFunc(func(params webhook.UpdateWebhookPolicyOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.UpdateWebhookPolicyOfProject has not yet been implemented")
		}),
		ArtifactAddLabelHandler: artifact.AddLabelHandlerFunc(func(params artifact.AddLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.AddLabel has not yet been implemented")
		}),
		ProjectMetadataAddProjectMetadatasHandler: project_metadata.AddProjectMetadatasHandlerFunc(func(params project_metadata.AddProjectMetadatasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_metadata.AddProjectMetadatas has not yet been implemented")
		}),
		GCCreateGCScheduleHandler: gc.CreateGCScheduleHandlerFunc(func(params gc.CreateGCScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation gc.CreateGCSchedule has not yet been implemented")
		}),
		ProjectCreateProjectHandler: project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.CreateProject has not yet been implemented")
		}),
		MemberCreateProjectMemberHandler: member.CreateProjectMemberHandlerFunc(func(params member.CreateProjectMemberParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation member.CreateProjectMember has not yet been implemented")
		}),
		RegistryCreateRegistryHandler: registry.CreateRegistryHandlerFunc(func(params registry.CreateRegistryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.CreateRegistry has not yet been implemented")
		}),
		ReplicationCreateReplicationPolicyHandler: replication.CreateReplicationPolicyHandlerFunc(func(params replication.CreateReplicationPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.CreateReplicationPolicy has not yet been implemented")
		}),
		RetentionCreateRetentionHandler: retention.CreateRetentionHandlerFunc(func(params retention.CreateRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.CreateRetention has not yet been implemented")
		}),
		ScanAllCreateScanAllScheduleHandler: scan_all.CreateScanAllScheduleHandlerFunc(func(params scan_all.CreateScanAllScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan_all.CreateScanAllSchedule has not yet been implemented")
		}),
		ScannerCreateScannerHandler: scanner.CreateScannerHandlerFunc(func(params scanner.CreateScannerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.CreateScanner has not yet been implemented")
		}),
		ArtifactCreateTagHandler: artifact.CreateTagHandlerFunc(func(params artifact.CreateTagParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.CreateTag has not yet been implemented")
		}),
		UserCreateUserHandler: user.CreateUserHandlerFunc(func(params user.CreateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateUser has not yet been implemented")
		}),
		UsergroupCreateUserGroupHandler: usergroup.CreateUserGroupHandlerFunc(func(params usergroup.CreateUserGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usergroup.CreateUserGroup has not yet been implemented")
		}),
		ArtifactDeleteArtifactHandler: artifact.DeleteArtifactHandlerFunc(func(params artifact.DeleteArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.DeleteArtifact has not yet been implemented")
		}),
		ProjectDeleteProjectHandler: project.DeleteProjectHandlerFunc(func(params project.DeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.DeleteProject has not yet been implemented")
		}),
		MemberDeleteProjectMemberHandler: member.DeleteProjectMemberHandlerFunc(func(params member.DeleteProjectMemberParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation member.DeleteProjectMember has not yet been implemented")
		}),
		ProjectMetadataDeleteProjectMetadataHandler: project_metadata.DeleteProjectMetadataHandlerFunc(func(params project_metadata.DeleteProjectMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_metadata.DeleteProjectMetadata has not yet been implemented")
		}),
		RegistryDeleteRegistryHandler: registry.DeleteRegistryHandlerFunc(func(params registry.DeleteRegistryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.DeleteRegistry has not yet been implemented")
		}),
		ReplicationDeleteReplicationPolicyHandler: replication.DeleteReplicationPolicyHandlerFunc(func(params replication.DeleteReplicationPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.DeleteReplicationPolicy has not yet been implemented")
		}),
		RepositoryDeleteRepositoryHandler: repository.DeleteRepositoryHandlerFunc(func(params repository.DeleteRepositoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation repository.DeleteRepository has not yet been implemented")
		}),
		RetentionDeleteRetentionHandler: retention.DeleteRetentionHandlerFunc(func(params retention.DeleteRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.DeleteRetention has not yet been implemented")
		}),
		ScannerDeleteScannerHandler: scanner.DeleteScannerHandlerFunc(func(params scanner.DeleteScannerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.DeleteScanner has not yet been implemented")
		}),
		ArtifactDeleteTagHandler: artifact.DeleteTagHandlerFunc(func(params artifact.DeleteTagParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.DeleteTag has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		UsergroupDeleteUserGroupHandler: usergroup.DeleteUserGroupHandlerFunc(func(params usergroup.DeleteUserGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usergroup.DeleteUserGroup has not yet been implemented")
		}),
		ArtifactGetAdditionHandler: artifact.GetAdditionHandlerFunc(func(params artifact.GetAdditionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.GetAddition has not yet been implemented")
		}),
		ArtifactGetArtifactHandler: artifact.GetArtifactHandlerFunc(func(params artifact.GetArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.GetArtifact has not yet been implemented")
		}),
		SysteminfoGetCertHandler: systeminfo.GetCertHandlerFunc(func(params systeminfo.GetCertParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation systeminfo.GetCert has not yet been implemented")
		}),
		ConfigureGetConfigurationsHandler: configure.GetConfigurationsHandlerFunc(func(params configure.GetConfigurationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation configure.GetConfigurations has not yet been implemented")
		}),
		UserGetCurrentUserInfoHandler: user.GetCurrentUserInfoHandlerFunc(func(params user.GetCurrentUserInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetCurrentUserInfo has not yet been implemented")
		}),
		UserGetCurrentUserPermissionsHandler: user.GetCurrentUserPermissionsHandlerFunc(func(params user.GetCurrentUserPermissionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetCurrentUserPermissions has not yet been implemented")
		}),
		GCGetGCHandler: gc.GetGCHandlerFunc(func(params gc.GetGCParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation gc.GetGC has not yet been implemented")
		}),
		GCGetGCHistoryHandler: gc.GetGCHistoryHandlerFunc(func(params gc.GetGCHistoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation gc.GetGCHistory has not yet been implemented")
		}),
		GCGetGCLogHandler: gc.GetGCLogHandlerFunc(func(params gc.GetGCLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation gc.GetGCLog has not yet been implemented")
		}),
		GCGetGCScheduleHandler: gc.GetGCScheduleHandlerFunc(func(params gc.GetGCScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation gc.GetGCSchedule has not yet been implemented")
		}),
		HealthGetHealthHandler: health.GetHealthHandlerFunc(func(params health.GetHealthParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation health.GetHealth has not yet been implemented")
		}),
		IconGetIconHandler: icon.GetIconHandlerFunc(func(params icon.GetIconParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation icon.GetIcon has not yet been implemented")
		}),
		ConfigureGetInternalconfigHandler: configure.GetInternalconfigHandlerFunc(func(params configure.GetInternalconfigParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation configure.GetInternalconfig has not yet been implemented")
		}),
		ScanAllGetLatestScanAllMetricsHandler: scan_all.GetLatestScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScanAllMetricsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan_all.GetLatestScanAllMetrics has not yet been implemented")
		}),
		ScanAllGetLatestScheduledScanAllMetricsHandler: scan_all.GetLatestScheduledScanAllMetricsHandlerFunc(func(params scan_all.GetLatestScheduledScanAllMetricsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan_all.GetLatestScheduledScanAllMetrics has not yet been implemented")
		}),
		ProjectGetLogsHandler: project.GetLogsHandlerFunc(func(params project.GetLogsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetLogs has not yet been implemented")
		}),
		PingGetPingHandler: ping.GetPingHandlerFunc(func(params ping.GetPingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ping.GetPing has not yet been implemented")
		}),
		ProjectGetProjectHandler: project.GetProjectHandlerFunc(func(params project.GetProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProject has not yet been implemented")
		}),
		ProjectGetProjectDeletableHandler: project.GetProjectDeletableHandlerFunc(func(params project.GetProjectDeletableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjectDeletable has not yet been implemented")
		}),
		MemberGetProjectMemberHandler: member.GetProjectMemberHandlerFunc(func(params member.GetProjectMemberParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation member.GetProjectMember has not yet been implemented")
		}),
		ProjectMetadataGetProjectMetadataHandler: project_metadata.GetProjectMetadataHandlerFunc(func(params project_metadata.GetProjectMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_metadata.GetProjectMetadata has not yet been implemented")
		}),
		ProjectGetProjectSummaryHandler: project.GetProjectSummaryHandlerFunc(func(params project.GetProjectSummaryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjectSummary has not yet been implemented")
		}),
		QuotaGetQuotaHandler: quota.GetQuotaHandlerFunc(func(params quota.GetQuotaParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation quota.GetQuota has not yet been implemented")
		}),
		RegistryGetRegistryHandler: registry.GetRegistryHandlerFunc(func(params registry.GetRegistryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.GetRegistry has not yet been implemented")
		}),
		RegistryGetRegistryInfoHandler: registry.GetRegistryInfoHandlerFunc(func(params registry.GetRegistryInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.GetRegistryInfo has not yet been implemented")
		}),
		RetentionGetRentenitionMetadataHandler: retention.GetRentenitionMetadataHandlerFunc(func(params retention.GetRentenitionMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.GetRentenitionMetadata has not yet been implemented")
		}),
		ReplicationGetReplicationExecutionHandler: replication.GetReplicationExecutionHandlerFunc(func(params replication.GetReplicationExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.GetReplicationExecution has not yet been implemented")
		}),
		ReplicationGetReplicationLogHandler: replication.GetReplicationLogHandlerFunc(func(params replication.GetReplicationLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.GetReplicationLog has not yet been implemented")
		}),
		ReplicationGetReplicationPolicyHandler: replication.GetReplicationPolicyHandlerFunc(func(params replication.GetReplicationPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.GetReplicationPolicy has not yet been implemented")
		}),
		ScanGetReportLogHandler: scan.GetReportLogHandlerFunc(func(params scan.GetReportLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan.GetReportLog has not yet been implemented")
		}),
		RepositoryGetRepositoryHandler: repository.GetRepositoryHandlerFunc(func(params repository.GetRepositoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation repository.GetRepository has not yet been implemented")
		}),
		RetentionGetRetentionHandler: retention.GetRetentionHandlerFunc(func(params retention.GetRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.GetRetention has not yet been implemented")
		}),
		RetentionGetRetentionTaskLogHandler: retention.GetRetentionTaskLogHandlerFunc(func(params retention.GetRetentionTaskLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.GetRetentionTaskLog has not yet been implemented")
		}),
		ScanAllGetScanAllScheduleHandler: scan_all.GetScanAllScheduleHandlerFunc(func(params scan_all.GetScanAllScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan_all.GetScanAllSchedule has not yet been implemented")
		}),
		ScannerGetScannerHandler: scanner.GetScannerHandlerFunc(func(params scanner.GetScannerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.GetScanner has not yet been implemented")
		}),
		ScannerGetScannerMetadataHandler: scanner.GetScannerMetadataHandlerFunc(func(params scanner.GetScannerMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.GetScannerMetadata has not yet been implemented")
		}),
		ProjectGetScannerOfProjectHandler: project.GetScannerOfProjectHandlerFunc(func(params project.GetScannerOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetScannerOfProject has not yet been implemented")
		}),
		StatisticGetStatisticHandler: statistic.GetStatisticHandlerFunc(func(params statistic.GetStatisticParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation statistic.GetStatistic has not yet been implemented")
		}),
		SystemCVEAllowlistGetSystemCVEAllowlistHandler: system_cve_allowlist.GetSystemCVEAllowlistHandlerFunc(func(params system_cve_allowlist.GetSystemCVEAllowlistParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation system_cve_allowlist.GetSystemCVEAllowlist has not yet been implemented")
		}),
		SysteminfoGetSystemInfoHandler: systeminfo.GetSystemInfoHandlerFunc(func(params systeminfo.GetSystemInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation systeminfo.GetSystemInfo has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		UsergroupGetUserGroupHandler: usergroup.GetUserGroupHandlerFunc(func(params usergroup.GetUserGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usergroup.GetUserGroup has not yet been implemented")
		}),
		SysteminfoGetVolumesHandler: systeminfo.GetVolumesHandlerFunc(func(params systeminfo.GetVolumesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation systeminfo.GetVolumes has not yet been implemented")
		}),
		ArtifactGetVulnerabilitiesAdditionHandler: artifact.GetVulnerabilitiesAdditionHandlerFunc(func(params artifact.GetVulnerabilitiesAdditionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.GetVulnerabilitiesAddition has not yet been implemented")
		}),
		ProjectHeadProjectHandler: project.HeadProjectHandlerFunc(func(params project.HeadProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.HeadProject has not yet been implemented")
		}),
		LdapImportLdapUserHandler: ldap.ImportLdapUserHandlerFunc(func(params ldap.ImportLdapUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ldap.ImportLdapUser has not yet been implemented")
		}),
		RepositoryListAllRepositoriesHandler: repository.ListAllRepositoriesHandlerFunc(func(params repository.ListAllRepositoriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation repository.ListAllRepositories has not yet been implemented")
		}),
		ArtifactListArtifactsHandler: artifact.ListArtifactsHandlerFunc(func(params artifact.ListArtifactsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.ListArtifacts has not yet been implemented")
		}),
		AuditlogListAuditLogsHandler: auditlog.ListAuditLogsHandlerFunc(func(params auditlog.ListAuditLogsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation auditlog.ListAuditLogs has not yet been implemented")
		}),
		MemberListProjectMembersHandler: member.ListProjectMembersHandlerFunc(func(params member.ListProjectMembersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation member.ListProjectMembers has not yet been implemented")
		}),
		ProjectMetadataListProjectMetadatasHandler: project_metadata.ListProjectMetadatasHandlerFunc(func(params project_metadata.ListProjectMetadatasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_metadata.ListProjectMetadatas has not yet been implemented")
		}),
		ProjectListProjectsHandler: project.ListProjectsHandlerFunc(func(params project.ListProjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.ListProjects has not yet been implemented")
		}),
		QuotaListQuotasHandler: quota.ListQuotasHandlerFunc(func(params quota.ListQuotasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation quota.ListQuotas has not yet been implemented")
		}),
		RegistryListRegistriesHandler: registry.ListRegistriesHandlerFunc(func(params registry.ListRegistriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.ListRegistries has not yet been implemented")
		}),
		RegistryListRegistryProviderInfosHandler: registry.ListRegistryProviderInfosHandlerFunc(func(params registry.ListRegistryProviderInfosParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.ListRegistryProviderInfos has not yet been implemented")
		}),
		RegistryListRegistryProviderTypesHandler: registry.ListRegistryProviderTypesHandlerFunc(func(params registry.ListRegistryProviderTypesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.ListRegistryProviderTypes has not yet been implemented")
		}),
		ReplicationListReplicationExecutionsHandler: replication.ListReplicationExecutionsHandlerFunc(func(params replication.ListReplicationExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.ListReplicationExecutions has not yet been implemented")
		}),
		ReplicationListReplicationPoliciesHandler: replication.ListReplicationPoliciesHandlerFunc(func(params replication.ListReplicationPoliciesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.ListReplicationPolicies has not yet been implemented")
		}),
		ReplicationListReplicationTasksHandler: replication.ListReplicationTasksHandlerFunc(func(params replication.ListReplicationTasksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.ListReplicationTasks has not yet been implemented")
		}),
		RepositoryListRepositoriesHandler: repository.ListRepositoriesHandlerFunc(func(params repository.ListRepositoriesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation repository.ListRepositories has not yet been implemented")
		}),
		RetentionListRetentionExecutionsHandler: retention.ListRetentionExecutionsHandlerFunc(func(params retention.ListRetentionExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.ListRetentionExecutions has not yet been implemented")
		}),
		RetentionListRetentionTasksHandler: retention.ListRetentionTasksHandlerFunc(func(params retention.ListRetentionTasksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.ListRetentionTasks has not yet been implemented")
		}),
		ProjectListScannerCandidatesOfProjectHandler: project.ListScannerCandidatesOfProjectHandlerFunc(func(params project.ListScannerCandidatesOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.ListScannerCandidatesOfProject has not yet been implemented")
		}),
		ScannerListScannersHandler: scanner.ListScannersHandlerFunc(func(params scanner.ListScannersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.ListScanners has not yet been implemented")
		}),
		ArtifactListTagsHandler: artifact.ListTagsHandlerFunc(func(params artifact.ListTagsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.ListTags has not yet been implemented")
		}),
		UsergroupListUserGroupsHandler: usergroup.ListUserGroupsHandlerFunc(func(params usergroup.ListUserGroupsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usergroup.ListUserGroups has not yet been implemented")
		}),
		UserListUsersHandler: user.ListUsersHandlerFunc(func(params user.ListUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.ListUsers has not yet been implemented")
		}),
		RetentionOperateRetentionExecutionHandler: retention.OperateRetentionExecutionHandlerFunc(func(params retention.OperateRetentionExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.OperateRetentionExecution has not yet been implemented")
		}),
		LdapPingLdapHandler: ldap.PingLdapHandlerFunc(func(params ldap.PingLdapParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ldap.PingLdap has not yet been implemented")
		}),
		OIDCPingOIDCHandler: oidc.PingOIDCHandlerFunc(func(params oidc.PingOIDCParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation oidc.PingOIDC has not yet been implemented")
		}),
		RegistryPingRegistryHandler: registry.PingRegistryHandlerFunc(func(params registry.PingRegistryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.PingRegistry has not yet been implemented")
		}),
		ScannerPingScannerHandler: scanner.PingScannerHandlerFunc(func(params scanner.PingScannerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.PingScanner has not yet been implemented")
		}),
		SystemCVEAllowlistPutSystemCVEAllowlistHandler: system_cve_allowlist.PutSystemCVEAllowlistHandlerFunc(func(params system_cve_allowlist.PutSystemCVEAllowlistParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation system_cve_allowlist.PutSystemCVEAllowlist has not yet been implemented")
		}),
		ArtifactRemoveLabelHandler: artifact.RemoveLabelHandlerFunc(func(params artifact.RemoveLabelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artifact.RemoveLabel has not yet been implemented")
		}),
		ScanScanArtifactHandler: scan.ScanArtifactHandlerFunc(func(params scan.ScanArtifactParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan.ScanArtifact has not yet been implemented")
		}),
		SearchSearchHandler: search.SearchHandlerFunc(func(params search.SearchParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation search.Search has not yet been implemented")
		}),
		LdapSearchLdapGroupHandler: ldap.SearchLdapGroupHandlerFunc(func(params ldap.SearchLdapGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ldap.SearchLdapGroup has not yet been implemented")
		}),
		LdapSearchLdapUserHandler: ldap.SearchLdapUserHandlerFunc(func(params ldap.SearchLdapUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ldap.SearchLdapUser has not yet been implemented")
		}),
		UserSearchUsersHandler: user.SearchUsersHandlerFunc(func(params user.SearchUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.SearchUsers has not yet been implemented")
		}),
		UserSetCliSecretHandler: user.SetCliSecretHandlerFunc(func(params user.SetCliSecretParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.SetCliSecret has not yet been implemented")
		}),
		ScannerSetScannerAsDefaultHandler: scanner.SetScannerAsDefaultHandlerFunc(func(params scanner.SetScannerAsDefaultParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.SetScannerAsDefault has not yet been implemented")
		}),
		ProjectSetScannerOfProjectHandler: project.SetScannerOfProjectHandlerFunc(func(params project.SetScannerOfProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.SetScannerOfProject has not yet been implemented")
		}),
		UserSetUserSysAdminHandler: user.SetUserSysAdminHandlerFunc(func(params user.SetUserSysAdminParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.SetUserSysAdmin has not yet been implemented")
		}),
		ReplicationStartReplicationHandler: replication.StartReplicationHandlerFunc(func(params replication.StartReplicationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.StartReplication has not yet been implemented")
		}),
		ReplicationStopReplicationHandler: replication.StopReplicationHandlerFunc(func(params replication.StopReplicationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.StopReplication has not yet been implemented")
		}),
		RetentionTriggerRetentionExecutionHandler: retention.TriggerRetentionExecutionHandlerFunc(func(params retention.TriggerRetentionExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.TriggerRetentionExecution has not yet been implemented")
		}),
		ConfigureUpdateConfigurationsHandler: configure.UpdateConfigurationsHandlerFunc(func(params configure.UpdateConfigurationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation configure.UpdateConfigurations has not yet been implemented")
		}),
		GCUpdateGCScheduleHandler: gc.UpdateGCScheduleHandlerFunc(func(params gc.UpdateGCScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation gc.UpdateGCSchedule has not yet been implemented")
		}),
		ProjectUpdateProjectHandler: project.UpdateProjectHandlerFunc(func(params project.UpdateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.UpdateProject has not yet been implemented")
		}),
		MemberUpdateProjectMemberHandler: member.UpdateProjectMemberHandlerFunc(func(params member.UpdateProjectMemberParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation member.UpdateProjectMember has not yet been implemented")
		}),
		ProjectMetadataUpdateProjectMetadataHandler: project_metadata.UpdateProjectMetadataHandlerFunc(func(params project_metadata.UpdateProjectMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_metadata.UpdateProjectMetadata has not yet been implemented")
		}),
		QuotaUpdateQuotaHandler: quota.UpdateQuotaHandlerFunc(func(params quota.UpdateQuotaParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation quota.UpdateQuota has not yet been implemented")
		}),
		RegistryUpdateRegistryHandler: registry.UpdateRegistryHandlerFunc(func(params registry.UpdateRegistryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation registry.UpdateRegistry has not yet been implemented")
		}),
		ReplicationUpdateReplicationPolicyHandler: replication.UpdateReplicationPolicyHandlerFunc(func(params replication.UpdateReplicationPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation replication.UpdateReplicationPolicy has not yet been implemented")
		}),
		RepositoryUpdateRepositoryHandler: repository.UpdateRepositoryHandlerFunc(func(params repository.UpdateRepositoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation repository.UpdateRepository has not yet been implemented")
		}),
		RetentionUpdateRetentionHandler: retention.UpdateRetentionHandlerFunc(func(params retention.UpdateRetentionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation retention.UpdateRetention has not yet been implemented")
		}),
		ScanAllUpdateScanAllScheduleHandler: scan_all.UpdateScanAllScheduleHandlerFunc(func(params scan_all.UpdateScanAllScheduleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scan_all.UpdateScanAllSchedule has not yet been implemented")
		}),
		ScannerUpdateScannerHandler: scanner.UpdateScannerHandlerFunc(func(params scanner.UpdateScannerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation scanner.UpdateScanner has not yet been implemented")
		}),
		UsergroupUpdateUserGroupHandler: usergroup.UpdateUserGroupHandlerFunc(func(params usergroup.UpdateUserGroupParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usergroup.UpdateUserGroup has not yet been implemented")
		}),
		UserUpdateUserPasswordHandler: user.UpdateUserPasswordHandlerFunc(func(params user.UpdateUserPasswordParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUserPassword has not yet been implemented")
		}),
		UserUpdateUserProfileHandler: user.UpdateUserProfileHandlerFunc(func(params user.UpdateUserProfileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUserProfile has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (basic) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*HarborAPI These APIs provide services for manipulating Harbor project. */
type HarborAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// operationMiddlewares middleware for operations
	operationMiddlewares map[string]middleware.Builder

	// BeforePrepare is called before the Prepare of the operation
	BeforePrepare func(context.Context, string, interface{}) middleware.Responder

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// BasicAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ArtifactCopyArtifactHandler sets the operation handler for the copy artifact operation
	ArtifactCopyArtifactHandler artifact.CopyArtifactHandler
	// ImmutableCreateImmuRuleHandler sets the operation handler for the create immu rule operation
	ImmutableCreateImmuRuleHandler immutable.CreateImmuRuleHandler
	// PreheatCreateInstanceHandler sets the operation handler for the create instance operation
	PreheatCreateInstanceHandler preheat.CreateInstanceHandler
	// LabelCreateLabelHandler sets the operation handler for the create label operation
	LabelCreateLabelHandler label.CreateLabelHandler
	// PreheatCreatePolicyHandler sets the operation handler for the create policy operation
	PreheatCreatePolicyHandler preheat.CreatePolicyHandler
	// RobotCreateRobotHandler sets the operation handler for the create robot operation
	RobotCreateRobotHandler robot.CreateRobotHandler
	// Robotv1CreateRobotV1Handler sets the operation handler for the create robot v1 operation
	Robotv1CreateRobotV1Handler robotv1.CreateRobotV1Handler
	// WebhookCreateWebhookPolicyOfProjectHandler sets the operation handler for the create webhook policy of project operation
	WebhookCreateWebhookPolicyOfProjectHandler webhook.CreateWebhookPolicyOfProjectHandler
	// ImmutableDeleteImmuRuleHandler sets the operation handler for the delete immu rule operation
	ImmutableDeleteImmuRuleHandler immutable.DeleteImmuRuleHandler
	// PreheatDeleteInstanceHandler sets the operation handler for the delete instance operation
	PreheatDeleteInstanceHandler preheat.DeleteInstanceHandler
	// LabelDeleteLabelHandler sets the operation handler for the delete label operation
	LabelDeleteLabelHandler label.DeleteLabelHandler
	// PreheatDeletePolicyHandler sets the operation handler for the delete policy operation
	PreheatDeletePolicyHandler preheat.DeletePolicyHandler
	// RobotDeleteRobotHandler sets the operation handler for the delete robot operation
	RobotDeleteRobotHandler robot.DeleteRobotHandler
	// Robotv1DeleteRobotV1Handler sets the operation handler for the delete robot v1 operation
	Robotv1DeleteRobotV1Handler robotv1.DeleteRobotV1Handler
	// WebhookDeleteWebhookPolicyOfProjectHandler sets the operation handler for the delete webhook policy of project operation
	WebhookDeleteWebhookPolicyOfProjectHandler webhook.DeleteWebhookPolicyOfProjectHandler
	// PreheatGetExecutionHandler sets the operation handler for the get execution operation
	PreheatGetExecutionHandler preheat.GetExecutionHandler
	// PreheatGetInstanceHandler sets the operation handler for the get instance operation
	PreheatGetInstanceHandler preheat.GetInstanceHandler
	// LabelGetLabelByIDHandler sets the operation handler for the get label by ID operation
	LabelGetLabelByIDHandler label.GetLabelByIDHandler
	// PreheatGetPolicyHandler sets the operation handler for the get policy operation
	PreheatGetPolicyHandler preheat.GetPolicyHandler
	// PreheatGetPreheatLogHandler sets the operation handler for the get preheat log operation
	PreheatGetPreheatLogHandler preheat.GetPreheatLogHandler
	// RobotGetRobotByIDHandler sets the operation handler for the get robot by ID operation
	RobotGetRobotByIDHandler robot.GetRobotByIDHandler
	// Robotv1GetRobotByIDV1Handler sets the operation handler for the get robot by ID v1 operation
	Robotv1GetRobotByIDV1Handler robotv1.GetRobotByIDV1Handler
	// WebhookGetSupportedEventTypesHandler sets the operation handler for the get supported event types operation
	WebhookGetSupportedEventTypesHandler webhook.GetSupportedEventTypesHandler
	// WebhookGetWebhookPolicyOfProjectHandler sets the operation handler for the get webhook policy of project operation
	WebhookGetWebhookPolicyOfProjectHandler webhook.GetWebhookPolicyOfProjectHandler
	// WebhookLastTriggerHandler sets the operation handler for the last trigger operation
	WebhookLastTriggerHandler webhook.LastTriggerHandler
	// PreheatListExecutionsHandler sets the operation handler for the list executions operation
	PreheatListExecutionsHandler preheat.ListExecutionsHandler
	// ImmutableListImmuRulesHandler sets the operation handler for the list immu rules operation
	ImmutableListImmuRulesHandler immutable.ListImmuRulesHandler
	// PreheatListInstancesHandler sets the operation handler for the list instances operation
	PreheatListInstancesHandler preheat.ListInstancesHandler
	// LabelListLabelsHandler sets the operation handler for the list labels operation
	LabelListLabelsHandler label.ListLabelsHandler
	// PreheatListPoliciesHandler sets the operation handler for the list policies operation
	PreheatListPoliciesHandler preheat.ListPoliciesHandler
	// PreheatListProvidersHandler sets the operation handler for the list providers operation
	PreheatListProvidersHandler preheat.ListProvidersHandler
	// PreheatListProvidersUnderProjectHandler sets the operation handler for the list providers under project operation
	PreheatListProvidersUnderProjectHandler preheat.ListProvidersUnderProjectHandler
	// RobotListRobotHandler sets the operation handler for the list robot operation
	RobotListRobotHandler robot.ListRobotHandler
	// Robotv1ListRobotV1Handler sets the operation handler for the list robot v1 operation
	Robotv1ListRobotV1Handler robotv1.ListRobotV1Handler
	// PreheatListTasksHandler sets the operation handler for the list tasks operation
	PreheatListTasksHandler preheat.ListTasksHandler
	// WebhookjobListWebhookJobsHandler sets the operation handler for the list webhook jobs operation
	WebhookjobListWebhookJobsHandler webhookjob.ListWebhookJobsHandler
	// WebhookListWebhookPoliciesOfProjectHandler sets the operation handler for the list webhook policies of project operation
	WebhookListWebhookPoliciesOfProjectHandler webhook.ListWebhookPoliciesOfProjectHandler
	// PreheatManualPreheatHandler sets the operation handler for the manual preheat operation
	PreheatManualPreheatHandler preheat.ManualPreheatHandler
	// PreheatPingInstancesHandler sets the operation handler for the ping instances operation
	PreheatPingInstancesHandler preheat.PingInstancesHandler
	// RobotRefreshSecHandler sets the operation handler for the refresh sec operation
	RobotRefreshSecHandler robot.RefreshSecHandler
	// PreheatStopExecutionHandler sets the operation handler for the stop execution operation
	PreheatStopExecutionHandler preheat.StopExecutionHandler
	// ImmutableUpdateImmuRuleHandler sets the operation handler for the update immu rule operation
	ImmutableUpdateImmuRuleHandler immutable.UpdateImmuRuleHandler
	// PreheatUpdateInstanceHandler sets the operation handler for the update instance operation
	PreheatUpdateInstanceHandler preheat.UpdateInstanceHandler
	// LabelUpdateLabelHandler sets the operation handler for the update label operation
	LabelUpdateLabelHandler label.UpdateLabelHandler
	// PreheatUpdatePolicyHandler sets the operation handler for the update policy operation
	PreheatUpdatePolicyHandler preheat.UpdatePolicyHandler
	// RobotUpdateRobotHandler sets the operation handler for the update robot operation
	RobotUpdateRobotHandler robot.UpdateRobotHandler
	// Robotv1UpdateRobotV1Handler sets the operation handler for the update robot v1 operation
	Robotv1UpdateRobotV1Handler robotv1.UpdateRobotV1Handler
	// WebhookUpdateWebhookPolicyOfProjectHandler sets the operation handler for the update webhook policy of project operation
	WebhookUpdateWebhookPolicyOfProjectHandler webhook.UpdateWebhookPolicyOfProjectHandler
	// ArtifactAddLabelHandler sets the operation handler for the add label operation
	ArtifactAddLabelHandler artifact.AddLabelHandler
	// ProjectMetadataAddProjectMetadatasHandler sets the operation handler for the add project metadatas operation
	ProjectMetadataAddProjectMetadatasHandler project_metadata.AddProjectMetadatasHandler
	// GCCreateGCScheduleHandler sets the operation handler for the create GC schedule operation
	GCCreateGCScheduleHandler gc.CreateGCScheduleHandler
	// ProjectCreateProjectHandler sets the operation handler for the create project operation
	ProjectCreateProjectHandler project.CreateProjectHandler
	// MemberCreateProjectMemberHandler sets the operation handler for the create project member operation
	MemberCreateProjectMemberHandler member.CreateProjectMemberHandler
	// RegistryCreateRegistryHandler sets the operation handler for the create registry operation
	RegistryCreateRegistryHandler registry.CreateRegistryHandler
	// ReplicationCreateReplicationPolicyHandler sets the operation handler for the create replication policy operation
	ReplicationCreateReplicationPolicyHandler replication.CreateReplicationPolicyHandler
	// RetentionCreateRetentionHandler sets the operation handler for the create retention operation
	RetentionCreateRetentionHandler retention.CreateRetentionHandler
	// ScanAllCreateScanAllScheduleHandler sets the operation handler for the create scan all schedule operation
	ScanAllCreateScanAllScheduleHandler scan_all.CreateScanAllScheduleHandler
	// ScannerCreateScannerHandler sets the operation handler for the create scanner operation
	ScannerCreateScannerHandler scanner.CreateScannerHandler
	// ArtifactCreateTagHandler sets the operation handler for the create tag operation
	ArtifactCreateTagHandler artifact.CreateTagHandler
	// UserCreateUserHandler sets the operation handler for the create user operation
	UserCreateUserHandler user.CreateUserHandler
	// UsergroupCreateUserGroupHandler sets the operation handler for the create user group operation
	UsergroupCreateUserGroupHandler usergroup.CreateUserGroupHandler
	// ArtifactDeleteArtifactHandler sets the operation handler for the delete artifact operation
	ArtifactDeleteArtifactHandler artifact.DeleteArtifactHandler
	// ProjectDeleteProjectHandler sets the operation handler for the delete project operation
	ProjectDeleteProjectHandler project.DeleteProjectHandler
	// MemberDeleteProjectMemberHandler sets the operation handler for the delete project member operation
	MemberDeleteProjectMemberHandler member.DeleteProjectMemberHandler
	// ProjectMetadataDeleteProjectMetadataHandler sets the operation handler for the delete project metadata operation
	ProjectMetadataDeleteProjectMetadataHandler project_metadata.DeleteProjectMetadataHandler
	// RegistryDeleteRegistryHandler sets the operation handler for the delete registry operation
	RegistryDeleteRegistryHandler registry.DeleteRegistryHandler
	// ReplicationDeleteReplicationPolicyHandler sets the operation handler for the delete replication policy operation
	ReplicationDeleteReplicationPolicyHandler replication.DeleteReplicationPolicyHandler
	// RepositoryDeleteRepositoryHandler sets the operation handler for the delete repository operation
	RepositoryDeleteRepositoryHandler repository.DeleteRepositoryHandler
	// RetentionDeleteRetentionHandler sets the operation handler for the delete retention operation
	RetentionDeleteRetentionHandler retention.DeleteRetentionHandler
	// ScannerDeleteScannerHandler sets the operation handler for the delete scanner operation
	ScannerDeleteScannerHandler scanner.DeleteScannerHandler
	// ArtifactDeleteTagHandler sets the operation handler for the delete tag operation
	ArtifactDeleteTagHandler artifact.DeleteTagHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// UsergroupDeleteUserGroupHandler sets the operation handler for the delete user group operation
	UsergroupDeleteUserGroupHandler usergroup.DeleteUserGroupHandler
	// ArtifactGetAdditionHandler sets the operation handler for the get addition operation
	ArtifactGetAdditionHandler artifact.GetAdditionHandler
	// ArtifactGetArtifactHandler sets the operation handler for the get artifact operation
	ArtifactGetArtifactHandler artifact.GetArtifactHandler
	// SysteminfoGetCertHandler sets the operation handler for the get cert operation
	SysteminfoGetCertHandler systeminfo.GetCertHandler
	// ConfigureGetConfigurationsHandler sets the operation handler for the get configurations operation
	ConfigureGetConfigurationsHandler configure.GetConfigurationsHandler
	// UserGetCurrentUserInfoHandler sets the operation handler for the get current user info operation
	UserGetCurrentUserInfoHandler user.GetCurrentUserInfoHandler
	// UserGetCurrentUserPermissionsHandler sets the operation handler for the get current user permissions operation
	UserGetCurrentUserPermissionsHandler user.GetCurrentUserPermissionsHandler
	// GCGetGCHandler sets the operation handler for the get GC operation
	GCGetGCHandler gc.GetGCHandler
	// GCGetGCHistoryHandler sets the operation handler for the get GC history operation
	GCGetGCHistoryHandler gc.GetGCHistoryHandler
	// GCGetGCLogHandler sets the operation handler for the get GC log operation
	GCGetGCLogHandler gc.GetGCLogHandler
	// GCGetGCScheduleHandler sets the operation handler for the get GC schedule operation
	GCGetGCScheduleHandler gc.GetGCScheduleHandler
	// HealthGetHealthHandler sets the operation handler for the get health operation
	HealthGetHealthHandler health.GetHealthHandler
	// IconGetIconHandler sets the operation handler for the get icon operation
	IconGetIconHandler icon.GetIconHandler
	// ConfigureGetInternalconfigHandler sets the operation handler for the get internalconfig operation
	ConfigureGetInternalconfigHandler configure.GetInternalconfigHandler
	// ScanAllGetLatestScanAllMetricsHandler sets the operation handler for the get latest scan all metrics operation
	ScanAllGetLatestScanAllMetricsHandler scan_all.GetLatestScanAllMetricsHandler
	// ScanAllGetLatestScheduledScanAllMetricsHandler sets the operation handler for the get latest scheduled scan all metrics operation
	ScanAllGetLatestScheduledScanAllMetricsHandler scan_all.GetLatestScheduledScanAllMetricsHandler
	// ProjectGetLogsHandler sets the operation handler for the get logs operation
	ProjectGetLogsHandler project.GetLogsHandler
	// PingGetPingHandler sets the operation handler for the get ping operation
	PingGetPingHandler ping.GetPingHandler
	// ProjectGetProjectHandler sets the operation handler for the get project operation
	ProjectGetProjectHandler project.GetProjectHandler
	// ProjectGetProjectDeletableHandler sets the operation handler for the get project deletable operation
	ProjectGetProjectDeletableHandler project.GetProjectDeletableHandler
	// MemberGetProjectMemberHandler sets the operation handler for the get project member operation
	MemberGetProjectMemberHandler member.GetProjectMemberHandler
	// ProjectMetadataGetProjectMetadataHandler sets the operation handler for the get project metadata operation
	ProjectMetadataGetProjectMetadataHandler project_metadata.GetProjectMetadataHandler
	// ProjectGetProjectSummaryHandler sets the operation handler for the get project summary operation
	ProjectGetProjectSummaryHandler project.GetProjectSummaryHandler
	// QuotaGetQuotaHandler sets the operation handler for the get quota operation
	QuotaGetQuotaHandler quota.GetQuotaHandler
	// RegistryGetRegistryHandler sets the operation handler for the get registry operation
	RegistryGetRegistryHandler registry.GetRegistryHandler
	// RegistryGetRegistryInfoHandler sets the operation handler for the get registry info operation
	RegistryGetRegistryInfoHandler registry.GetRegistryInfoHandler
	// RetentionGetRentenitionMetadataHandler sets the operation handler for the get rentenition metadata operation
	RetentionGetRentenitionMetadataHandler retention.GetRentenitionMetadataHandler
	// ReplicationGetReplicationExecutionHandler sets the operation handler for the get replication execution operation
	ReplicationGetReplicationExecutionHandler replication.GetReplicationExecutionHandler
	// ReplicationGetReplicationLogHandler sets the operation handler for the get replication log operation
	ReplicationGetReplicationLogHandler replication.GetReplicationLogHandler
	// ReplicationGetReplicationPolicyHandler sets the operation handler for the get replication policy operation
	ReplicationGetReplicationPolicyHandler replication.GetReplicationPolicyHandler
	// ScanGetReportLogHandler sets the operation handler for the get report log operation
	ScanGetReportLogHandler scan.GetReportLogHandler
	// RepositoryGetRepositoryHandler sets the operation handler for the get repository operation
	RepositoryGetRepositoryHandler repository.GetRepositoryHandler
	// RetentionGetRetentionHandler sets the operation handler for the get retention operation
	RetentionGetRetentionHandler retention.GetRetentionHandler
	// RetentionGetRetentionTaskLogHandler sets the operation handler for the get retention task log operation
	RetentionGetRetentionTaskLogHandler retention.GetRetentionTaskLogHandler
	// ScanAllGetScanAllScheduleHandler sets the operation handler for the get scan all schedule operation
	ScanAllGetScanAllScheduleHandler scan_all.GetScanAllScheduleHandler
	// ScannerGetScannerHandler sets the operation handler for the get scanner operation
	ScannerGetScannerHandler scanner.GetScannerHandler
	// ScannerGetScannerMetadataHandler sets the operation handler for the get scanner metadata operation
	ScannerGetScannerMetadataHandler scanner.GetScannerMetadataHandler
	// ProjectGetScannerOfProjectHandler sets the operation handler for the get scanner of project operation
	ProjectGetScannerOfProjectHandler project.GetScannerOfProjectHandler
	// StatisticGetStatisticHandler sets the operation handler for the get statistic operation
	StatisticGetStatisticHandler statistic.GetStatisticHandler
	// SystemCVEAllowlistGetSystemCVEAllowlistHandler sets the operation handler for the get system CVE allowlist operation
	SystemCVEAllowlistGetSystemCVEAllowlistHandler system_cve_allowlist.GetSystemCVEAllowlistHandler
	// SysteminfoGetSystemInfoHandler sets the operation handler for the get system info operation
	SysteminfoGetSystemInfoHandler systeminfo.GetSystemInfoHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UsergroupGetUserGroupHandler sets the operation handler for the get user group operation
	UsergroupGetUserGroupHandler usergroup.GetUserGroupHandler
	// SysteminfoGetVolumesHandler sets the operation handler for the get volumes operation
	SysteminfoGetVolumesHandler systeminfo.GetVolumesHandler
	// ArtifactGetVulnerabilitiesAdditionHandler sets the operation handler for the get vulnerabilities addition operation
	ArtifactGetVulnerabilitiesAdditionHandler artifact.GetVulnerabilitiesAdditionHandler
	// ProjectHeadProjectHandler sets the operation handler for the head project operation
	ProjectHeadProjectHandler project.HeadProjectHandler
	// LdapImportLdapUserHandler sets the operation handler for the import ldap user operation
	LdapImportLdapUserHandler ldap.ImportLdapUserHandler
	// RepositoryListAllRepositoriesHandler sets the operation handler for the list all repositories operation
	RepositoryListAllRepositoriesHandler repository.ListAllRepositoriesHandler
	// ArtifactListArtifactsHandler sets the operation handler for the list artifacts operation
	ArtifactListArtifactsHandler artifact.ListArtifactsHandler
	// AuditlogListAuditLogsHandler sets the operation handler for the list audit logs operation
	AuditlogListAuditLogsHandler auditlog.ListAuditLogsHandler
	// MemberListProjectMembersHandler sets the operation handler for the list project members operation
	MemberListProjectMembersHandler member.ListProjectMembersHandler
	// ProjectMetadataListProjectMetadatasHandler sets the operation handler for the list project metadatas operation
	ProjectMetadataListProjectMetadatasHandler project_metadata.ListProjectMetadatasHandler
	// ProjectListProjectsHandler sets the operation handler for the list projects operation
	ProjectListProjectsHandler project.ListProjectsHandler
	// QuotaListQuotasHandler sets the operation handler for the list quotas operation
	QuotaListQuotasHandler quota.ListQuotasHandler
	// RegistryListRegistriesHandler sets the operation handler for the list registries operation
	RegistryListRegistriesHandler registry.ListRegistriesHandler
	// RegistryListRegistryProviderInfosHandler sets the operation handler for the list registry provider infos operation
	RegistryListRegistryProviderInfosHandler registry.ListRegistryProviderInfosHandler
	// RegistryListRegistryProviderTypesHandler sets the operation handler for the list registry provider types operation
	RegistryListRegistryProviderTypesHandler registry.ListRegistryProviderTypesHandler
	// ReplicationListReplicationExecutionsHandler sets the operation handler for the list replication executions operation
	ReplicationListReplicationExecutionsHandler replication.ListReplicationExecutionsHandler
	// ReplicationListReplicationPoliciesHandler sets the operation handler for the list replication policies operation
	ReplicationListReplicationPoliciesHandler replication.ListReplicationPoliciesHandler
	// ReplicationListReplicationTasksHandler sets the operation handler for the list replication tasks operation
	ReplicationListReplicationTasksHandler replication.ListReplicationTasksHandler
	// RepositoryListRepositoriesHandler sets the operation handler for the list repositories operation
	RepositoryListRepositoriesHandler repository.ListRepositoriesHandler
	// RetentionListRetentionExecutionsHandler sets the operation handler for the list retention executions operation
	RetentionListRetentionExecutionsHandler retention.ListRetentionExecutionsHandler
	// RetentionListRetentionTasksHandler sets the operation handler for the list retention tasks operation
	RetentionListRetentionTasksHandler retention.ListRetentionTasksHandler
	// ProjectListScannerCandidatesOfProjectHandler sets the operation handler for the list scanner candidates of project operation
	ProjectListScannerCandidatesOfProjectHandler project.ListScannerCandidatesOfProjectHandler
	// ScannerListScannersHandler sets the operation handler for the list scanners operation
	ScannerListScannersHandler scanner.ListScannersHandler
	// ArtifactListTagsHandler sets the operation handler for the list tags operation
	ArtifactListTagsHandler artifact.ListTagsHandler
	// UsergroupListUserGroupsHandler sets the operation handler for the list user groups operation
	UsergroupListUserGroupsHandler usergroup.ListUserGroupsHandler
	// UserListUsersHandler sets the operation handler for the list users operation
	UserListUsersHandler user.ListUsersHandler
	// RetentionOperateRetentionExecutionHandler sets the operation handler for the operate retention execution operation
	RetentionOperateRetentionExecutionHandler retention.OperateRetentionExecutionHandler
	// LdapPingLdapHandler sets the operation handler for the ping ldap operation
	LdapPingLdapHandler ldap.PingLdapHandler
	// OIDCPingOIDCHandler sets the operation handler for the ping OIDC operation
	OIDCPingOIDCHandler oidc.PingOIDCHandler
	// RegistryPingRegistryHandler sets the operation handler for the ping registry operation
	RegistryPingRegistryHandler registry.PingRegistryHandler
	// ScannerPingScannerHandler sets the operation handler for the ping scanner operation
	ScannerPingScannerHandler scanner.PingScannerHandler
	// SystemCVEAllowlistPutSystemCVEAllowlistHandler sets the operation handler for the put system CVE allowlist operation
	SystemCVEAllowlistPutSystemCVEAllowlistHandler system_cve_allowlist.PutSystemCVEAllowlistHandler
	// ArtifactRemoveLabelHandler sets the operation handler for the remove label operation
	ArtifactRemoveLabelHandler artifact.RemoveLabelHandler
	// ScanScanArtifactHandler sets the operation handler for the scan artifact operation
	ScanScanArtifactHandler scan.ScanArtifactHandler
	// SearchSearchHandler sets the operation handler for the search operation
	SearchSearchHandler search.SearchHandler
	// LdapSearchLdapGroupHandler sets the operation handler for the search ldap group operation
	LdapSearchLdapGroupHandler ldap.SearchLdapGroupHandler
	// LdapSearchLdapUserHandler sets the operation handler for the search ldap user operation
	LdapSearchLdapUserHandler ldap.SearchLdapUserHandler
	// UserSearchUsersHandler sets the operation handler for the search users operation
	UserSearchUsersHandler user.SearchUsersHandler
	// UserSetCliSecretHandler sets the operation handler for the set cli secret operation
	UserSetCliSecretHandler user.SetCliSecretHandler
	// ScannerSetScannerAsDefaultHandler sets the operation handler for the set scanner as default operation
	ScannerSetScannerAsDefaultHandler scanner.SetScannerAsDefaultHandler
	// ProjectSetScannerOfProjectHandler sets the operation handler for the set scanner of project operation
	ProjectSetScannerOfProjectHandler project.SetScannerOfProjectHandler
	// UserSetUserSysAdminHandler sets the operation handler for the set user sys admin operation
	UserSetUserSysAdminHandler user.SetUserSysAdminHandler
	// ReplicationStartReplicationHandler sets the operation handler for the start replication operation
	ReplicationStartReplicationHandler replication.StartReplicationHandler
	// ReplicationStopReplicationHandler sets the operation handler for the stop replication operation
	ReplicationStopReplicationHandler replication.StopReplicationHandler
	// RetentionTriggerRetentionExecutionHandler sets the operation handler for the trigger retention execution operation
	RetentionTriggerRetentionExecutionHandler retention.TriggerRetentionExecutionHandler
	// ConfigureUpdateConfigurationsHandler sets the operation handler for the update configurations operation
	ConfigureUpdateConfigurationsHandler configure.UpdateConfigurationsHandler
	// GCUpdateGCScheduleHandler sets the operation handler for the update GC schedule operation
	GCUpdateGCScheduleHandler gc.UpdateGCScheduleHandler
	// ProjectUpdateProjectHandler sets the operation handler for the update project operation
	ProjectUpdateProjectHandler project.UpdateProjectHandler
	// MemberUpdateProjectMemberHandler sets the operation handler for the update project member operation
	MemberUpdateProjectMemberHandler member.UpdateProjectMemberHandler
	// ProjectMetadataUpdateProjectMetadataHandler sets the operation handler for the update project metadata operation
	ProjectMetadataUpdateProjectMetadataHandler project_metadata.UpdateProjectMetadataHandler
	// QuotaUpdateQuotaHandler sets the operation handler for the update quota operation
	QuotaUpdateQuotaHandler quota.UpdateQuotaHandler
	// RegistryUpdateRegistryHandler sets the operation handler for the update registry operation
	RegistryUpdateRegistryHandler registry.UpdateRegistryHandler
	// ReplicationUpdateReplicationPolicyHandler sets the operation handler for the update replication policy operation
	ReplicationUpdateReplicationPolicyHandler replication.UpdateReplicationPolicyHandler
	// RepositoryUpdateRepositoryHandler sets the operation handler for the update repository operation
	RepositoryUpdateRepositoryHandler repository.UpdateRepositoryHandler
	// RetentionUpdateRetentionHandler sets the operation handler for the update retention operation
	RetentionUpdateRetentionHandler retention.UpdateRetentionHandler
	// ScanAllUpdateScanAllScheduleHandler sets the operation handler for the update scan all schedule operation
	ScanAllUpdateScanAllScheduleHandler scan_all.UpdateScanAllScheduleHandler
	// ScannerUpdateScannerHandler sets the operation handler for the update scanner operation
	ScannerUpdateScannerHandler scanner.UpdateScannerHandler
	// UsergroupUpdateUserGroupHandler sets the operation handler for the update user group operation
	UsergroupUpdateUserGroupHandler usergroup.UpdateUserGroupHandler
	// UserUpdateUserPasswordHandler sets the operation handler for the update user password operation
	UserUpdateUserPasswordHandler user.UpdateUserPasswordHandler
	// UserUpdateUserProfileHandler sets the operation handler for the update user profile operation
	UserUpdateUserProfileHandler user.UpdateUserProfileHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *HarborAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *HarborAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *HarborAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *HarborAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *HarborAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *HarborAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *HarborAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *HarborAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *HarborAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the HarborAPI
func (o *HarborAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BasicAuth == nil {
		unregistered = append(unregistered, "BasicAuth")
	}

	if o.ArtifactCopyArtifactHandler == nil {
		unregistered = append(unregistered, "artifact.CopyArtifactHandler")
	}
	if o.ImmutableCreateImmuRuleHandler == nil {
		unregistered = append(unregistered, "immutable.CreateImmuRuleHandler")
	}
	if o.PreheatCreateInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.CreateInstanceHandler")
	}
	if o.LabelCreateLabelHandler == nil {
		unregistered = append(unregistered, "label.CreateLabelHandler")
	}
	if o.PreheatCreatePolicyHandler == nil {
		unregistered = append(unregistered, "preheat.CreatePolicyHandler")
	}
	if o.RobotCreateRobotHandler == nil {
		unregistered = append(unregistered, "robot.CreateRobotHandler")
	}
	if o.Robotv1CreateRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.CreateRobotV1Handler")
	}
	if o.WebhookCreateWebhookPolicyOfProjectHandler == nil {
		unregistered = append(unregistered, "webhook.CreateWebhookPolicyOfProjectHandler")
	}
	if o.ImmutableDeleteImmuRuleHandler == nil {
		unregistered = append(unregistered, "immutable.DeleteImmuRuleHandler")
	}
	if o.PreheatDeleteInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.DeleteInstanceHandler")
	}
	if o.LabelDeleteLabelHandler == nil {
		unregistered = append(unregistered, "label.DeleteLabelHandler")
	}
	if o.PreheatDeletePolicyHandler == nil {
		unregistered = append(unregistered, "preheat.DeletePolicyHandler")
	}
	if o.RobotDeleteRobotHandler == nil {
		unregistered = append(unregistered, "robot.DeleteRobotHandler")
	}
	if o.Robotv1DeleteRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.DeleteRobotV1Handler")
	}
	if o.WebhookDeleteWebhookPolicyOfProjectHandler == nil {
		unregistered = append(unregistered, "webhook.DeleteWebhookPolicyOfProjectHandler")
	}
	if o.PreheatGetExecutionHandler == nil {
		unregistered = append(unregistered, "preheat.GetExecutionHandler")
	}
	if o.PreheatGetInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.GetInstanceHandler")
	}
	if o.LabelGetLabelByIDHandler == nil {
		unregistered = append(unregistered, "label.GetLabelByIDHandler")
	}
	if o.PreheatGetPolicyHandler == nil {
		unregistered = append(unregistered, "preheat.GetPolicyHandler")
	}
	if o.PreheatGetPreheatLogHandler == nil {
		unregistered = append(unregistered, "preheat.GetPreheatLogHandler")
	}
	if o.RobotGetRobotByIDHandler == nil {
		unregistered = append(unregistered, "robot.GetRobotByIDHandler")
	}
	if o.Robotv1GetRobotByIDV1Handler == nil {
		unregistered = append(unregistered, "robotv1.GetRobotByIDV1Handler")
	}
	if o.WebhookGetSupportedEventTypesHandler == nil {
		unregistered = append(unregistered, "webhook.GetSupportedEventTypesHandler")
	}
	if o.WebhookGetWebhookPolicyOfProjectHandler == nil {
		unregistered = append(unregistered, "webhook.GetWebhookPolicyOfProjectHandler")
	}
	if o.WebhookLastTriggerHandler == nil {
		unregistered = append(unregistered, "webhook.LastTriggerHandler")
	}
	if o.PreheatListExecutionsHandler == nil {
		unregistered = append(unregistered, "preheat.ListExecutionsHandler")
	}
	if o.ImmutableListImmuRulesHandler == nil {
		unregistered = append(unregistered, "immutable.ListImmuRulesHandler")
	}
	if o.PreheatListInstancesHandler == nil {
		unregistered = append(unregistered, "preheat.ListInstancesHandler")
	}
	if o.LabelListLabelsHandler == nil {
		unregistered = append(unregistered, "label.ListLabelsHandler")
	}
	if o.PreheatListPoliciesHandler == nil {
		unregistered = append(unregistered, "preheat.ListPoliciesHandler")
	}
	if o.PreheatListProvidersHandler == nil {
		unregistered = append(unregistered, "preheat.ListProvidersHandler")
	}
	if o.PreheatListProvidersUnderProjectHandler == nil {
		unregistered = append(unregistered, "preheat.ListProvidersUnderProjectHandler")
	}
	if o.RobotListRobotHandler == nil {
		unregistered = append(unregistered, "robot.ListRobotHandler")
	}
	if o.Robotv1ListRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.ListRobotV1Handler")
	}
	if o.PreheatListTasksHandler == nil {
		unregistered = append(unregistered, "preheat.ListTasksHandler")
	}
	if o.WebhookjobListWebhookJobsHandler == nil {
		unregistered = append(unregistered, "webhookjob.ListWebhookJobsHandler")
	}
	if o.WebhookListWebhookPoliciesOfProjectHandler == nil {
		unregistered = append(unregistered, "webhook.ListWebhookPoliciesOfProjectHandler")
	}
	if o.PreheatManualPreheatHandler == nil {
		unregistered = append(unregistered, "preheat.ManualPreheatHandler")
	}
	if o.PreheatPingInstancesHandler == nil {
		unregistered = append(unregistered, "preheat.PingInstancesHandler")
	}
	if o.RobotRefreshSecHandler == nil {
		unregistered = append(unregistered, "robot.RefreshSecHandler")
	}
	if o.PreheatStopExecutionHandler == nil {
		unregistered = append(unregistered, "preheat.StopExecutionHandler")
	}
	if o.ImmutableUpdateImmuRuleHandler == nil {
		unregistered = append(unregistered, "immutable.UpdateImmuRuleHandler")
	}
	if o.PreheatUpdateInstanceHandler == nil {
		unregistered = append(unregistered, "preheat.UpdateInstanceHandler")
	}
	if o.LabelUpdateLabelHandler == nil {
		unregistered = append(unregistered, "label.UpdateLabelHandler")
	}
	if o.PreheatUpdatePolicyHandler == nil {
		unregistered = append(unregistered, "preheat.UpdatePolicyHandler")
	}
	if o.RobotUpdateRobotHandler == nil {
		unregistered = append(unregistered, "robot.UpdateRobotHandler")
	}
	if o.Robotv1UpdateRobotV1Handler == nil {
		unregistered = append(unregistered, "robotv1.UpdateRobotV1Handler")
	}
	if o.WebhookUpdateWebhookPolicyOfProjectHandler == nil {
		unregistered = append(unregistered, "webhook.UpdateWebhookPolicyOfProjectHandler")
	}
	if o.ArtifactAddLabelHandler == nil {
		unregistered = append(unregistered, "artifact.AddLabelHandler")
	}
	if o.ProjectMetadataAddProjectMetadatasHandler == nil {
		unregistered = append(unregistered, "project_metadata.AddProjectMetadatasHandler")
	}
	if o.GCCreateGCScheduleHandler == nil {
		unregistered = append(unregistered, "gc.CreateGCScheduleHandler")
	}
	if o.ProjectCreateProjectHandler == nil {
		unregistered = append(unregistered, "project.CreateProjectHandler")
	}
	if o.MemberCreateProjectMemberHandler == nil {
		unregistered = append(unregistered, "member.CreateProjectMemberHandler")
	}
	if o.RegistryCreateRegistryHandler == nil {
		unregistered = append(unregistered, "registry.CreateRegistryHandler")
	}
	if o.ReplicationCreateReplicationPolicyHandler == nil {
		unregistered = append(unregistered, "replication.CreateReplicationPolicyHandler")
	}
	if o.RetentionCreateRetentionHandler == nil {
		unregistered = append(unregistered, "retention.CreateRetentionHandler")
	}
	if o.ScanAllCreateScanAllScheduleHandler == nil {
		unregistered = append(unregistered, "scan_all.CreateScanAllScheduleHandler")
	}
	if o.ScannerCreateScannerHandler == nil {
		unregistered = append(unregistered, "scanner.CreateScannerHandler")
	}
	if o.ArtifactCreateTagHandler == nil {
		unregistered = append(unregistered, "artifact.CreateTagHandler")
	}
	if o.UserCreateUserHandler == nil {
		unregistered = append(unregistered, "user.CreateUserHandler")
	}
	if o.UsergroupCreateUserGroupHandler == nil {
		unregistered = append(unregistered, "usergroup.CreateUserGroupHandler")
	}
	if o.ArtifactDeleteArtifactHandler == nil {
		unregistered = append(unregistered, "artifact.DeleteArtifactHandler")
	}
	if o.ProjectDeleteProjectHandler == nil {
		unregistered = append(unregistered, "project.DeleteProjectHandler")
	}
	if o.MemberDeleteProjectMemberHandler == nil {
		unregistered = append(unregistered, "member.DeleteProjectMemberHandler")
	}
	if o.ProjectMetadataDeleteProjectMetadataHandler == nil {
		unregistered = append(unregistered, "project_metadata.DeleteProjectMetadataHandler")
	}
	if o.RegistryDeleteRegistryHandler == nil {
		unregistered = append(unregistered, "registry.DeleteRegistryHandler")
	}
	if o.ReplicationDeleteReplicationPolicyHandler == nil {
		unregistered = append(unregistered, "replication.DeleteReplicationPolicyHandler")
	}
	if o.RepositoryDeleteRepositoryHandler == nil {
		unregistered = append(unregistered, "repository.DeleteRepositoryHandler")
	}
	if o.RetentionDeleteRetentionHandler == nil {
		unregistered = append(unregistered, "retention.DeleteRetentionHandler")
	}
	if o.ScannerDeleteScannerHandler == nil {
		unregistered = append(unregistered, "scanner.DeleteScannerHandler")
	}
	if o.ArtifactDeleteTagHandler == nil {
		unregistered = append(unregistered, "artifact.DeleteTagHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.UsergroupDeleteUserGroupHandler == nil {
		unregistered = append(unregistered, "usergroup.DeleteUserGroupHandler")
	}
	if o.ArtifactGetAdditionHandler == nil {
		unregistered = append(unregistered, "artifact.GetAdditionHandler")
	}
	if o.ArtifactGetArtifactHandler == nil {
		unregistered = append(unregistered, "artifact.GetArtifactHandler")
	}
	if o.SysteminfoGetCertHandler == nil {
		unregistered = append(unregistered, "systeminfo.GetCertHandler")
	}
	if o.ConfigureGetConfigurationsHandler == nil {
		unregistered = append(unregistered, "configure.GetConfigurationsHandler")
	}
	if o.UserGetCurrentUserInfoHandler == nil {
		unregistered = append(unregistered, "user.GetCurrentUserInfoHandler")
	}
	if o.UserGetCurrentUserPermissionsHandler == nil {
		unregistered = append(unregistered, "user.GetCurrentUserPermissionsHandler")
	}
	if o.GCGetGCHandler == nil {
		unregistered = append(unregistered, "gc.GetGCHandler")
	}
	if o.GCGetGCHistoryHandler == nil {
		unregistered = append(unregistered, "gc.GetGCHistoryHandler")
	}
	if o.GCGetGCLogHandler == nil {
		unregistered = append(unregistered, "gc.GetGCLogHandler")
	}
	if o.GCGetGCScheduleHandler == nil {
		unregistered = append(unregistered, "gc.GetGCScheduleHandler")
	}
	if o.HealthGetHealthHandler == nil {
		unregistered = append(unregistered, "health.GetHealthHandler")
	}
	if o.IconGetIconHandler == nil {
		unregistered = append(unregistered, "icon.GetIconHandler")
	}
	if o.ConfigureGetInternalconfigHandler == nil {
		unregistered = append(unregistered, "configure.GetInternalconfigHandler")
	}
	if o.ScanAllGetLatestScanAllMetricsHandler == nil {
		unregistered = append(unregistered, "scan_all.GetLatestScanAllMetricsHandler")
	}
	if o.ScanAllGetLatestScheduledScanAllMetricsHandler == nil {
		unregistered = append(unregistered, "scan_all.GetLatestScheduledScanAllMetricsHandler")
	}
	if o.ProjectGetLogsHandler == nil {
		unregistered = append(unregistered, "project.GetLogsHandler")
	}
	if o.PingGetPingHandler == nil {
		unregistered = append(unregistered, "ping.GetPingHandler")
	}
	if o.ProjectGetProjectHandler == nil {
		unregistered = append(unregistered, "project.GetProjectHandler")
	}
	if o.ProjectGetProjectDeletableHandler == nil {
		unregistered = append(unregistered, "project.GetProjectDeletableHandler")
	}
	if o.MemberGetProjectMemberHandler == nil {
		unregistered = append(unregistered, "member.GetProjectMemberHandler")
	}
	if o.ProjectMetadataGetProjectMetadataHandler == nil {
		unregistered = append(unregistered, "project_metadata.GetProjectMetadataHandler")
	}
	if o.ProjectGetProjectSummaryHandler == nil {
		unregistered = append(unregistered, "project.GetProjectSummaryHandler")
	}
	if o.QuotaGetQuotaHandler == nil {
		unregistered = append(unregistered, "quota.GetQuotaHandler")
	}
	if o.RegistryGetRegistryHandler == nil {
		unregistered = append(unregistered, "registry.GetRegistryHandler")
	}
	if o.RegistryGetRegistryInfoHandler == nil {
		unregistered = append(unregistered, "registry.GetRegistryInfoHandler")
	}
	if o.RetentionGetRentenitionMetadataHandler == nil {
		unregistered = append(unregistered, "retention.GetRentenitionMetadataHandler")
	}
	if o.ReplicationGetReplicationExecutionHandler == nil {
		unregistered = append(unregistered, "replication.GetReplicationExecutionHandler")
	}
	if o.ReplicationGetReplicationLogHandler == nil {
		unregistered = append(unregistered, "replication.GetReplicationLogHandler")
	}
	if o.ReplicationGetReplicationPolicyHandler == nil {
		unregistered = append(unregistered, "replication.GetReplicationPolicyHandler")
	}
	if o.ScanGetReportLogHandler == nil {
		unregistered = append(unregistered, "scan.GetReportLogHandler")
	}
	if o.RepositoryGetRepositoryHandler == nil {
		unregistered = append(unregistered, "repository.GetRepositoryHandler")
	}
	if o.RetentionGetRetentionHandler == nil {
		unregistered = append(unregistered, "retention.GetRetentionHandler")
	}
	if o.RetentionGetRetentionTaskLogHandler == nil {
		unregistered = append(unregistered, "retention.GetRetentionTaskLogHandler")
	}
	if o.ScanAllGetScanAllScheduleHandler == nil {
		unregistered = append(unregistered, "scan_all.GetScanAllScheduleHandler")
	}
	if o.ScannerGetScannerHandler == nil {
		unregistered = append(unregistered, "scanner.GetScannerHandler")
	}
	if o.ScannerGetScannerMetadataHandler == nil {
		unregistered = append(unregistered, "scanner.GetScannerMetadataHandler")
	}
	if o.ProjectGetScannerOfProjectHandler == nil {
		unregistered = append(unregistered, "project.GetScannerOfProjectHandler")
	}
	if o.StatisticGetStatisticHandler == nil {
		unregistered = append(unregistered, "statistic.GetStatisticHandler")
	}
	if o.SystemCVEAllowlistGetSystemCVEAllowlistHandler == nil {
		unregistered = append(unregistered, "system_cve_allowlist.GetSystemCVEAllowlistHandler")
	}
	if o.SysteminfoGetSystemInfoHandler == nil {
		unregistered = append(unregistered, "systeminfo.GetSystemInfoHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.UsergroupGetUserGroupHandler == nil {
		unregistered = append(unregistered, "usergroup.GetUserGroupHandler")
	}
	if o.SysteminfoGetVolumesHandler == nil {
		unregistered = append(unregistered, "systeminfo.GetVolumesHandler")
	}
	if o.ArtifactGetVulnerabilitiesAdditionHandler == nil {
		unregistered = append(unregistered, "artifact.GetVulnerabilitiesAdditionHandler")
	}
	if o.ProjectHeadProjectHandler == nil {
		unregistered = append(unregistered, "project.HeadProjectHandler")
	}
	if o.LdapImportLdapUserHandler == nil {
		unregistered = append(unregistered, "ldap.ImportLdapUserHandler")
	}
	if o.RepositoryListAllRepositoriesHandler == nil {
		unregistered = append(unregistered, "repository.ListAllRepositoriesHandler")
	}
	if o.ArtifactListArtifactsHandler == nil {
		unregistered = append(unregistered, "artifact.ListArtifactsHandler")
	}
	if o.AuditlogListAuditLogsHandler == nil {
		unregistered = append(unregistered, "auditlog.ListAuditLogsHandler")
	}
	if o.MemberListProjectMembersHandler == nil {
		unregistered = append(unregistered, "member.ListProjectMembersHandler")
	}
	if o.ProjectMetadataListProjectMetadatasHandler == nil {
		unregistered = append(unregistered, "project_metadata.ListProjectMetadatasHandler")
	}
	if o.ProjectListProjectsHandler == nil {
		unregistered = append(unregistered, "project.ListProjectsHandler")
	}
	if o.QuotaListQuotasHandler == nil {
		unregistered = append(unregistered, "quota.ListQuotasHandler")
	}
	if o.RegistryListRegistriesHandler == nil {
		unregistered = append(unregistered, "registry.ListRegistriesHandler")
	}
	if o.RegistryListRegistryProviderInfosHandler == nil {
		unregistered = append(unregistered, "registry.ListRegistryProviderInfosHandler")
	}
	if o.RegistryListRegistryProviderTypesHandler == nil {
		unregistered = append(unregistered, "registry.ListRegistryProviderTypesHandler")
	}
	if o.ReplicationListReplicationExecutionsHandler == nil {
		unregistered = append(unregistered, "replication.ListReplicationExecutionsHandler")
	}
	if o.ReplicationListReplicationPoliciesHandler == nil {
		unregistered = append(unregistered, "replication.ListReplicationPoliciesHandler")
	}
	if o.ReplicationListReplicationTasksHandler == nil {
		unregistered = append(unregistered, "replication.ListReplicationTasksHandler")
	}
	if o.RepositoryListRepositoriesHandler == nil {
		unregistered = append(unregistered, "repository.ListRepositoriesHandler")
	}
	if o.RetentionListRetentionExecutionsHandler == nil {
		unregistered = append(unregistered, "retention.ListRetentionExecutionsHandler")
	}
	if o.RetentionListRetentionTasksHandler == nil {
		unregistered = append(unregistered, "retention.ListRetentionTasksHandler")
	}
	if o.ProjectListScannerCandidatesOfProjectHandler == nil {
		unregistered = append(unregistered, "project.ListScannerCandidatesOfProjectHandler")
	}
	if o.ScannerListScannersHandler == nil {
		unregistered = append(unregistered, "scanner.ListScannersHandler")
	}
	if o.ArtifactListTagsHandler == nil {
		unregistered = append(unregistered, "artifact.ListTagsHandler")
	}
	if o.UsergroupListUserGroupsHandler == nil {
		unregistered = append(unregistered, "usergroup.ListUserGroupsHandler")
	}
	if o.UserListUsersHandler == nil {
		unregistered = append(unregistered, "user.ListUsersHandler")
	}
	if o.RetentionOperateRetentionExecutionHandler == nil {
		unregistered = append(unregistered, "retention.OperateRetentionExecutionHandler")
	}
	if o.LdapPingLdapHandler == nil {
		unregistered = append(unregistered, "ldap.PingLdapHandler")
	}
	if o.OIDCPingOIDCHandler == nil {
		unregistered = append(unregistered, "oidc.PingOIDCHandler")
	}
	if o.RegistryPingRegistryHandler == nil {
		unregistered = append(unregistered, "registry.PingRegistryHandler")
	}
	if o.ScannerPingScannerHandler == nil {
		unregistered = append(unregistered, "scanner.PingScannerHandler")
	}
	if o.SystemCVEAllowlistPutSystemCVEAllowlistHandler == nil {
		unregistered = append(unregistered, "system_cve_allowlist.PutSystemCVEAllowlistHandler")
	}
	if o.ArtifactRemoveLabelHandler == nil {
		unregistered = append(unregistered, "artifact.RemoveLabelHandler")
	}
	if o.ScanScanArtifactHandler == nil {
		unregistered = append(unregistered, "scan.ScanArtifactHandler")
	}
	if o.SearchSearchHandler == nil {
		unregistered = append(unregistered, "search.SearchHandler")
	}
	if o.LdapSearchLdapGroupHandler == nil {
		unregistered = append(unregistered, "ldap.SearchLdapGroupHandler")
	}
	if o.LdapSearchLdapUserHandler == nil {
		unregistered = append(unregistered, "ldap.SearchLdapUserHandler")
	}
	if o.UserSearchUsersHandler == nil {
		unregistered = append(unregistered, "user.SearchUsersHandler")
	}
	if o.UserSetCliSecretHandler == nil {
		unregistered = append(unregistered, "user.SetCliSecretHandler")
	}
	if o.ScannerSetScannerAsDefaultHandler == nil {
		unregistered = append(unregistered, "scanner.SetScannerAsDefaultHandler")
	}
	if o.ProjectSetScannerOfProjectHandler == nil {
		unregistered = append(unregistered, "project.SetScannerOfProjectHandler")
	}
	if o.UserSetUserSysAdminHandler == nil {
		unregistered = append(unregistered, "user.SetUserSysAdminHandler")
	}
	if o.ReplicationStartReplicationHandler == nil {
		unregistered = append(unregistered, "replication.StartReplicationHandler")
	}
	if o.ReplicationStopReplicationHandler == nil {
		unregistered = append(unregistered, "replication.StopReplicationHandler")
	}
	if o.RetentionTriggerRetentionExecutionHandler == nil {
		unregistered = append(unregistered, "retention.TriggerRetentionExecutionHandler")
	}
	if o.ConfigureUpdateConfigurationsHandler == nil {
		unregistered = append(unregistered, "configure.UpdateConfigurationsHandler")
	}
	if o.GCUpdateGCScheduleHandler == nil {
		unregistered = append(unregistered, "gc.UpdateGCScheduleHandler")
	}
	if o.ProjectUpdateProjectHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectHandler")
	}
	if o.MemberUpdateProjectMemberHandler == nil {
		unregistered = append(unregistered, "member.UpdateProjectMemberHandler")
	}
	if o.ProjectMetadataUpdateProjectMetadataHandler == nil {
		unregistered = append(unregistered, "project_metadata.UpdateProjectMetadataHandler")
	}
	if o.QuotaUpdateQuotaHandler == nil {
		unregistered = append(unregistered, "quota.UpdateQuotaHandler")
	}
	if o.RegistryUpdateRegistryHandler == nil {
		unregistered = append(unregistered, "registry.UpdateRegistryHandler")
	}
	if o.ReplicationUpdateReplicationPolicyHandler == nil {
		unregistered = append(unregistered, "replication.UpdateReplicationPolicyHandler")
	}
	if o.RepositoryUpdateRepositoryHandler == nil {
		unregistered = append(unregistered, "repository.UpdateRepositoryHandler")
	}
	if o.RetentionUpdateRetentionHandler == nil {
		unregistered = append(unregistered, "retention.UpdateRetentionHandler")
	}
	if o.ScanAllUpdateScanAllScheduleHandler == nil {
		unregistered = append(unregistered, "scan_all.UpdateScanAllScheduleHandler")
	}
	if o.ScannerUpdateScannerHandler == nil {
		unregistered = append(unregistered, "scanner.UpdateScannerHandler")
	}
	if o.UsergroupUpdateUserGroupHandler == nil {
		unregistered = append(unregistered, "usergroup.UpdateUserGroupHandler")
	}
	if o.UserUpdateUserPasswordHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserPasswordHandler")
	}
	if o.UserUpdateUserProfileHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserProfileHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *HarborAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *HarborAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "basic":
			result[name] = o.BasicAuthenticator(o.BasicAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *HarborAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *HarborAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *HarborAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *HarborAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the harbor API
func (o *HarborAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *HarborAPI) handler(operation string, next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		h := next
		if b, ok := o.operationMiddlewares[operation]; ok {
			h = b(h)
		}

		h.ServeHTTP(w, r)
	})
}

func (o *HarborAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts"] = o.handler("CopyArtifact", artifact.NewCopyArtifact(o.context, o.ArtifactCopyArtifactHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name_or_id}/immutabletagrules"] = o.handler("CreateImmuRule", immutable.NewCreateImmuRule(o.context, o.ImmutableCreateImmuRuleHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/p2p/preheat/instances"] = o.handler("CreateInstance", preheat.NewCreateInstance(o.context, o.PreheatCreateInstanceHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/labels"] = o.handler("CreateLabel", label.NewCreateLabel(o.context, o.LabelCreateLabelHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/preheat/policies"] = o.handler("CreatePolicy", preheat.NewCreatePolicy(o.context, o.PreheatCreatePolicyHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/robots"] = o.handler("CreateRobot", robot.NewCreateRobot(o.context, o.RobotCreateRobotHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name_or_id}/robots"] = o.handler("CreateRobotV1", robotv1.NewCreateRobotV1(o.context, o.Robotv1CreateRobotV1Handler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name_or_id}/webhook/policies"] = o.handler("CreateWebhookPolicyOfProject", webhook.NewCreateWebhookPolicyOfProject(o.context, o.WebhookCreateWebhookPolicyOfProjectHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}"] = o.handler("DeleteImmuRule", immutable.NewDeleteImmuRule(o.context, o.ImmutableDeleteImmuRuleHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/p2p/preheat/instances/{preheat_instance_name}"] = o.handler("DeleteInstance", preheat.NewDeleteInstance(o.context, o.PreheatDeleteInstanceHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/labels/{label_id}"] = o.handler("DeleteLabel", label.NewDeleteLabel(o.context, o.LabelDeleteLabelHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("DeletePolicy", preheat.NewDeletePolicy(o.context, o.PreheatDeletePolicyHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/robots/{robot_id}"] = o.handler("DeleteRobot", robot.NewDeleteRobot(o.context, o.RobotDeleteRobotHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}/robots/{robot_id}"] = o.handler("DeleteRobotV1", robotv1.NewDeleteRobotV1(o.context, o.Robotv1DeleteRobotV1Handler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}"] = o.handler("DeleteWebhookPolicyOfProject", webhook.NewDeleteWebhookPolicyOfProject(o.context, o.WebhookDeleteWebhookPolicyOfProjectHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}"] = o.handler("GetExecution", preheat.NewGetExecution(o.context, o.PreheatGetExecutionHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/preheat/instances/{preheat_instance_name}"] = o.handler("GetInstance", preheat.NewGetInstance(o.context, o.PreheatGetInstanceHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/labels/{label_id}"] = o.handler("GetLabelByID", label.NewGetLabelByID(o.context, o.LabelGetLabelByIDHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("GetPolicy", preheat.NewGetPolicy(o.context, o.PreheatGetPolicyHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs"] = o.handler("GetPreheatLog", preheat.NewGetPreheatLog(o.context, o.PreheatGetPreheatLogHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/robots/{robot_id}"] = o.handler("GetRobotByID", robot.NewGetRobotByID(o.context, o.RobotGetRobotByIDHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/robots/{robot_id}"] = o.handler("GetRobotByIDV1", robotv1.NewGetRobotByIDV1(o.context, o.Robotv1GetRobotByIDV1Handler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/webhook/events"] = o.handler("GetSupportedEventTypes", webhook.NewGetSupportedEventTypes(o.context, o.WebhookGetSupportedEventTypesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}"] = o.handler("GetWebhookPolicyOfProject", webhook.NewGetWebhookPolicyOfProject(o.context, o.WebhookGetWebhookPolicyOfProjectHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/webhook/lasttrigger"] = o.handler("LastTrigger", webhook.NewLastTrigger(o.context, o.WebhookLastTriggerHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions"] = o.handler("ListExecutions", preheat.NewListExecutions(o.context, o.PreheatListExecutionsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/immutabletagrules"] = o.handler("ListImmuRules", immutable.NewListImmuRules(o.context, o.ImmutableListImmuRulesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/preheat/instances"] = o.handler("ListInstances", preheat.NewListInstances(o.context, o.PreheatListInstancesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/labels"] = o.handler("ListLabels", label.NewListLabels(o.context, o.LabelListLabelsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies"] = o.handler("ListPolicies", preheat.NewListPolicies(o.context, o.PreheatListPoliciesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/p2p/preheat/providers"] = o.handler("ListProviders", preheat.NewListProviders(o.context, o.PreheatListProvidersHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/providers"] = o.handler("ListProvidersUnderProject", preheat.NewListProvidersUnderProject(o.context, o.PreheatListProvidersUnderProjectHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/robots"] = o.handler("ListRobot", robot.NewListRobot(o.context, o.RobotListRobotHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/robots"] = o.handler("ListRobotV1", robotv1.NewListRobotV1(o.context, o.Robotv1ListRobotV1Handler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks"] = o.handler("ListTasks", preheat.NewListTasks(o.context, o.PreheatListTasksHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/webhook/jobs"] = o.handler("ListWebhookJobs", webhookjob.NewListWebhookJobs(o.context, o.WebhookjobListWebhookJobsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/webhook/policies"] = o.handler("ListWebhookPoliciesOfProject", webhook.NewListWebhookPoliciesOfProject(o.context, o.WebhookListWebhookPoliciesOfProjectHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("ManualPreheat", preheat.NewManualPreheat(o.context, o.PreheatManualPreheatHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/p2p/preheat/instances/ping"] = o.handler("PingInstances", preheat.NewPingInstances(o.context, o.PreheatPingInstancesHandler))
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/robots/{robot_id}"] = o.handler("RefreshSec", robot.NewRefreshSec(o.context, o.RobotRefreshSecHandler))
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}"] = o.handler("StopExecution", preheat.NewStopExecution(o.context, o.PreheatStopExecutionHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}"] = o.handler("UpdateImmuRule", immutable.NewUpdateImmuRule(o.context, o.ImmutableUpdateImmuRuleHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/p2p/preheat/instances/{preheat_instance_name}"] = o.handler("UpdateInstance", preheat.NewUpdateInstance(o.context, o.PreheatUpdateInstanceHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/labels/{label_id}"] = o.handler("UpdateLabel", label.NewUpdateLabel(o.context, o.LabelUpdateLabelHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name}/preheat/policies/{preheat_policy_name}"] = o.handler("UpdatePolicy", preheat.NewUpdatePolicy(o.context, o.PreheatUpdatePolicyHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/robots/{robot_id}"] = o.handler("UpdateRobot", robot.NewUpdateRobot(o.context, o.RobotUpdateRobotHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/robots/{robot_id}"] = o.handler("UpdateRobotV1", robotv1.NewUpdateRobotV1(o.context, o.Robotv1UpdateRobotV1Handler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}"] = o.handler("UpdateWebhookPolicyOfProject", webhook.NewUpdateWebhookPolicyOfProject(o.context, o.WebhookUpdateWebhookPolicyOfProjectHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels"] = o.handler("AddLabel", artifact.NewAddLabel(o.context, o.ArtifactAddLabelHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name_or_id}/metadatas"] = o.handler("AddProjectMetadatas", project_metadata.NewAddProjectMetadatas(o.context, o.ProjectMetadataAddProjectMetadatasHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/system/gc/schedule"] = o.handler("CreateGCSchedule", gc.NewCreateGCSchedule(o.context, o.GCCreateGCScheduleHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects"] = o.handler("CreateProject", project.NewCreateProject(o.context, o.ProjectCreateProjectHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name_or_id}/members"] = o.handler("CreateProjectMember", member.NewCreateProjectMember(o.context, o.MemberCreateProjectMemberHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/registries"] = o.handler("CreateRegistry", registry.NewCreateRegistry(o.context, o.RegistryCreateRegistryHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/replication/policies"] = o.handler("CreateReplicationPolicy", replication.NewCreateReplicationPolicy(o.context, o.ReplicationCreateReplicationPolicyHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/retentions"] = o.handler("CreateRetention", retention.NewCreateRetention(o.context, o.RetentionCreateRetentionHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/system/scanAll/schedule"] = o.handler("CreateScanAllSchedule", scan_all.NewCreateScanAllSchedule(o.context, o.ScanAllCreateScanAllScheduleHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/scanners"] = o.handler("CreateScanner", scanner.NewCreateScanner(o.context, o.ScannerCreateScannerHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags"] = o.handler("CreateTag", artifact.NewCreateTag(o.context, o.ArtifactCreateTagHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = o.handler("CreateUser", user.NewCreateUser(o.context, o.UserCreateUserHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/usergroups"] = o.handler("CreateUserGroup", usergroup.NewCreateUserGroup(o.context, o.UsergroupCreateUserGroupHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"] = o.handler("DeleteArtifact", artifact.NewDeleteArtifact(o.context, o.ArtifactDeleteArtifactHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}"] = o.handler("DeleteProject", project.NewDeleteProject(o.context, o.ProjectDeleteProjectHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}/members/{mid}"] = o.handler("DeleteProjectMember", member.NewDeleteProjectMember(o.context, o.MemberDeleteProjectMemberHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name_or_id}/metadatas/{meta_name}"] = o.handler("DeleteProjectMetadata", project_metadata.NewDeleteProjectMetadata(o.context, o.ProjectMetadataDeleteProjectMetadataHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/registries/{id}"] = o.handler("DeleteRegistry", registry.NewDeleteRegistry(o.context, o.RegistryDeleteRegistryHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/replication/policies/{id}"] = o.handler("DeleteReplicationPolicy", replication.NewDeleteReplicationPolicy(o.context, o.ReplicationDeleteReplicationPolicyHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}"] = o.handler("DeleteRepository", repository.NewDeleteRepository(o.context, o.RepositoryDeleteRepositoryHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/retentions/{id}"] = o.handler("DeleteRetention", retention.NewDeleteRetention(o.context, o.RetentionDeleteRetentionHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/scanners/{registration_id}"] = o.handler("DeleteScanner", scanner.NewDeleteScanner(o.context, o.ScannerDeleteScannerHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}"] = o.handler("DeleteTag", artifact.NewDeleteTag(o.context, o.ArtifactDeleteTagHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{user_id}"] = o.handler("DeleteUser", user.NewDeleteUser(o.context, o.UserDeleteUserHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/usergroups/{group_id}"] = o.handler("DeleteUserGroup", usergroup.NewDeleteUserGroup(o.context, o.UsergroupDeleteUserGroupHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}"] = o.handler("GetAddition", artifact.NewGetAddition(o.context, o.ArtifactGetAdditionHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"] = o.handler("GetArtifact", artifact.NewGetArtifact(o.context, o.ArtifactGetArtifactHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/systeminfo/getcert"] = o.handler("GetCert", systeminfo.NewGetCert(o.context, o.SysteminfoGetCertHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configurations"] = o.handler("GetConfigurations", configure.NewGetConfigurations(o.context, o.ConfigureGetConfigurationsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/current"] = o.handler("GetCurrentUserInfo", user.NewGetCurrentUserInfo(o.context, o.UserGetCurrentUserInfoHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/current/permissions"] = o.handler("GetCurrentUserPermissions", user.NewGetCurrentUserPermissions(o.context, o.UserGetCurrentUserPermissionsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc/{gc_id}"] = o.handler("GetGC", gc.NewGetGC(o.context, o.GCGetGCHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc"] = o.handler("GetGCHistory", gc.NewGetGCHistory(o.context, o.GCGetGCHistoryHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc/{gc_id}/log"] = o.handler("GetGCLog", gc.NewGetGCLog(o.context, o.GCGetGCLogHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/gc/schedule"] = o.handler("GetGCSchedule", gc.NewGetGCSchedule(o.context, o.GCGetGCScheduleHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health"] = o.handler("GetHealth", health.NewGetHealth(o.context, o.HealthGetHealthHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/icons/{digest}"] = o.handler("GetIcon", icon.NewGetIcon(o.context, o.IconGetIconHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/internalconfig"] = o.handler("GetInternalconfig", configure.NewGetInternalconfig(o.context, o.ConfigureGetInternalconfigHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scans/all/metrics"] = o.handler("GetLatestScanAllMetrics", scan_all.NewGetLatestScanAllMetrics(o.context, o.ScanAllGetLatestScanAllMetricsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scans/schedule/metrics"] = o.handler("GetLatestScheduledScanAllMetrics", scan_all.NewGetLatestScheduledScanAllMetrics(o.context, o.ScanAllGetLatestScheduledScanAllMetricsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/logs"] = o.handler("GetLogs", project.NewGetLogs(o.context, o.ProjectGetLogsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = o.handler("GetPing", ping.NewGetPing(o.context, o.PingGetPingHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}"] = o.handler("GetProject", project.NewGetProject(o.context, o.ProjectGetProjectHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/_deletable"] = o.handler("GetProjectDeletable", project.NewGetProjectDeletable(o.context, o.ProjectGetProjectDeletableHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/members/{mid}"] = o.handler("GetProjectMember", member.NewGetProjectMember(o.context, o.MemberGetProjectMemberHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/metadatas/{meta_name}"] = o.handler("GetProjectMetadata", project_metadata.NewGetProjectMetadata(o.context, o.ProjectMetadataGetProjectMetadataHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/summary"] = o.handler("GetProjectSummary", project.NewGetProjectSummary(o.context, o.ProjectGetProjectSummaryHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quotas/{id}"] = o.handler("GetQuota", quota.NewGetQuota(o.context, o.QuotaGetQuotaHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/registries/{id}"] = o.handler("GetRegistry", registry.NewGetRegistry(o.context, o.RegistryGetRegistryHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/registries/{id}/info"] = o.handler("GetRegistryInfo", registry.NewGetRegistryInfo(o.context, o.RegistryGetRegistryInfoHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/metadatas"] = o.handler("GetRentenitionMetadata", retention.NewGetRentenitionMetadata(o.context, o.RetentionGetRentenitionMetadataHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions/{id}"] = o.handler("GetReplicationExecution", replication.NewGetReplicationExecution(o.context, o.ReplicationGetReplicationExecutionHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions/{id}/tasks/{task_id}/log"] = o.handler("GetReplicationLog", replication.NewGetReplicationLog(o.context, o.ReplicationGetReplicationLogHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/policies/{id}"] = o.handler("GetReplicationPolicy", replication.NewGetReplicationPolicy(o.context, o.ReplicationGetReplicationPolicyHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log"] = o.handler("GetReportLog", scan.NewGetReportLog(o.context, o.ScanGetReportLogHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}"] = o.handler("GetRepository", repository.NewGetRepository(o.context, o.RepositoryGetRepositoryHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}"] = o.handler("GetRetention", retention.NewGetRetention(o.context, o.RetentionGetRetentionHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}/executions/{eid}/tasks/{tid}"] = o.handler("GetRetentionTaskLog", retention.NewGetRetentionTaskLog(o.context, o.RetentionGetRetentionTaskLogHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/scanAll/schedule"] = o.handler("GetScanAllSchedule", scan_all.NewGetScanAllSchedule(o.context, o.ScanAllGetScanAllScheduleHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scanners/{registration_id}"] = o.handler("GetScanner", scanner.NewGetScanner(o.context, o.ScannerGetScannerHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scanners/{registration_id}/metadata"] = o.handler("GetScannerMetadata", scanner.NewGetScannerMetadata(o.context, o.ScannerGetScannerMetadataHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/scanner"] = o.handler("GetScannerOfProject", project.NewGetScannerOfProject(o.context, o.ProjectGetScannerOfProjectHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/statistics"] = o.handler("GetStatistic", statistic.NewGetStatistic(o.context, o.StatisticGetStatisticHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/CVEAllowlist"] = o.handler("GetSystemCVEAllowlist", system_cve_allowlist.NewGetSystemCVEAllowlist(o.context, o.SystemCVEAllowlistGetSystemCVEAllowlistHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/systeminfo"] = o.handler("GetSystemInfo", systeminfo.NewGetSystemInfo(o.context, o.SysteminfoGetSystemInfoHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_id}"] = o.handler("GetUser", user.NewGetUser(o.context, o.UserGetUserHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/usergroups/{group_id}"] = o.handler("GetUserGroup", usergroup.NewGetUserGroup(o.context, o.UsergroupGetUserGroupHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/systeminfo/volumes"] = o.handler("GetVolumes", systeminfo.NewGetVolumes(o.context, o.SysteminfoGetVolumesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities"] = o.handler("GetVulnerabilitiesAddition", artifact.NewGetVulnerabilitiesAddition(o.context, o.ArtifactGetVulnerabilitiesAdditionHandler))
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/projects"] = o.handler("HeadProject", project.NewHeadProject(o.context, o.ProjectHeadProjectHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ldap/users/import"] = o.handler("ImportLdapUser", ldap.NewImportLdapUser(o.context, o.LdapImportLdapUserHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repositories"] = o.handler("ListAllRepositories", repository.NewListAllRepositories(o.context, o.RepositoryListAllRepositoriesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts"] = o.handler("ListArtifacts", artifact.NewListArtifacts(o.context, o.ArtifactListArtifactsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/audit-logs"] = o.handler("ListAuditLogs", auditlog.NewListAuditLogs(o.context, o.AuditlogListAuditLogsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/members"] = o.handler("ListProjectMembers", member.NewListProjectMembers(o.context, o.MemberListProjectMembersHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/metadatas"] = o.handler("ListProjectMetadatas", project_metadata.NewListProjectMetadatas(o.context, o.ProjectMetadataListProjectMetadatasHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects"] = o.handler("ListProjects", project.NewListProjects(o.context, o.ProjectListProjectsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quotas"] = o.handler("ListQuotas", quota.NewListQuotas(o.context, o.QuotaListQuotasHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/registries"] = o.handler("ListRegistries", registry.NewListRegistries(o.context, o.RegistryListRegistriesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/adapterinfos"] = o.handler("ListRegistryProviderInfos", registry.NewListRegistryProviderInfos(o.context, o.RegistryListRegistryProviderInfosHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/adapters"] = o.handler("ListRegistryProviderTypes", registry.NewListRegistryProviderTypes(o.context, o.RegistryListRegistryProviderTypesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions"] = o.handler("ListReplicationExecutions", replication.NewListReplicationExecutions(o.context, o.ReplicationListReplicationExecutionsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/policies"] = o.handler("ListReplicationPolicies", replication.NewListReplicationPolicies(o.context, o.ReplicationListReplicationPoliciesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replication/executions/{id}/tasks"] = o.handler("ListReplicationTasks", replication.NewListReplicationTasks(o.context, o.ReplicationListReplicationTasksHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories"] = o.handler("ListRepositories", repository.NewListRepositories(o.context, o.RepositoryListRepositoriesHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}/executions"] = o.handler("ListRetentionExecutions", retention.NewListRetentionExecutions(o.context, o.RetentionListRetentionExecutionsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/retentions/{id}/executions/{eid}/tasks"] = o.handler("ListRetentionTasks", retention.NewListRetentionTasks(o.context, o.RetentionListRetentionTasksHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name_or_id}/scanner/candidates"] = o.handler("ListScannerCandidatesOfProject", project.NewListScannerCandidatesOfProject(o.context, o.ProjectListScannerCandidatesOfProjectHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/scanners"] = o.handler("ListScanners", scanner.NewListScanners(o.context, o.ScannerListScannersHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags"] = o.handler("ListTags", artifact.NewListTags(o.context, o.ArtifactListTagsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/usergroups"] = o.handler("ListUserGroups", usergroup.NewListUserGroups(o.context, o.UsergroupListUserGroupsHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = o.handler("ListUsers", user.NewListUsers(o.context, o.UserListUsersHandler))
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/retentions/{id}/executions/{eid}"] = o.handler("OperateRetentionExecution", retention.NewOperateRetentionExecution(o.context, o.RetentionOperateRetentionExecutionHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ldap/ping"] = o.handler("PingLdap", ldap.NewPingLdap(o.context, o.LdapPingLdapHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/system/oidc/ping"] = o.handler("PingOIDC", oidc.NewPingOIDC(o.context, o.OIDCPingOIDCHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/registries/ping"] = o.handler("PingRegistry", registry.NewPingRegistry(o.context, o.RegistryPingRegistryHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/scanners/ping"] = o.handler("PingScanner", scanner.NewPingScanner(o.context, o.ScannerPingScannerHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/system/CVEAllowlist"] = o.handler("PutSystemCVEAllowlist", system_cve_allowlist.NewPutSystemCVEAllowlist(o.context, o.SystemCVEAllowlistPutSystemCVEAllowlistHandler))
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}"] = o.handler("RemoveLabel", artifact.NewRemoveLabel(o.context, o.ArtifactRemoveLabelHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan"] = o.handler("ScanArtifact", scan.NewScanArtifact(o.context, o.ScanScanArtifactHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = o.handler("Search", search.NewSearch(o.context, o.SearchSearchHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ldap/groups/search"] = o.handler("SearchLdapGroup", ldap.NewSearchLdapGroup(o.context, o.LdapSearchLdapGroupHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ldap/users/search"] = o.handler("SearchLdapUser", ldap.NewSearchLdapUser(o.context, o.LdapSearchLdapUserHandler))
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/search"] = o.handler("SearchUsers", user.NewSearchUsers(o.context, o.UserSearchUsersHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_id}/cli_secret"] = o.handler("SetCliSecret", user.NewSetCliSecret(o.context, o.UserSetCliSecretHandler))
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/scanners/{registration_id}"] = o.handler("SetScannerAsDefault", scanner.NewSetScannerAsDefault(o.context, o.ScannerSetScannerAsDefaultHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/scanner"] = o.handler("SetScannerOfProject", project.NewSetScannerOfProject(o.context, o.ProjectSetScannerOfProjectHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_id}/sysadmin"] = o.handler("SetUserSysAdmin", user.NewSetUserSysAdmin(o.context, o.UserSetUserSysAdminHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/replication/executions"] = o.handler("StartReplication", replication.NewStartReplication(o.context, o.ReplicationStartReplicationHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/replication/executions/{id}"] = o.handler("StopReplication", replication.NewStopReplication(o.context, o.ReplicationStopReplicationHandler))
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/retentions/{id}/executions"] = o.handler("TriggerRetentionExecution", retention.NewTriggerRetentionExecution(o.context, o.RetentionTriggerRetentionExecutionHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/configurations"] = o.handler("UpdateConfigurations", configure.NewUpdateConfigurations(o.context, o.ConfigureUpdateConfigurationsHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/system/gc/schedule"] = o.handler("UpdateGCSchedule", gc.NewUpdateGCSchedule(o.context, o.GCUpdateGCScheduleHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}"] = o.handler("UpdateProject", project.NewUpdateProject(o.context, o.ProjectUpdateProjectHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/members/{mid}"] = o.handler("UpdateProjectMember", member.NewUpdateProjectMember(o.context, o.MemberUpdateProjectMemberHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name_or_id}/metadatas/{meta_name}"] = o.handler("UpdateProjectMetadata", project_metadata.NewUpdateProjectMetadata(o.context, o.ProjectMetadataUpdateProjectMetadataHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/quotas/{id}"] = o.handler("UpdateQuota", quota.NewUpdateQuota(o.context, o.QuotaUpdateQuotaHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/registries/{id}"] = o.handler("UpdateRegistry", registry.NewUpdateRegistry(o.context, o.RegistryUpdateRegistryHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/replication/policies/{id}"] = o.handler("UpdateReplicationPolicy", replication.NewUpdateReplicationPolicy(o.context, o.ReplicationUpdateReplicationPolicyHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{project_name}/repositories/{repository_name}"] = o.handler("UpdateRepository", repository.NewUpdateRepository(o.context, o.RepositoryUpdateRepositoryHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/retentions/{id}"] = o.handler("UpdateRetention", retention.NewUpdateRetention(o.context, o.RetentionUpdateRetentionHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/system/scanAll/schedule"] = o.handler("UpdateScanAllSchedule", scan_all.NewUpdateScanAllSchedule(o.context, o.ScanAllUpdateScanAllScheduleHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/scanners/{registration_id}"] = o.handler("UpdateScanner", scanner.NewUpdateScanner(o.context, o.ScannerUpdateScannerHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/usergroups/{group_id}"] = o.handler("UpdateUserGroup", usergroup.NewUpdateUserGroup(o.context, o.UsergroupUpdateUserGroupHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_id}/password"] = o.handler("UpdateUserPassword", user.NewUpdateUserPassword(o.context, o.UserUpdateUserPasswordHandler))
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_id}"] = o.handler("UpdateUserProfile", user.NewUpdateUserProfile(o.context, o.UserUpdateUserProfileHandler))
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *HarborAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *HarborAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *HarborAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *HarborAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *HarborAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}

// RegisterMiddleware allows you to add (or override) a middleware for operation.
func (o *HarborAPI) RegisterMiddleware(operation string, builder middleware.Builder) {
	o.operationMiddlewares[operation] = builder
}
