// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchHandlerFunc turns a function with the right signature into a search handler
type SearchHandlerFunc func(SearchParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchHandlerFunc) Handle(params SearchParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SearchHandler interface for that can handle valid search params
type SearchHandler interface {
	Handle(SearchParams, interface{}) middleware.Responder
}

// NewSearch creates a new http.Handler for the search operation
func NewSearch(ctx *middleware.Context, handler SearchHandler) *Search {
	return &Search{Context: ctx, Handler: handler}
}

/*Search swagger:route GET /search search search

Search for projects, repositories and helm charts

The Search endpoint returns information about the projects, repositories and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order.

*/
type Search struct {
	Context *middleware.Context
	Handler SearchHandler
}

func (o *Search) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
