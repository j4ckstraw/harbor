// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListRegistriesOKCode is the HTTP code returned for type ListRegistriesOK
const ListRegistriesOKCode int = 200

/*ListRegistriesOK Success

swagger:response listRegistriesOK
*/
type ListRegistriesOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of the resources

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Registry `json:"body,omitempty"`
}

// NewListRegistriesOK creates ListRegistriesOK with default headers values
func NewListRegistriesOK() *ListRegistriesOK {

	return &ListRegistriesOK{}
}

// WithLink adds the link to the list registries o k response
func (o *ListRegistriesOK) WithLink(link string) *ListRegistriesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list registries o k response
func (o *ListRegistriesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list registries o k response
func (o *ListRegistriesOK) WithXTotalCount(xTotalCount int64) *ListRegistriesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list registries o k response
func (o *ListRegistriesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list registries o k response
func (o *ListRegistriesOK) WithPayload(payload []*models.Registry) *ListRegistriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list registries o k response
func (o *ListRegistriesOK) SetPayload(payload []*models.Registry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRegistriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Registry, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRegistriesUnauthorizedCode is the HTTP code returned for type ListRegistriesUnauthorized
const ListRegistriesUnauthorizedCode int = 401

/*ListRegistriesUnauthorized Unauthorized

swagger:response listRegistriesUnauthorized
*/
type ListRegistriesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRegistriesUnauthorized creates ListRegistriesUnauthorized with default headers values
func NewListRegistriesUnauthorized() *ListRegistriesUnauthorized {

	return &ListRegistriesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list registries unauthorized response
func (o *ListRegistriesUnauthorized) WithXRequestID(xRequestID string) *ListRegistriesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list registries unauthorized response
func (o *ListRegistriesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list registries unauthorized response
func (o *ListRegistriesUnauthorized) WithPayload(payload *models.Errors) *ListRegistriesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list registries unauthorized response
func (o *ListRegistriesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRegistriesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRegistriesForbiddenCode is the HTTP code returned for type ListRegistriesForbidden
const ListRegistriesForbiddenCode int = 403

/*ListRegistriesForbidden Forbidden

swagger:response listRegistriesForbidden
*/
type ListRegistriesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRegistriesForbidden creates ListRegistriesForbidden with default headers values
func NewListRegistriesForbidden() *ListRegistriesForbidden {

	return &ListRegistriesForbidden{}
}

// WithXRequestID adds the xRequestId to the list registries forbidden response
func (o *ListRegistriesForbidden) WithXRequestID(xRequestID string) *ListRegistriesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list registries forbidden response
func (o *ListRegistriesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list registries forbidden response
func (o *ListRegistriesForbidden) WithPayload(payload *models.Errors) *ListRegistriesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list registries forbidden response
func (o *ListRegistriesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRegistriesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRegistriesInternalServerErrorCode is the HTTP code returned for type ListRegistriesInternalServerError
const ListRegistriesInternalServerErrorCode int = 500

/*ListRegistriesInternalServerError Internal server error

swagger:response listRegistriesInternalServerError
*/
type ListRegistriesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRegistriesInternalServerError creates ListRegistriesInternalServerError with default headers values
func NewListRegistriesInternalServerError() *ListRegistriesInternalServerError {

	return &ListRegistriesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list registries internal server error response
func (o *ListRegistriesInternalServerError) WithXRequestID(xRequestID string) *ListRegistriesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list registries internal server error response
func (o *ListRegistriesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list registries internal server error response
func (o *ListRegistriesInternalServerError) WithPayload(payload *models.Errors) *ListRegistriesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list registries internal server error response
func (o *ListRegistriesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRegistriesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
