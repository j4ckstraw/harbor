// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateRegistryCreatedCode is the HTTP code returned for type CreateRegistryCreated
const CreateRegistryCreatedCode int = 201

/*CreateRegistryCreated Created

swagger:response createRegistryCreated
*/
type CreateRegistryCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreateRegistryCreated creates CreateRegistryCreated with default headers values
func NewCreateRegistryCreated() *CreateRegistryCreated {

	return &CreateRegistryCreated{}
}

// WithLocation adds the location to the create registry created response
func (o *CreateRegistryCreated) WithLocation(location string) *CreateRegistryCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create registry created response
func (o *CreateRegistryCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create registry created response
func (o *CreateRegistryCreated) WithXRequestID(xRequestID string) *CreateRegistryCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create registry created response
func (o *CreateRegistryCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreateRegistryCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateRegistryBadRequestCode is the HTTP code returned for type CreateRegistryBadRequest
const CreateRegistryBadRequestCode int = 400

/*CreateRegistryBadRequest Bad request

swagger:response createRegistryBadRequest
*/
type CreateRegistryBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRegistryBadRequest creates CreateRegistryBadRequest with default headers values
func NewCreateRegistryBadRequest() *CreateRegistryBadRequest {

	return &CreateRegistryBadRequest{}
}

// WithXRequestID adds the xRequestId to the create registry bad request response
func (o *CreateRegistryBadRequest) WithXRequestID(xRequestID string) *CreateRegistryBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create registry bad request response
func (o *CreateRegistryBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create registry bad request response
func (o *CreateRegistryBadRequest) WithPayload(payload *models.Errors) *CreateRegistryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create registry bad request response
func (o *CreateRegistryBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRegistryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRegistryUnauthorizedCode is the HTTP code returned for type CreateRegistryUnauthorized
const CreateRegistryUnauthorizedCode int = 401

/*CreateRegistryUnauthorized Unauthorized

swagger:response createRegistryUnauthorized
*/
type CreateRegistryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRegistryUnauthorized creates CreateRegistryUnauthorized with default headers values
func NewCreateRegistryUnauthorized() *CreateRegistryUnauthorized {

	return &CreateRegistryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create registry unauthorized response
func (o *CreateRegistryUnauthorized) WithXRequestID(xRequestID string) *CreateRegistryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create registry unauthorized response
func (o *CreateRegistryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create registry unauthorized response
func (o *CreateRegistryUnauthorized) WithPayload(payload *models.Errors) *CreateRegistryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create registry unauthorized response
func (o *CreateRegistryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRegistryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRegistryForbiddenCode is the HTTP code returned for type CreateRegistryForbidden
const CreateRegistryForbiddenCode int = 403

/*CreateRegistryForbidden Forbidden

swagger:response createRegistryForbidden
*/
type CreateRegistryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRegistryForbidden creates CreateRegistryForbidden with default headers values
func NewCreateRegistryForbidden() *CreateRegistryForbidden {

	return &CreateRegistryForbidden{}
}

// WithXRequestID adds the xRequestId to the create registry forbidden response
func (o *CreateRegistryForbidden) WithXRequestID(xRequestID string) *CreateRegistryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create registry forbidden response
func (o *CreateRegistryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create registry forbidden response
func (o *CreateRegistryForbidden) WithPayload(payload *models.Errors) *CreateRegistryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create registry forbidden response
func (o *CreateRegistryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRegistryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRegistryConflictCode is the HTTP code returned for type CreateRegistryConflict
const CreateRegistryConflictCode int = 409

/*CreateRegistryConflict Conflict

swagger:response createRegistryConflict
*/
type CreateRegistryConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRegistryConflict creates CreateRegistryConflict with default headers values
func NewCreateRegistryConflict() *CreateRegistryConflict {

	return &CreateRegistryConflict{}
}

// WithXRequestID adds the xRequestId to the create registry conflict response
func (o *CreateRegistryConflict) WithXRequestID(xRequestID string) *CreateRegistryConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create registry conflict response
func (o *CreateRegistryConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create registry conflict response
func (o *CreateRegistryConflict) WithPayload(payload *models.Errors) *CreateRegistryConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create registry conflict response
func (o *CreateRegistryConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRegistryConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRegistryInternalServerErrorCode is the HTTP code returned for type CreateRegistryInternalServerError
const CreateRegistryInternalServerErrorCode int = 500

/*CreateRegistryInternalServerError Internal server error

swagger:response createRegistryInternalServerError
*/
type CreateRegistryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRegistryInternalServerError creates CreateRegistryInternalServerError with default headers values
func NewCreateRegistryInternalServerError() *CreateRegistryInternalServerError {

	return &CreateRegistryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create registry internal server error response
func (o *CreateRegistryInternalServerError) WithXRequestID(xRequestID string) *CreateRegistryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create registry internal server error response
func (o *CreateRegistryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create registry internal server error response
func (o *CreateRegistryInternalServerError) WithPayload(payload *models.Errors) *CreateRegistryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create registry internal server error response
func (o *CreateRegistryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRegistryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
