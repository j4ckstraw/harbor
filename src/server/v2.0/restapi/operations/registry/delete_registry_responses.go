// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteRegistryOKCode is the HTTP code returned for type DeleteRegistryOK
const DeleteRegistryOKCode int = 200

/*DeleteRegistryOK Success

swagger:response deleteRegistryOK
*/
type DeleteRegistryOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteRegistryOK creates DeleteRegistryOK with default headers values
func NewDeleteRegistryOK() *DeleteRegistryOK {

	return &DeleteRegistryOK{}
}

// WithXRequestID adds the xRequestId to the delete registry o k response
func (o *DeleteRegistryOK) WithXRequestID(xRequestID string) *DeleteRegistryOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete registry o k response
func (o *DeleteRegistryOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteRegistryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteRegistryUnauthorizedCode is the HTTP code returned for type DeleteRegistryUnauthorized
const DeleteRegistryUnauthorizedCode int = 401

/*DeleteRegistryUnauthorized Unauthorized

swagger:response deleteRegistryUnauthorized
*/
type DeleteRegistryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRegistryUnauthorized creates DeleteRegistryUnauthorized with default headers values
func NewDeleteRegistryUnauthorized() *DeleteRegistryUnauthorized {

	return &DeleteRegistryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete registry unauthorized response
func (o *DeleteRegistryUnauthorized) WithXRequestID(xRequestID string) *DeleteRegistryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete registry unauthorized response
func (o *DeleteRegistryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete registry unauthorized response
func (o *DeleteRegistryUnauthorized) WithPayload(payload *models.Errors) *DeleteRegistryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete registry unauthorized response
func (o *DeleteRegistryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRegistryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRegistryForbiddenCode is the HTTP code returned for type DeleteRegistryForbidden
const DeleteRegistryForbiddenCode int = 403

/*DeleteRegistryForbidden Forbidden

swagger:response deleteRegistryForbidden
*/
type DeleteRegistryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRegistryForbidden creates DeleteRegistryForbidden with default headers values
func NewDeleteRegistryForbidden() *DeleteRegistryForbidden {

	return &DeleteRegistryForbidden{}
}

// WithXRequestID adds the xRequestId to the delete registry forbidden response
func (o *DeleteRegistryForbidden) WithXRequestID(xRequestID string) *DeleteRegistryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete registry forbidden response
func (o *DeleteRegistryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete registry forbidden response
func (o *DeleteRegistryForbidden) WithPayload(payload *models.Errors) *DeleteRegistryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete registry forbidden response
func (o *DeleteRegistryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRegistryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRegistryNotFoundCode is the HTTP code returned for type DeleteRegistryNotFound
const DeleteRegistryNotFoundCode int = 404

/*DeleteRegistryNotFound Not found

swagger:response deleteRegistryNotFound
*/
type DeleteRegistryNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRegistryNotFound creates DeleteRegistryNotFound with default headers values
func NewDeleteRegistryNotFound() *DeleteRegistryNotFound {

	return &DeleteRegistryNotFound{}
}

// WithXRequestID adds the xRequestId to the delete registry not found response
func (o *DeleteRegistryNotFound) WithXRequestID(xRequestID string) *DeleteRegistryNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete registry not found response
func (o *DeleteRegistryNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete registry not found response
func (o *DeleteRegistryNotFound) WithPayload(payload *models.Errors) *DeleteRegistryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete registry not found response
func (o *DeleteRegistryNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRegistryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRegistryPreconditionFailedCode is the HTTP code returned for type DeleteRegistryPreconditionFailed
const DeleteRegistryPreconditionFailedCode int = 412

/*DeleteRegistryPreconditionFailed Precondition failed

swagger:response deleteRegistryPreconditionFailed
*/
type DeleteRegistryPreconditionFailed struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRegistryPreconditionFailed creates DeleteRegistryPreconditionFailed with default headers values
func NewDeleteRegistryPreconditionFailed() *DeleteRegistryPreconditionFailed {

	return &DeleteRegistryPreconditionFailed{}
}

// WithXRequestID adds the xRequestId to the delete registry precondition failed response
func (o *DeleteRegistryPreconditionFailed) WithXRequestID(xRequestID string) *DeleteRegistryPreconditionFailed {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete registry precondition failed response
func (o *DeleteRegistryPreconditionFailed) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete registry precondition failed response
func (o *DeleteRegistryPreconditionFailed) WithPayload(payload *models.Errors) *DeleteRegistryPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete registry precondition failed response
func (o *DeleteRegistryPreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRegistryPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRegistryInternalServerErrorCode is the HTTP code returned for type DeleteRegistryInternalServerError
const DeleteRegistryInternalServerErrorCode int = 500

/*DeleteRegistryInternalServerError Internal server error

swagger:response deleteRegistryInternalServerError
*/
type DeleteRegistryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRegistryInternalServerError creates DeleteRegistryInternalServerError with default headers values
func NewDeleteRegistryInternalServerError() *DeleteRegistryInternalServerError {

	return &DeleteRegistryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete registry internal server error response
func (o *DeleteRegistryInternalServerError) WithXRequestID(xRequestID string) *DeleteRegistryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete registry internal server error response
func (o *DeleteRegistryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete registry internal server error response
func (o *DeleteRegistryInternalServerError) WithPayload(payload *models.Errors) *DeleteRegistryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete registry internal server error response
func (o *DeleteRegistryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRegistryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
