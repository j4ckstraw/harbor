// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// PingRegistryOKCode is the HTTP code returned for type PingRegistryOK
const PingRegistryOKCode int = 200

/*PingRegistryOK Success

swagger:response pingRegistryOK
*/
type PingRegistryOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewPingRegistryOK creates PingRegistryOK with default headers values
func NewPingRegistryOK() *PingRegistryOK {

	return &PingRegistryOK{}
}

// WithXRequestID adds the xRequestId to the ping registry o k response
func (o *PingRegistryOK) WithXRequestID(xRequestID string) *PingRegistryOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping registry o k response
func (o *PingRegistryOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *PingRegistryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PingRegistryBadRequestCode is the HTTP code returned for type PingRegistryBadRequest
const PingRegistryBadRequestCode int = 400

/*PingRegistryBadRequest Bad request

swagger:response pingRegistryBadRequest
*/
type PingRegistryBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingRegistryBadRequest creates PingRegistryBadRequest with default headers values
func NewPingRegistryBadRequest() *PingRegistryBadRequest {

	return &PingRegistryBadRequest{}
}

// WithXRequestID adds the xRequestId to the ping registry bad request response
func (o *PingRegistryBadRequest) WithXRequestID(xRequestID string) *PingRegistryBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping registry bad request response
func (o *PingRegistryBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping registry bad request response
func (o *PingRegistryBadRequest) WithPayload(payload *models.Errors) *PingRegistryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping registry bad request response
func (o *PingRegistryBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingRegistryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingRegistryUnauthorizedCode is the HTTP code returned for type PingRegistryUnauthorized
const PingRegistryUnauthorizedCode int = 401

/*PingRegistryUnauthorized Unauthorized

swagger:response pingRegistryUnauthorized
*/
type PingRegistryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingRegistryUnauthorized creates PingRegistryUnauthorized with default headers values
func NewPingRegistryUnauthorized() *PingRegistryUnauthorized {

	return &PingRegistryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the ping registry unauthorized response
func (o *PingRegistryUnauthorized) WithXRequestID(xRequestID string) *PingRegistryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping registry unauthorized response
func (o *PingRegistryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping registry unauthorized response
func (o *PingRegistryUnauthorized) WithPayload(payload *models.Errors) *PingRegistryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping registry unauthorized response
func (o *PingRegistryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingRegistryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingRegistryForbiddenCode is the HTTP code returned for type PingRegistryForbidden
const PingRegistryForbiddenCode int = 403

/*PingRegistryForbidden Forbidden

swagger:response pingRegistryForbidden
*/
type PingRegistryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingRegistryForbidden creates PingRegistryForbidden with default headers values
func NewPingRegistryForbidden() *PingRegistryForbidden {

	return &PingRegistryForbidden{}
}

// WithXRequestID adds the xRequestId to the ping registry forbidden response
func (o *PingRegistryForbidden) WithXRequestID(xRequestID string) *PingRegistryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping registry forbidden response
func (o *PingRegistryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping registry forbidden response
func (o *PingRegistryForbidden) WithPayload(payload *models.Errors) *PingRegistryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping registry forbidden response
func (o *PingRegistryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingRegistryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingRegistryNotFoundCode is the HTTP code returned for type PingRegistryNotFound
const PingRegistryNotFoundCode int = 404

/*PingRegistryNotFound Not found

swagger:response pingRegistryNotFound
*/
type PingRegistryNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingRegistryNotFound creates PingRegistryNotFound with default headers values
func NewPingRegistryNotFound() *PingRegistryNotFound {

	return &PingRegistryNotFound{}
}

// WithXRequestID adds the xRequestId to the ping registry not found response
func (o *PingRegistryNotFound) WithXRequestID(xRequestID string) *PingRegistryNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping registry not found response
func (o *PingRegistryNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping registry not found response
func (o *PingRegistryNotFound) WithPayload(payload *models.Errors) *PingRegistryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping registry not found response
func (o *PingRegistryNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingRegistryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingRegistryInternalServerErrorCode is the HTTP code returned for type PingRegistryInternalServerError
const PingRegistryInternalServerErrorCode int = 500

/*PingRegistryInternalServerError Internal server error

swagger:response pingRegistryInternalServerError
*/
type PingRegistryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingRegistryInternalServerError creates PingRegistryInternalServerError with default headers values
func NewPingRegistryInternalServerError() *PingRegistryInternalServerError {

	return &PingRegistryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the ping registry internal server error response
func (o *PingRegistryInternalServerError) WithXRequestID(xRequestID string) *PingRegistryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping registry internal server error response
func (o *PingRegistryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping registry internal server error response
func (o *PingRegistryInternalServerError) WithPayload(payload *models.Errors) *PingRegistryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping registry internal server error response
func (o *PingRegistryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingRegistryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
