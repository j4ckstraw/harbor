// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateRegistryHandlerFunc turns a function with the right signature into a update registry handler
type UpdateRegistryHandlerFunc func(UpdateRegistryParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateRegistryHandlerFunc) Handle(params UpdateRegistryParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateRegistryHandler interface for that can handle valid update registry params
type UpdateRegistryHandler interface {
	Handle(UpdateRegistryParams, interface{}) middleware.Responder
}

// NewUpdateRegistry creates a new http.Handler for the update registry operation
func NewUpdateRegistry(ctx *middleware.Context, handler UpdateRegistryHandler) *UpdateRegistry {
	return &UpdateRegistry{Context: ctx, Handler: handler}
}

/*UpdateRegistry swagger:route PUT /registries/{id} registry updateRegistry

Update the registry

Update the registry

*/
type UpdateRegistry struct {
	Context *middleware.Context
	Handler UpdateRegistryHandler
}

func (o *UpdateRegistry) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateRegistryParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
