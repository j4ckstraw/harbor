// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetRegistryOKCode is the HTTP code returned for type GetRegistryOK
const GetRegistryOKCode int = 200

/*GetRegistryOK Success

swagger:response getRegistryOK
*/
type GetRegistryOK struct {

	/*
	  In: Body
	*/
	Payload *models.Registry `json:"body,omitempty"`
}

// NewGetRegistryOK creates GetRegistryOK with default headers values
func NewGetRegistryOK() *GetRegistryOK {

	return &GetRegistryOK{}
}

// WithPayload adds the payload to the get registry o k response
func (o *GetRegistryOK) WithPayload(payload *models.Registry) *GetRegistryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get registry o k response
func (o *GetRegistryOK) SetPayload(payload *models.Registry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegistryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRegistryUnauthorizedCode is the HTTP code returned for type GetRegistryUnauthorized
const GetRegistryUnauthorizedCode int = 401

/*GetRegistryUnauthorized Unauthorized

swagger:response getRegistryUnauthorized
*/
type GetRegistryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRegistryUnauthorized creates GetRegistryUnauthorized with default headers values
func NewGetRegistryUnauthorized() *GetRegistryUnauthorized {

	return &GetRegistryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get registry unauthorized response
func (o *GetRegistryUnauthorized) WithXRequestID(xRequestID string) *GetRegistryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get registry unauthorized response
func (o *GetRegistryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get registry unauthorized response
func (o *GetRegistryUnauthorized) WithPayload(payload *models.Errors) *GetRegistryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get registry unauthorized response
func (o *GetRegistryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegistryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRegistryForbiddenCode is the HTTP code returned for type GetRegistryForbidden
const GetRegistryForbiddenCode int = 403

/*GetRegistryForbidden Forbidden

swagger:response getRegistryForbidden
*/
type GetRegistryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRegistryForbidden creates GetRegistryForbidden with default headers values
func NewGetRegistryForbidden() *GetRegistryForbidden {

	return &GetRegistryForbidden{}
}

// WithXRequestID adds the xRequestId to the get registry forbidden response
func (o *GetRegistryForbidden) WithXRequestID(xRequestID string) *GetRegistryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get registry forbidden response
func (o *GetRegistryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get registry forbidden response
func (o *GetRegistryForbidden) WithPayload(payload *models.Errors) *GetRegistryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get registry forbidden response
func (o *GetRegistryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegistryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRegistryNotFoundCode is the HTTP code returned for type GetRegistryNotFound
const GetRegistryNotFoundCode int = 404

/*GetRegistryNotFound Not found

swagger:response getRegistryNotFound
*/
type GetRegistryNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRegistryNotFound creates GetRegistryNotFound with default headers values
func NewGetRegistryNotFound() *GetRegistryNotFound {

	return &GetRegistryNotFound{}
}

// WithXRequestID adds the xRequestId to the get registry not found response
func (o *GetRegistryNotFound) WithXRequestID(xRequestID string) *GetRegistryNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get registry not found response
func (o *GetRegistryNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get registry not found response
func (o *GetRegistryNotFound) WithPayload(payload *models.Errors) *GetRegistryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get registry not found response
func (o *GetRegistryNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegistryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRegistryInternalServerErrorCode is the HTTP code returned for type GetRegistryInternalServerError
const GetRegistryInternalServerErrorCode int = 500

/*GetRegistryInternalServerError Internal server error

swagger:response getRegistryInternalServerError
*/
type GetRegistryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRegistryInternalServerError creates GetRegistryInternalServerError with default headers values
func NewGetRegistryInternalServerError() *GetRegistryInternalServerError {

	return &GetRegistryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get registry internal server error response
func (o *GetRegistryInternalServerError) WithXRequestID(xRequestID string) *GetRegistryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get registry internal server error response
func (o *GetRegistryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get registry internal server error response
func (o *GetRegistryInternalServerError) WithPayload(payload *models.Errors) *GetRegistryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get registry internal server error response
func (o *GetRegistryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegistryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
