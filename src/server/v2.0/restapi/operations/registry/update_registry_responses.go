// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateRegistryOKCode is the HTTP code returned for type UpdateRegistryOK
const UpdateRegistryOKCode int = 200

/*UpdateRegistryOK Success

swagger:response updateRegistryOK
*/
type UpdateRegistryOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateRegistryOK creates UpdateRegistryOK with default headers values
func NewUpdateRegistryOK() *UpdateRegistryOK {

	return &UpdateRegistryOK{}
}

// WithXRequestID adds the xRequestId to the update registry o k response
func (o *UpdateRegistryOK) WithXRequestID(xRequestID string) *UpdateRegistryOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update registry o k response
func (o *UpdateRegistryOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateRegistryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateRegistryUnauthorizedCode is the HTTP code returned for type UpdateRegistryUnauthorized
const UpdateRegistryUnauthorizedCode int = 401

/*UpdateRegistryUnauthorized Unauthorized

swagger:response updateRegistryUnauthorized
*/
type UpdateRegistryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRegistryUnauthorized creates UpdateRegistryUnauthorized with default headers values
func NewUpdateRegistryUnauthorized() *UpdateRegistryUnauthorized {

	return &UpdateRegistryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update registry unauthorized response
func (o *UpdateRegistryUnauthorized) WithXRequestID(xRequestID string) *UpdateRegistryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update registry unauthorized response
func (o *UpdateRegistryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update registry unauthorized response
func (o *UpdateRegistryUnauthorized) WithPayload(payload *models.Errors) *UpdateRegistryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update registry unauthorized response
func (o *UpdateRegistryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRegistryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRegistryForbiddenCode is the HTTP code returned for type UpdateRegistryForbidden
const UpdateRegistryForbiddenCode int = 403

/*UpdateRegistryForbidden Forbidden

swagger:response updateRegistryForbidden
*/
type UpdateRegistryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRegistryForbidden creates UpdateRegistryForbidden with default headers values
func NewUpdateRegistryForbidden() *UpdateRegistryForbidden {

	return &UpdateRegistryForbidden{}
}

// WithXRequestID adds the xRequestId to the update registry forbidden response
func (o *UpdateRegistryForbidden) WithXRequestID(xRequestID string) *UpdateRegistryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update registry forbidden response
func (o *UpdateRegistryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update registry forbidden response
func (o *UpdateRegistryForbidden) WithPayload(payload *models.Errors) *UpdateRegistryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update registry forbidden response
func (o *UpdateRegistryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRegistryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRegistryNotFoundCode is the HTTP code returned for type UpdateRegistryNotFound
const UpdateRegistryNotFoundCode int = 404

/*UpdateRegistryNotFound Not found

swagger:response updateRegistryNotFound
*/
type UpdateRegistryNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRegistryNotFound creates UpdateRegistryNotFound with default headers values
func NewUpdateRegistryNotFound() *UpdateRegistryNotFound {

	return &UpdateRegistryNotFound{}
}

// WithXRequestID adds the xRequestId to the update registry not found response
func (o *UpdateRegistryNotFound) WithXRequestID(xRequestID string) *UpdateRegistryNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update registry not found response
func (o *UpdateRegistryNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update registry not found response
func (o *UpdateRegistryNotFound) WithPayload(payload *models.Errors) *UpdateRegistryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update registry not found response
func (o *UpdateRegistryNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRegistryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRegistryConflictCode is the HTTP code returned for type UpdateRegistryConflict
const UpdateRegistryConflictCode int = 409

/*UpdateRegistryConflict Conflict

swagger:response updateRegistryConflict
*/
type UpdateRegistryConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRegistryConflict creates UpdateRegistryConflict with default headers values
func NewUpdateRegistryConflict() *UpdateRegistryConflict {

	return &UpdateRegistryConflict{}
}

// WithXRequestID adds the xRequestId to the update registry conflict response
func (o *UpdateRegistryConflict) WithXRequestID(xRequestID string) *UpdateRegistryConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update registry conflict response
func (o *UpdateRegistryConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update registry conflict response
func (o *UpdateRegistryConflict) WithPayload(payload *models.Errors) *UpdateRegistryConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update registry conflict response
func (o *UpdateRegistryConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRegistryConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRegistryInternalServerErrorCode is the HTTP code returned for type UpdateRegistryInternalServerError
const UpdateRegistryInternalServerErrorCode int = 500

/*UpdateRegistryInternalServerError Internal server error

swagger:response updateRegistryInternalServerError
*/
type UpdateRegistryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRegistryInternalServerError creates UpdateRegistryInternalServerError with default headers values
func NewUpdateRegistryInternalServerError() *UpdateRegistryInternalServerError {

	return &UpdateRegistryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update registry internal server error response
func (o *UpdateRegistryInternalServerError) WithXRequestID(xRequestID string) *UpdateRegistryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update registry internal server error response
func (o *UpdateRegistryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update registry internal server error response
func (o *UpdateRegistryInternalServerError) WithPayload(payload *models.Errors) *UpdateRegistryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update registry internal server error response
func (o *UpdateRegistryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRegistryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
