// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListUsersOKCode is the HTTP code returned for type ListUsersOK
const ListUsersOKCode int = 200

/*ListUsersOK return the list of users.

swagger:response listUsersOK
*/
type ListUsersOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of users

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.UserResp `json:"body,omitempty"`
}

// NewListUsersOK creates ListUsersOK with default headers values
func NewListUsersOK() *ListUsersOK {

	return &ListUsersOK{}
}

// WithLink adds the link to the list users o k response
func (o *ListUsersOK) WithLink(link string) *ListUsersOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list users o k response
func (o *ListUsersOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list users o k response
func (o *ListUsersOK) WithXTotalCount(xTotalCount int64) *ListUsersOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list users o k response
func (o *ListUsersOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list users o k response
func (o *ListUsersOK) WithPayload(payload []*models.UserResp) *ListUsersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list users o k response
func (o *ListUsersOK) SetPayload(payload []*models.UserResp) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUsersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserResp, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListUsersUnauthorizedCode is the HTTP code returned for type ListUsersUnauthorized
const ListUsersUnauthorizedCode int = 401

/*ListUsersUnauthorized Unauthorized

swagger:response listUsersUnauthorized
*/
type ListUsersUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListUsersUnauthorized creates ListUsersUnauthorized with default headers values
func NewListUsersUnauthorized() *ListUsersUnauthorized {

	return &ListUsersUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list users unauthorized response
func (o *ListUsersUnauthorized) WithXRequestID(xRequestID string) *ListUsersUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list users unauthorized response
func (o *ListUsersUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list users unauthorized response
func (o *ListUsersUnauthorized) WithPayload(payload *models.Errors) *ListUsersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list users unauthorized response
func (o *ListUsersUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUsersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListUsersForbiddenCode is the HTTP code returned for type ListUsersForbidden
const ListUsersForbiddenCode int = 403

/*ListUsersForbidden Forbidden

swagger:response listUsersForbidden
*/
type ListUsersForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListUsersForbidden creates ListUsersForbidden with default headers values
func NewListUsersForbidden() *ListUsersForbidden {

	return &ListUsersForbidden{}
}

// WithXRequestID adds the xRequestId to the list users forbidden response
func (o *ListUsersForbidden) WithXRequestID(xRequestID string) *ListUsersForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list users forbidden response
func (o *ListUsersForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list users forbidden response
func (o *ListUsersForbidden) WithPayload(payload *models.Errors) *ListUsersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list users forbidden response
func (o *ListUsersForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUsersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListUsersInternalServerErrorCode is the HTTP code returned for type ListUsersInternalServerError
const ListUsersInternalServerErrorCode int = 500

/*ListUsersInternalServerError Internal server error

swagger:response listUsersInternalServerError
*/
type ListUsersInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListUsersInternalServerError creates ListUsersInternalServerError with default headers values
func NewListUsersInternalServerError() *ListUsersInternalServerError {

	return &ListUsersInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list users internal server error response
func (o *ListUsersInternalServerError) WithXRequestID(xRequestID string) *ListUsersInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list users internal server error response
func (o *ListUsersInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list users internal server error response
func (o *ListUsersInternalServerError) WithPayload(payload *models.Errors) *ListUsersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list users internal server error response
func (o *ListUsersInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUsersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
