// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetCurrentUserInfoOKCode is the HTTP code returned for type GetCurrentUserInfoOK
const GetCurrentUserInfoOKCode int = 200

/*GetCurrentUserInfoOK Get current user information successfully.

swagger:response getCurrentUserInfoOK
*/
type GetCurrentUserInfoOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserResp `json:"body,omitempty"`
}

// NewGetCurrentUserInfoOK creates GetCurrentUserInfoOK with default headers values
func NewGetCurrentUserInfoOK() *GetCurrentUserInfoOK {

	return &GetCurrentUserInfoOK{}
}

// WithPayload adds the payload to the get current user info o k response
func (o *GetCurrentUserInfoOK) WithPayload(payload *models.UserResp) *GetCurrentUserInfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current user info o k response
func (o *GetCurrentUserInfoOK) SetPayload(payload *models.UserResp) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentUserInfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCurrentUserInfoUnauthorizedCode is the HTTP code returned for type GetCurrentUserInfoUnauthorized
const GetCurrentUserInfoUnauthorizedCode int = 401

/*GetCurrentUserInfoUnauthorized Unauthorized

swagger:response getCurrentUserInfoUnauthorized
*/
type GetCurrentUserInfoUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetCurrentUserInfoUnauthorized creates GetCurrentUserInfoUnauthorized with default headers values
func NewGetCurrentUserInfoUnauthorized() *GetCurrentUserInfoUnauthorized {

	return &GetCurrentUserInfoUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get current user info unauthorized response
func (o *GetCurrentUserInfoUnauthorized) WithXRequestID(xRequestID string) *GetCurrentUserInfoUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get current user info unauthorized response
func (o *GetCurrentUserInfoUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get current user info unauthorized response
func (o *GetCurrentUserInfoUnauthorized) WithPayload(payload *models.Errors) *GetCurrentUserInfoUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current user info unauthorized response
func (o *GetCurrentUserInfoUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentUserInfoUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCurrentUserInfoInternalServerErrorCode is the HTTP code returned for type GetCurrentUserInfoInternalServerError
const GetCurrentUserInfoInternalServerErrorCode int = 500

/*GetCurrentUserInfoInternalServerError Internal server error

swagger:response getCurrentUserInfoInternalServerError
*/
type GetCurrentUserInfoInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetCurrentUserInfoInternalServerError creates GetCurrentUserInfoInternalServerError with default headers values
func NewGetCurrentUserInfoInternalServerError() *GetCurrentUserInfoInternalServerError {

	return &GetCurrentUserInfoInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get current user info internal server error response
func (o *GetCurrentUserInfoInternalServerError) WithXRequestID(xRequestID string) *GetCurrentUserInfoInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get current user info internal server error response
func (o *GetCurrentUserInfoInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get current user info internal server error response
func (o *GetCurrentUserInfoInternalServerError) WithPayload(payload *models.Errors) *GetCurrentUserInfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current user info internal server error response
func (o *GetCurrentUserInfoInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentUserInfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
