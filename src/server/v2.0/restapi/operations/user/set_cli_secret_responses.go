// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// SetCliSecretOKCode is the HTTP code returned for type SetCliSecretOK
const SetCliSecretOKCode int = 200

/*SetCliSecretOK The secret is successfully updated

swagger:response setCliSecretOK
*/
type SetCliSecretOK struct {
}

// NewSetCliSecretOK creates SetCliSecretOK with default headers values
func NewSetCliSecretOK() *SetCliSecretOK {

	return &SetCliSecretOK{}
}

// WriteResponse to the client
func (o *SetCliSecretOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetCliSecretBadRequestCode is the HTTP code returned for type SetCliSecretBadRequest
const SetCliSecretBadRequestCode int = 400

/*SetCliSecretBadRequest Invalid user ID.  Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard.

swagger:response setCliSecretBadRequest
*/
type SetCliSecretBadRequest struct {
}

// NewSetCliSecretBadRequest creates SetCliSecretBadRequest with default headers values
func NewSetCliSecretBadRequest() *SetCliSecretBadRequest {

	return &SetCliSecretBadRequest{}
}

// WriteResponse to the client
func (o *SetCliSecretBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// SetCliSecretUnauthorizedCode is the HTTP code returned for type SetCliSecretUnauthorized
const SetCliSecretUnauthorizedCode int = 401

/*SetCliSecretUnauthorized Unauthorized

swagger:response setCliSecretUnauthorized
*/
type SetCliSecretUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetCliSecretUnauthorized creates SetCliSecretUnauthorized with default headers values
func NewSetCliSecretUnauthorized() *SetCliSecretUnauthorized {

	return &SetCliSecretUnauthorized{}
}

// WithXRequestID adds the xRequestId to the set cli secret unauthorized response
func (o *SetCliSecretUnauthorized) WithXRequestID(xRequestID string) *SetCliSecretUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set cli secret unauthorized response
func (o *SetCliSecretUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set cli secret unauthorized response
func (o *SetCliSecretUnauthorized) WithPayload(payload *models.Errors) *SetCliSecretUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set cli secret unauthorized response
func (o *SetCliSecretUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetCliSecretUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetCliSecretForbiddenCode is the HTTP code returned for type SetCliSecretForbidden
const SetCliSecretForbiddenCode int = 403

/*SetCliSecretForbidden Forbidden

swagger:response setCliSecretForbidden
*/
type SetCliSecretForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetCliSecretForbidden creates SetCliSecretForbidden with default headers values
func NewSetCliSecretForbidden() *SetCliSecretForbidden {

	return &SetCliSecretForbidden{}
}

// WithXRequestID adds the xRequestId to the set cli secret forbidden response
func (o *SetCliSecretForbidden) WithXRequestID(xRequestID string) *SetCliSecretForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set cli secret forbidden response
func (o *SetCliSecretForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set cli secret forbidden response
func (o *SetCliSecretForbidden) WithPayload(payload *models.Errors) *SetCliSecretForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set cli secret forbidden response
func (o *SetCliSecretForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetCliSecretForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetCliSecretNotFoundCode is the HTTP code returned for type SetCliSecretNotFound
const SetCliSecretNotFoundCode int = 404

/*SetCliSecretNotFound Not found

swagger:response setCliSecretNotFound
*/
type SetCliSecretNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetCliSecretNotFound creates SetCliSecretNotFound with default headers values
func NewSetCliSecretNotFound() *SetCliSecretNotFound {

	return &SetCliSecretNotFound{}
}

// WithXRequestID adds the xRequestId to the set cli secret not found response
func (o *SetCliSecretNotFound) WithXRequestID(xRequestID string) *SetCliSecretNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set cli secret not found response
func (o *SetCliSecretNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set cli secret not found response
func (o *SetCliSecretNotFound) WithPayload(payload *models.Errors) *SetCliSecretNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set cli secret not found response
func (o *SetCliSecretNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetCliSecretNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetCliSecretPreconditionFailedCode is the HTTP code returned for type SetCliSecretPreconditionFailed
const SetCliSecretPreconditionFailedCode int = 412

/*SetCliSecretPreconditionFailed The auth mode of the system is not "oidc_auth", or the user is not onboarded via OIDC AuthN.

swagger:response setCliSecretPreconditionFailed
*/
type SetCliSecretPreconditionFailed struct {
}

// NewSetCliSecretPreconditionFailed creates SetCliSecretPreconditionFailed with default headers values
func NewSetCliSecretPreconditionFailed() *SetCliSecretPreconditionFailed {

	return &SetCliSecretPreconditionFailed{}
}

// WriteResponse to the client
func (o *SetCliSecretPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(412)
}

// SetCliSecretInternalServerErrorCode is the HTTP code returned for type SetCliSecretInternalServerError
const SetCliSecretInternalServerErrorCode int = 500

/*SetCliSecretInternalServerError Internal server error

swagger:response setCliSecretInternalServerError
*/
type SetCliSecretInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetCliSecretInternalServerError creates SetCliSecretInternalServerError with default headers values
func NewSetCliSecretInternalServerError() *SetCliSecretInternalServerError {

	return &SetCliSecretInternalServerError{}
}

// WithXRequestID adds the xRequestId to the set cli secret internal server error response
func (o *SetCliSecretInternalServerError) WithXRequestID(xRequestID string) *SetCliSecretInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set cli secret internal server error response
func (o *SetCliSecretInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set cli secret internal server error response
func (o *SetCliSecretInternalServerError) WithPayload(payload *models.Errors) *SetCliSecretInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set cli secret internal server error response
func (o *SetCliSecretInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetCliSecretInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
