// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListReplicationPoliciesOKCode is the HTTP code returned for type ListReplicationPoliciesOK
const ListReplicationPoliciesOKCode int = 200

/*ListReplicationPoliciesOK Success

swagger:response listReplicationPoliciesOK
*/
type ListReplicationPoliciesOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of the resources

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ReplicationPolicy `json:"body,omitempty"`
}

// NewListReplicationPoliciesOK creates ListReplicationPoliciesOK with default headers values
func NewListReplicationPoliciesOK() *ListReplicationPoliciesOK {

	return &ListReplicationPoliciesOK{}
}

// WithLink adds the link to the list replication policies o k response
func (o *ListReplicationPoliciesOK) WithLink(link string) *ListReplicationPoliciesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list replication policies o k response
func (o *ListReplicationPoliciesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list replication policies o k response
func (o *ListReplicationPoliciesOK) WithXTotalCount(xTotalCount int64) *ListReplicationPoliciesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list replication policies o k response
func (o *ListReplicationPoliciesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list replication policies o k response
func (o *ListReplicationPoliciesOK) WithPayload(payload []*models.ReplicationPolicy) *ListReplicationPoliciesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication policies o k response
func (o *ListReplicationPoliciesOK) SetPayload(payload []*models.ReplicationPolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationPoliciesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ReplicationPolicy, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListReplicationPoliciesUnauthorizedCode is the HTTP code returned for type ListReplicationPoliciesUnauthorized
const ListReplicationPoliciesUnauthorizedCode int = 401

/*ListReplicationPoliciesUnauthorized Unauthorized

swagger:response listReplicationPoliciesUnauthorized
*/
type ListReplicationPoliciesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationPoliciesUnauthorized creates ListReplicationPoliciesUnauthorized with default headers values
func NewListReplicationPoliciesUnauthorized() *ListReplicationPoliciesUnauthorized {

	return &ListReplicationPoliciesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list replication policies unauthorized response
func (o *ListReplicationPoliciesUnauthorized) WithXRequestID(xRequestID string) *ListReplicationPoliciesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication policies unauthorized response
func (o *ListReplicationPoliciesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication policies unauthorized response
func (o *ListReplicationPoliciesUnauthorized) WithPayload(payload *models.Errors) *ListReplicationPoliciesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication policies unauthorized response
func (o *ListReplicationPoliciesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationPoliciesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListReplicationPoliciesForbiddenCode is the HTTP code returned for type ListReplicationPoliciesForbidden
const ListReplicationPoliciesForbiddenCode int = 403

/*ListReplicationPoliciesForbidden Forbidden

swagger:response listReplicationPoliciesForbidden
*/
type ListReplicationPoliciesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationPoliciesForbidden creates ListReplicationPoliciesForbidden with default headers values
func NewListReplicationPoliciesForbidden() *ListReplicationPoliciesForbidden {

	return &ListReplicationPoliciesForbidden{}
}

// WithXRequestID adds the xRequestId to the list replication policies forbidden response
func (o *ListReplicationPoliciesForbidden) WithXRequestID(xRequestID string) *ListReplicationPoliciesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication policies forbidden response
func (o *ListReplicationPoliciesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication policies forbidden response
func (o *ListReplicationPoliciesForbidden) WithPayload(payload *models.Errors) *ListReplicationPoliciesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication policies forbidden response
func (o *ListReplicationPoliciesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationPoliciesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListReplicationPoliciesInternalServerErrorCode is the HTTP code returned for type ListReplicationPoliciesInternalServerError
const ListReplicationPoliciesInternalServerErrorCode int = 500

/*ListReplicationPoliciesInternalServerError Internal server error

swagger:response listReplicationPoliciesInternalServerError
*/
type ListReplicationPoliciesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationPoliciesInternalServerError creates ListReplicationPoliciesInternalServerError with default headers values
func NewListReplicationPoliciesInternalServerError() *ListReplicationPoliciesInternalServerError {

	return &ListReplicationPoliciesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list replication policies internal server error response
func (o *ListReplicationPoliciesInternalServerError) WithXRequestID(xRequestID string) *ListReplicationPoliciesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication policies internal server error response
func (o *ListReplicationPoliciesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication policies internal server error response
func (o *ListReplicationPoliciesInternalServerError) WithPayload(payload *models.Errors) *ListReplicationPoliciesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication policies internal server error response
func (o *ListReplicationPoliciesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationPoliciesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
