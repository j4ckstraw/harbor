// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetReplicationLogOKCode is the HTTP code returned for type GetReplicationLogOK
const GetReplicationLogOKCode int = 200

/*GetReplicationLogOK Success

swagger:response getReplicationLogOK
*/
type GetReplicationLogOK struct {
	/*The content type of response body

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetReplicationLogOK creates GetReplicationLogOK with default headers values
func NewGetReplicationLogOK() *GetReplicationLogOK {

	return &GetReplicationLogOK{}
}

// WithContentType adds the contentType to the get replication log o k response
func (o *GetReplicationLogOK) WithContentType(contentType string) *GetReplicationLogOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the get replication log o k response
func (o *GetReplicationLogOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the get replication log o k response
func (o *GetReplicationLogOK) WithPayload(payload string) *GetReplicationLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication log o k response
func (o *GetReplicationLogOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetReplicationLogUnauthorizedCode is the HTTP code returned for type GetReplicationLogUnauthorized
const GetReplicationLogUnauthorizedCode int = 401

/*GetReplicationLogUnauthorized Unauthorized

swagger:response getReplicationLogUnauthorized
*/
type GetReplicationLogUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationLogUnauthorized creates GetReplicationLogUnauthorized with default headers values
func NewGetReplicationLogUnauthorized() *GetReplicationLogUnauthorized {

	return &GetReplicationLogUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get replication log unauthorized response
func (o *GetReplicationLogUnauthorized) WithXRequestID(xRequestID string) *GetReplicationLogUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication log unauthorized response
func (o *GetReplicationLogUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication log unauthorized response
func (o *GetReplicationLogUnauthorized) WithPayload(payload *models.Errors) *GetReplicationLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication log unauthorized response
func (o *GetReplicationLogUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationLogForbiddenCode is the HTTP code returned for type GetReplicationLogForbidden
const GetReplicationLogForbiddenCode int = 403

/*GetReplicationLogForbidden Forbidden

swagger:response getReplicationLogForbidden
*/
type GetReplicationLogForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationLogForbidden creates GetReplicationLogForbidden with default headers values
func NewGetReplicationLogForbidden() *GetReplicationLogForbidden {

	return &GetReplicationLogForbidden{}
}

// WithXRequestID adds the xRequestId to the get replication log forbidden response
func (o *GetReplicationLogForbidden) WithXRequestID(xRequestID string) *GetReplicationLogForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication log forbidden response
func (o *GetReplicationLogForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication log forbidden response
func (o *GetReplicationLogForbidden) WithPayload(payload *models.Errors) *GetReplicationLogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication log forbidden response
func (o *GetReplicationLogForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationLogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationLogNotFoundCode is the HTTP code returned for type GetReplicationLogNotFound
const GetReplicationLogNotFoundCode int = 404

/*GetReplicationLogNotFound Not found

swagger:response getReplicationLogNotFound
*/
type GetReplicationLogNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationLogNotFound creates GetReplicationLogNotFound with default headers values
func NewGetReplicationLogNotFound() *GetReplicationLogNotFound {

	return &GetReplicationLogNotFound{}
}

// WithXRequestID adds the xRequestId to the get replication log not found response
func (o *GetReplicationLogNotFound) WithXRequestID(xRequestID string) *GetReplicationLogNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication log not found response
func (o *GetReplicationLogNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication log not found response
func (o *GetReplicationLogNotFound) WithPayload(payload *models.Errors) *GetReplicationLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication log not found response
func (o *GetReplicationLogNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationLogInternalServerErrorCode is the HTTP code returned for type GetReplicationLogInternalServerError
const GetReplicationLogInternalServerErrorCode int = 500

/*GetReplicationLogInternalServerError Internal server error

swagger:response getReplicationLogInternalServerError
*/
type GetReplicationLogInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationLogInternalServerError creates GetReplicationLogInternalServerError with default headers values
func NewGetReplicationLogInternalServerError() *GetReplicationLogInternalServerError {

	return &GetReplicationLogInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get replication log internal server error response
func (o *GetReplicationLogInternalServerError) WithXRequestID(xRequestID string) *GetReplicationLogInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication log internal server error response
func (o *GetReplicationLogInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication log internal server error response
func (o *GetReplicationLogInternalServerError) WithPayload(payload *models.Errors) *GetReplicationLogInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication log internal server error response
func (o *GetReplicationLogInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationLogInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
