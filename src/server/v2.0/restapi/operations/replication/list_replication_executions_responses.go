// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListReplicationExecutionsOKCode is the HTTP code returned for type ListReplicationExecutionsOK
const ListReplicationExecutionsOKCode int = 200

/*ListReplicationExecutionsOK Success

swagger:response listReplicationExecutionsOK
*/
type ListReplicationExecutionsOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of the resources

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ReplicationExecution `json:"body,omitempty"`
}

// NewListReplicationExecutionsOK creates ListReplicationExecutionsOK with default headers values
func NewListReplicationExecutionsOK() *ListReplicationExecutionsOK {

	return &ListReplicationExecutionsOK{}
}

// WithLink adds the link to the list replication executions o k response
func (o *ListReplicationExecutionsOK) WithLink(link string) *ListReplicationExecutionsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list replication executions o k response
func (o *ListReplicationExecutionsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list replication executions o k response
func (o *ListReplicationExecutionsOK) WithXTotalCount(xTotalCount int64) *ListReplicationExecutionsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list replication executions o k response
func (o *ListReplicationExecutionsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list replication executions o k response
func (o *ListReplicationExecutionsOK) WithPayload(payload []*models.ReplicationExecution) *ListReplicationExecutionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication executions o k response
func (o *ListReplicationExecutionsOK) SetPayload(payload []*models.ReplicationExecution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationExecutionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ReplicationExecution, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListReplicationExecutionsUnauthorizedCode is the HTTP code returned for type ListReplicationExecutionsUnauthorized
const ListReplicationExecutionsUnauthorizedCode int = 401

/*ListReplicationExecutionsUnauthorized Unauthorized

swagger:response listReplicationExecutionsUnauthorized
*/
type ListReplicationExecutionsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationExecutionsUnauthorized creates ListReplicationExecutionsUnauthorized with default headers values
func NewListReplicationExecutionsUnauthorized() *ListReplicationExecutionsUnauthorized {

	return &ListReplicationExecutionsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list replication executions unauthorized response
func (o *ListReplicationExecutionsUnauthorized) WithXRequestID(xRequestID string) *ListReplicationExecutionsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication executions unauthorized response
func (o *ListReplicationExecutionsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication executions unauthorized response
func (o *ListReplicationExecutionsUnauthorized) WithPayload(payload *models.Errors) *ListReplicationExecutionsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication executions unauthorized response
func (o *ListReplicationExecutionsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationExecutionsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListReplicationExecutionsForbiddenCode is the HTTP code returned for type ListReplicationExecutionsForbidden
const ListReplicationExecutionsForbiddenCode int = 403

/*ListReplicationExecutionsForbidden Forbidden

swagger:response listReplicationExecutionsForbidden
*/
type ListReplicationExecutionsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationExecutionsForbidden creates ListReplicationExecutionsForbidden with default headers values
func NewListReplicationExecutionsForbidden() *ListReplicationExecutionsForbidden {

	return &ListReplicationExecutionsForbidden{}
}

// WithXRequestID adds the xRequestId to the list replication executions forbidden response
func (o *ListReplicationExecutionsForbidden) WithXRequestID(xRequestID string) *ListReplicationExecutionsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication executions forbidden response
func (o *ListReplicationExecutionsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication executions forbidden response
func (o *ListReplicationExecutionsForbidden) WithPayload(payload *models.Errors) *ListReplicationExecutionsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication executions forbidden response
func (o *ListReplicationExecutionsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationExecutionsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListReplicationExecutionsInternalServerErrorCode is the HTTP code returned for type ListReplicationExecutionsInternalServerError
const ListReplicationExecutionsInternalServerErrorCode int = 500

/*ListReplicationExecutionsInternalServerError Internal server error

swagger:response listReplicationExecutionsInternalServerError
*/
type ListReplicationExecutionsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationExecutionsInternalServerError creates ListReplicationExecutionsInternalServerError with default headers values
func NewListReplicationExecutionsInternalServerError() *ListReplicationExecutionsInternalServerError {

	return &ListReplicationExecutionsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list replication executions internal server error response
func (o *ListReplicationExecutionsInternalServerError) WithXRequestID(xRequestID string) *ListReplicationExecutionsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication executions internal server error response
func (o *ListReplicationExecutionsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication executions internal server error response
func (o *ListReplicationExecutionsInternalServerError) WithPayload(payload *models.Errors) *ListReplicationExecutionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication executions internal server error response
func (o *ListReplicationExecutionsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationExecutionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
