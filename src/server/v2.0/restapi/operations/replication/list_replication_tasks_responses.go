// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListReplicationTasksOKCode is the HTTP code returned for type ListReplicationTasksOK
const ListReplicationTasksOKCode int = 200

/*ListReplicationTasksOK Success

swagger:response listReplicationTasksOK
*/
type ListReplicationTasksOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of the resources

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ReplicationTask `json:"body,omitempty"`
}

// NewListReplicationTasksOK creates ListReplicationTasksOK with default headers values
func NewListReplicationTasksOK() *ListReplicationTasksOK {

	return &ListReplicationTasksOK{}
}

// WithLink adds the link to the list replication tasks o k response
func (o *ListReplicationTasksOK) WithLink(link string) *ListReplicationTasksOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list replication tasks o k response
func (o *ListReplicationTasksOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list replication tasks o k response
func (o *ListReplicationTasksOK) WithXTotalCount(xTotalCount int64) *ListReplicationTasksOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list replication tasks o k response
func (o *ListReplicationTasksOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list replication tasks o k response
func (o *ListReplicationTasksOK) WithPayload(payload []*models.ReplicationTask) *ListReplicationTasksOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication tasks o k response
func (o *ListReplicationTasksOK) SetPayload(payload []*models.ReplicationTask) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationTasksOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ReplicationTask, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListReplicationTasksUnauthorizedCode is the HTTP code returned for type ListReplicationTasksUnauthorized
const ListReplicationTasksUnauthorizedCode int = 401

/*ListReplicationTasksUnauthorized Unauthorized

swagger:response listReplicationTasksUnauthorized
*/
type ListReplicationTasksUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationTasksUnauthorized creates ListReplicationTasksUnauthorized with default headers values
func NewListReplicationTasksUnauthorized() *ListReplicationTasksUnauthorized {

	return &ListReplicationTasksUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list replication tasks unauthorized response
func (o *ListReplicationTasksUnauthorized) WithXRequestID(xRequestID string) *ListReplicationTasksUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication tasks unauthorized response
func (o *ListReplicationTasksUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication tasks unauthorized response
func (o *ListReplicationTasksUnauthorized) WithPayload(payload *models.Errors) *ListReplicationTasksUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication tasks unauthorized response
func (o *ListReplicationTasksUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationTasksUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListReplicationTasksForbiddenCode is the HTTP code returned for type ListReplicationTasksForbidden
const ListReplicationTasksForbiddenCode int = 403

/*ListReplicationTasksForbidden Forbidden

swagger:response listReplicationTasksForbidden
*/
type ListReplicationTasksForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationTasksForbidden creates ListReplicationTasksForbidden with default headers values
func NewListReplicationTasksForbidden() *ListReplicationTasksForbidden {

	return &ListReplicationTasksForbidden{}
}

// WithXRequestID adds the xRequestId to the list replication tasks forbidden response
func (o *ListReplicationTasksForbidden) WithXRequestID(xRequestID string) *ListReplicationTasksForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication tasks forbidden response
func (o *ListReplicationTasksForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication tasks forbidden response
func (o *ListReplicationTasksForbidden) WithPayload(payload *models.Errors) *ListReplicationTasksForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication tasks forbidden response
func (o *ListReplicationTasksForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationTasksForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListReplicationTasksInternalServerErrorCode is the HTTP code returned for type ListReplicationTasksInternalServerError
const ListReplicationTasksInternalServerErrorCode int = 500

/*ListReplicationTasksInternalServerError Internal server error

swagger:response listReplicationTasksInternalServerError
*/
type ListReplicationTasksInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListReplicationTasksInternalServerError creates ListReplicationTasksInternalServerError with default headers values
func NewListReplicationTasksInternalServerError() *ListReplicationTasksInternalServerError {

	return &ListReplicationTasksInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list replication tasks internal server error response
func (o *ListReplicationTasksInternalServerError) WithXRequestID(xRequestID string) *ListReplicationTasksInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list replication tasks internal server error response
func (o *ListReplicationTasksInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list replication tasks internal server error response
func (o *ListReplicationTasksInternalServerError) WithPayload(payload *models.Errors) *ListReplicationTasksInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list replication tasks internal server error response
func (o *ListReplicationTasksInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListReplicationTasksInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
