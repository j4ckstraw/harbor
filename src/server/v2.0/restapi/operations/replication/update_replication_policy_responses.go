// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateReplicationPolicyOKCode is the HTTP code returned for type UpdateReplicationPolicyOK
const UpdateReplicationPolicyOKCode int = 200

/*UpdateReplicationPolicyOK Success

swagger:response updateReplicationPolicyOK
*/
type UpdateReplicationPolicyOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateReplicationPolicyOK creates UpdateReplicationPolicyOK with default headers values
func NewUpdateReplicationPolicyOK() *UpdateReplicationPolicyOK {

	return &UpdateReplicationPolicyOK{}
}

// WithXRequestID adds the xRequestId to the update replication policy o k response
func (o *UpdateReplicationPolicyOK) WithXRequestID(xRequestID string) *UpdateReplicationPolicyOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update replication policy o k response
func (o *UpdateReplicationPolicyOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateReplicationPolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateReplicationPolicyUnauthorizedCode is the HTTP code returned for type UpdateReplicationPolicyUnauthorized
const UpdateReplicationPolicyUnauthorizedCode int = 401

/*UpdateReplicationPolicyUnauthorized Unauthorized

swagger:response updateReplicationPolicyUnauthorized
*/
type UpdateReplicationPolicyUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateReplicationPolicyUnauthorized creates UpdateReplicationPolicyUnauthorized with default headers values
func NewUpdateReplicationPolicyUnauthorized() *UpdateReplicationPolicyUnauthorized {

	return &UpdateReplicationPolicyUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update replication policy unauthorized response
func (o *UpdateReplicationPolicyUnauthorized) WithXRequestID(xRequestID string) *UpdateReplicationPolicyUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update replication policy unauthorized response
func (o *UpdateReplicationPolicyUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update replication policy unauthorized response
func (o *UpdateReplicationPolicyUnauthorized) WithPayload(payload *models.Errors) *UpdateReplicationPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update replication policy unauthorized response
func (o *UpdateReplicationPolicyUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateReplicationPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateReplicationPolicyForbiddenCode is the HTTP code returned for type UpdateReplicationPolicyForbidden
const UpdateReplicationPolicyForbiddenCode int = 403

/*UpdateReplicationPolicyForbidden Forbidden

swagger:response updateReplicationPolicyForbidden
*/
type UpdateReplicationPolicyForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateReplicationPolicyForbidden creates UpdateReplicationPolicyForbidden with default headers values
func NewUpdateReplicationPolicyForbidden() *UpdateReplicationPolicyForbidden {

	return &UpdateReplicationPolicyForbidden{}
}

// WithXRequestID adds the xRequestId to the update replication policy forbidden response
func (o *UpdateReplicationPolicyForbidden) WithXRequestID(xRequestID string) *UpdateReplicationPolicyForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update replication policy forbidden response
func (o *UpdateReplicationPolicyForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update replication policy forbidden response
func (o *UpdateReplicationPolicyForbidden) WithPayload(payload *models.Errors) *UpdateReplicationPolicyForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update replication policy forbidden response
func (o *UpdateReplicationPolicyForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateReplicationPolicyForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateReplicationPolicyNotFoundCode is the HTTP code returned for type UpdateReplicationPolicyNotFound
const UpdateReplicationPolicyNotFoundCode int = 404

/*UpdateReplicationPolicyNotFound Not found

swagger:response updateReplicationPolicyNotFound
*/
type UpdateReplicationPolicyNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateReplicationPolicyNotFound creates UpdateReplicationPolicyNotFound with default headers values
func NewUpdateReplicationPolicyNotFound() *UpdateReplicationPolicyNotFound {

	return &UpdateReplicationPolicyNotFound{}
}

// WithXRequestID adds the xRequestId to the update replication policy not found response
func (o *UpdateReplicationPolicyNotFound) WithXRequestID(xRequestID string) *UpdateReplicationPolicyNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update replication policy not found response
func (o *UpdateReplicationPolicyNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update replication policy not found response
func (o *UpdateReplicationPolicyNotFound) WithPayload(payload *models.Errors) *UpdateReplicationPolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update replication policy not found response
func (o *UpdateReplicationPolicyNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateReplicationPolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateReplicationPolicyConflictCode is the HTTP code returned for type UpdateReplicationPolicyConflict
const UpdateReplicationPolicyConflictCode int = 409

/*UpdateReplicationPolicyConflict Conflict

swagger:response updateReplicationPolicyConflict
*/
type UpdateReplicationPolicyConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateReplicationPolicyConflict creates UpdateReplicationPolicyConflict with default headers values
func NewUpdateReplicationPolicyConflict() *UpdateReplicationPolicyConflict {

	return &UpdateReplicationPolicyConflict{}
}

// WithXRequestID adds the xRequestId to the update replication policy conflict response
func (o *UpdateReplicationPolicyConflict) WithXRequestID(xRequestID string) *UpdateReplicationPolicyConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update replication policy conflict response
func (o *UpdateReplicationPolicyConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update replication policy conflict response
func (o *UpdateReplicationPolicyConflict) WithPayload(payload *models.Errors) *UpdateReplicationPolicyConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update replication policy conflict response
func (o *UpdateReplicationPolicyConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateReplicationPolicyConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateReplicationPolicyInternalServerErrorCode is the HTTP code returned for type UpdateReplicationPolicyInternalServerError
const UpdateReplicationPolicyInternalServerErrorCode int = 500

/*UpdateReplicationPolicyInternalServerError Internal server error

swagger:response updateReplicationPolicyInternalServerError
*/
type UpdateReplicationPolicyInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateReplicationPolicyInternalServerError creates UpdateReplicationPolicyInternalServerError with default headers values
func NewUpdateReplicationPolicyInternalServerError() *UpdateReplicationPolicyInternalServerError {

	return &UpdateReplicationPolicyInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update replication policy internal server error response
func (o *UpdateReplicationPolicyInternalServerError) WithXRequestID(xRequestID string) *UpdateReplicationPolicyInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update replication policy internal server error response
func (o *UpdateReplicationPolicyInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update replication policy internal server error response
func (o *UpdateReplicationPolicyInternalServerError) WithPayload(payload *models.Errors) *UpdateReplicationPolicyInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update replication policy internal server error response
func (o *UpdateReplicationPolicyInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateReplicationPolicyInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
