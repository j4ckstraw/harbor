// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StartReplicationCreatedCode is the HTTP code returned for type StartReplicationCreated
const StartReplicationCreatedCode int = 201

/*StartReplicationCreated Created

swagger:response startReplicationCreated
*/
type StartReplicationCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewStartReplicationCreated creates StartReplicationCreated with default headers values
func NewStartReplicationCreated() *StartReplicationCreated {

	return &StartReplicationCreated{}
}

// WithLocation adds the location to the start replication created response
func (o *StartReplicationCreated) WithLocation(location string) *StartReplicationCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the start replication created response
func (o *StartReplicationCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the start replication created response
func (o *StartReplicationCreated) WithXRequestID(xRequestID string) *StartReplicationCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the start replication created response
func (o *StartReplicationCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *StartReplicationCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// StartReplicationBadRequestCode is the HTTP code returned for type StartReplicationBadRequest
const StartReplicationBadRequestCode int = 400

/*StartReplicationBadRequest Bad request

swagger:response startReplicationBadRequest
*/
type StartReplicationBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStartReplicationBadRequest creates StartReplicationBadRequest with default headers values
func NewStartReplicationBadRequest() *StartReplicationBadRequest {

	return &StartReplicationBadRequest{}
}

// WithXRequestID adds the xRequestId to the start replication bad request response
func (o *StartReplicationBadRequest) WithXRequestID(xRequestID string) *StartReplicationBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the start replication bad request response
func (o *StartReplicationBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the start replication bad request response
func (o *StartReplicationBadRequest) WithPayload(payload *models.Errors) *StartReplicationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start replication bad request response
func (o *StartReplicationBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartReplicationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartReplicationUnauthorizedCode is the HTTP code returned for type StartReplicationUnauthorized
const StartReplicationUnauthorizedCode int = 401

/*StartReplicationUnauthorized Unauthorized

swagger:response startReplicationUnauthorized
*/
type StartReplicationUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStartReplicationUnauthorized creates StartReplicationUnauthorized with default headers values
func NewStartReplicationUnauthorized() *StartReplicationUnauthorized {

	return &StartReplicationUnauthorized{}
}

// WithXRequestID adds the xRequestId to the start replication unauthorized response
func (o *StartReplicationUnauthorized) WithXRequestID(xRequestID string) *StartReplicationUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the start replication unauthorized response
func (o *StartReplicationUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the start replication unauthorized response
func (o *StartReplicationUnauthorized) WithPayload(payload *models.Errors) *StartReplicationUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start replication unauthorized response
func (o *StartReplicationUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartReplicationUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartReplicationForbiddenCode is the HTTP code returned for type StartReplicationForbidden
const StartReplicationForbiddenCode int = 403

/*StartReplicationForbidden Forbidden

swagger:response startReplicationForbidden
*/
type StartReplicationForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStartReplicationForbidden creates StartReplicationForbidden with default headers values
func NewStartReplicationForbidden() *StartReplicationForbidden {

	return &StartReplicationForbidden{}
}

// WithXRequestID adds the xRequestId to the start replication forbidden response
func (o *StartReplicationForbidden) WithXRequestID(xRequestID string) *StartReplicationForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the start replication forbidden response
func (o *StartReplicationForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the start replication forbidden response
func (o *StartReplicationForbidden) WithPayload(payload *models.Errors) *StartReplicationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start replication forbidden response
func (o *StartReplicationForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartReplicationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartReplicationInternalServerErrorCode is the HTTP code returned for type StartReplicationInternalServerError
const StartReplicationInternalServerErrorCode int = 500

/*StartReplicationInternalServerError Internal server error

swagger:response startReplicationInternalServerError
*/
type StartReplicationInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStartReplicationInternalServerError creates StartReplicationInternalServerError with default headers values
func NewStartReplicationInternalServerError() *StartReplicationInternalServerError {

	return &StartReplicationInternalServerError{}
}

// WithXRequestID adds the xRequestId to the start replication internal server error response
func (o *StartReplicationInternalServerError) WithXRequestID(xRequestID string) *StartReplicationInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the start replication internal server error response
func (o *StartReplicationInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the start replication internal server error response
func (o *StartReplicationInternalServerError) WithPayload(payload *models.Errors) *StartReplicationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start replication internal server error response
func (o *StartReplicationInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartReplicationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
