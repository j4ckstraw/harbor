// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateReplicationPolicyCreatedCode is the HTTP code returned for type CreateReplicationPolicyCreated
const CreateReplicationPolicyCreatedCode int = 201

/*CreateReplicationPolicyCreated Created

swagger:response createReplicationPolicyCreated
*/
type CreateReplicationPolicyCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreateReplicationPolicyCreated creates CreateReplicationPolicyCreated with default headers values
func NewCreateReplicationPolicyCreated() *CreateReplicationPolicyCreated {

	return &CreateReplicationPolicyCreated{}
}

// WithLocation adds the location to the create replication policy created response
func (o *CreateReplicationPolicyCreated) WithLocation(location string) *CreateReplicationPolicyCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create replication policy created response
func (o *CreateReplicationPolicyCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create replication policy created response
func (o *CreateReplicationPolicyCreated) WithXRequestID(xRequestID string) *CreateReplicationPolicyCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create replication policy created response
func (o *CreateReplicationPolicyCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreateReplicationPolicyCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateReplicationPolicyBadRequestCode is the HTTP code returned for type CreateReplicationPolicyBadRequest
const CreateReplicationPolicyBadRequestCode int = 400

/*CreateReplicationPolicyBadRequest Bad request

swagger:response createReplicationPolicyBadRequest
*/
type CreateReplicationPolicyBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateReplicationPolicyBadRequest creates CreateReplicationPolicyBadRequest with default headers values
func NewCreateReplicationPolicyBadRequest() *CreateReplicationPolicyBadRequest {

	return &CreateReplicationPolicyBadRequest{}
}

// WithXRequestID adds the xRequestId to the create replication policy bad request response
func (o *CreateReplicationPolicyBadRequest) WithXRequestID(xRequestID string) *CreateReplicationPolicyBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create replication policy bad request response
func (o *CreateReplicationPolicyBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create replication policy bad request response
func (o *CreateReplicationPolicyBadRequest) WithPayload(payload *models.Errors) *CreateReplicationPolicyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create replication policy bad request response
func (o *CreateReplicationPolicyBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReplicationPolicyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateReplicationPolicyUnauthorizedCode is the HTTP code returned for type CreateReplicationPolicyUnauthorized
const CreateReplicationPolicyUnauthorizedCode int = 401

/*CreateReplicationPolicyUnauthorized Unauthorized

swagger:response createReplicationPolicyUnauthorized
*/
type CreateReplicationPolicyUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateReplicationPolicyUnauthorized creates CreateReplicationPolicyUnauthorized with default headers values
func NewCreateReplicationPolicyUnauthorized() *CreateReplicationPolicyUnauthorized {

	return &CreateReplicationPolicyUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create replication policy unauthorized response
func (o *CreateReplicationPolicyUnauthorized) WithXRequestID(xRequestID string) *CreateReplicationPolicyUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create replication policy unauthorized response
func (o *CreateReplicationPolicyUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create replication policy unauthorized response
func (o *CreateReplicationPolicyUnauthorized) WithPayload(payload *models.Errors) *CreateReplicationPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create replication policy unauthorized response
func (o *CreateReplicationPolicyUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReplicationPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateReplicationPolicyForbiddenCode is the HTTP code returned for type CreateReplicationPolicyForbidden
const CreateReplicationPolicyForbiddenCode int = 403

/*CreateReplicationPolicyForbidden Forbidden

swagger:response createReplicationPolicyForbidden
*/
type CreateReplicationPolicyForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateReplicationPolicyForbidden creates CreateReplicationPolicyForbidden with default headers values
func NewCreateReplicationPolicyForbidden() *CreateReplicationPolicyForbidden {

	return &CreateReplicationPolicyForbidden{}
}

// WithXRequestID adds the xRequestId to the create replication policy forbidden response
func (o *CreateReplicationPolicyForbidden) WithXRequestID(xRequestID string) *CreateReplicationPolicyForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create replication policy forbidden response
func (o *CreateReplicationPolicyForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create replication policy forbidden response
func (o *CreateReplicationPolicyForbidden) WithPayload(payload *models.Errors) *CreateReplicationPolicyForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create replication policy forbidden response
func (o *CreateReplicationPolicyForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReplicationPolicyForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateReplicationPolicyConflictCode is the HTTP code returned for type CreateReplicationPolicyConflict
const CreateReplicationPolicyConflictCode int = 409

/*CreateReplicationPolicyConflict Conflict

swagger:response createReplicationPolicyConflict
*/
type CreateReplicationPolicyConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateReplicationPolicyConflict creates CreateReplicationPolicyConflict with default headers values
func NewCreateReplicationPolicyConflict() *CreateReplicationPolicyConflict {

	return &CreateReplicationPolicyConflict{}
}

// WithXRequestID adds the xRequestId to the create replication policy conflict response
func (o *CreateReplicationPolicyConflict) WithXRequestID(xRequestID string) *CreateReplicationPolicyConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create replication policy conflict response
func (o *CreateReplicationPolicyConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create replication policy conflict response
func (o *CreateReplicationPolicyConflict) WithPayload(payload *models.Errors) *CreateReplicationPolicyConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create replication policy conflict response
func (o *CreateReplicationPolicyConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReplicationPolicyConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateReplicationPolicyInternalServerErrorCode is the HTTP code returned for type CreateReplicationPolicyInternalServerError
const CreateReplicationPolicyInternalServerErrorCode int = 500

/*CreateReplicationPolicyInternalServerError Internal server error

swagger:response createReplicationPolicyInternalServerError
*/
type CreateReplicationPolicyInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateReplicationPolicyInternalServerError creates CreateReplicationPolicyInternalServerError with default headers values
func NewCreateReplicationPolicyInternalServerError() *CreateReplicationPolicyInternalServerError {

	return &CreateReplicationPolicyInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create replication policy internal server error response
func (o *CreateReplicationPolicyInternalServerError) WithXRequestID(xRequestID string) *CreateReplicationPolicyInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create replication policy internal server error response
func (o *CreateReplicationPolicyInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create replication policy internal server error response
func (o *CreateReplicationPolicyInternalServerError) WithPayload(payload *models.Errors) *CreateReplicationPolicyInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create replication policy internal server error response
func (o *CreateReplicationPolicyInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateReplicationPolicyInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
