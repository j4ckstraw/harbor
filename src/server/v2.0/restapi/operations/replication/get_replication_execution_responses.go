// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetReplicationExecutionOKCode is the HTTP code returned for type GetReplicationExecutionOK
const GetReplicationExecutionOKCode int = 200

/*GetReplicationExecutionOK Success

swagger:response getReplicationExecutionOK
*/
type GetReplicationExecutionOK struct {

	/*
	  In: Body
	*/
	Payload *models.ReplicationExecution `json:"body,omitempty"`
}

// NewGetReplicationExecutionOK creates GetReplicationExecutionOK with default headers values
func NewGetReplicationExecutionOK() *GetReplicationExecutionOK {

	return &GetReplicationExecutionOK{}
}

// WithPayload adds the payload to the get replication execution o k response
func (o *GetReplicationExecutionOK) WithPayload(payload *models.ReplicationExecution) *GetReplicationExecutionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication execution o k response
func (o *GetReplicationExecutionOK) SetPayload(payload *models.ReplicationExecution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationExecutionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationExecutionUnauthorizedCode is the HTTP code returned for type GetReplicationExecutionUnauthorized
const GetReplicationExecutionUnauthorizedCode int = 401

/*GetReplicationExecutionUnauthorized Unauthorized

swagger:response getReplicationExecutionUnauthorized
*/
type GetReplicationExecutionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationExecutionUnauthorized creates GetReplicationExecutionUnauthorized with default headers values
func NewGetReplicationExecutionUnauthorized() *GetReplicationExecutionUnauthorized {

	return &GetReplicationExecutionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get replication execution unauthorized response
func (o *GetReplicationExecutionUnauthorized) WithXRequestID(xRequestID string) *GetReplicationExecutionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication execution unauthorized response
func (o *GetReplicationExecutionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication execution unauthorized response
func (o *GetReplicationExecutionUnauthorized) WithPayload(payload *models.Errors) *GetReplicationExecutionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication execution unauthorized response
func (o *GetReplicationExecutionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationExecutionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationExecutionForbiddenCode is the HTTP code returned for type GetReplicationExecutionForbidden
const GetReplicationExecutionForbiddenCode int = 403

/*GetReplicationExecutionForbidden Forbidden

swagger:response getReplicationExecutionForbidden
*/
type GetReplicationExecutionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationExecutionForbidden creates GetReplicationExecutionForbidden with default headers values
func NewGetReplicationExecutionForbidden() *GetReplicationExecutionForbidden {

	return &GetReplicationExecutionForbidden{}
}

// WithXRequestID adds the xRequestId to the get replication execution forbidden response
func (o *GetReplicationExecutionForbidden) WithXRequestID(xRequestID string) *GetReplicationExecutionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication execution forbidden response
func (o *GetReplicationExecutionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication execution forbidden response
func (o *GetReplicationExecutionForbidden) WithPayload(payload *models.Errors) *GetReplicationExecutionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication execution forbidden response
func (o *GetReplicationExecutionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationExecutionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationExecutionNotFoundCode is the HTTP code returned for type GetReplicationExecutionNotFound
const GetReplicationExecutionNotFoundCode int = 404

/*GetReplicationExecutionNotFound Not found

swagger:response getReplicationExecutionNotFound
*/
type GetReplicationExecutionNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationExecutionNotFound creates GetReplicationExecutionNotFound with default headers values
func NewGetReplicationExecutionNotFound() *GetReplicationExecutionNotFound {

	return &GetReplicationExecutionNotFound{}
}

// WithXRequestID adds the xRequestId to the get replication execution not found response
func (o *GetReplicationExecutionNotFound) WithXRequestID(xRequestID string) *GetReplicationExecutionNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication execution not found response
func (o *GetReplicationExecutionNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication execution not found response
func (o *GetReplicationExecutionNotFound) WithPayload(payload *models.Errors) *GetReplicationExecutionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication execution not found response
func (o *GetReplicationExecutionNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationExecutionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationExecutionInternalServerErrorCode is the HTTP code returned for type GetReplicationExecutionInternalServerError
const GetReplicationExecutionInternalServerErrorCode int = 500

/*GetReplicationExecutionInternalServerError Internal server error

swagger:response getReplicationExecutionInternalServerError
*/
type GetReplicationExecutionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetReplicationExecutionInternalServerError creates GetReplicationExecutionInternalServerError with default headers values
func NewGetReplicationExecutionInternalServerError() *GetReplicationExecutionInternalServerError {

	return &GetReplicationExecutionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get replication execution internal server error response
func (o *GetReplicationExecutionInternalServerError) WithXRequestID(xRequestID string) *GetReplicationExecutionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get replication execution internal server error response
func (o *GetReplicationExecutionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get replication execution internal server error response
func (o *GetReplicationExecutionInternalServerError) WithPayload(payload *models.Errors) *GetReplicationExecutionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication execution internal server error response
func (o *GetReplicationExecutionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationExecutionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
