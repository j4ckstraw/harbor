// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteReplicationPolicyOKCode is the HTTP code returned for type DeleteReplicationPolicyOK
const DeleteReplicationPolicyOKCode int = 200

/*DeleteReplicationPolicyOK Success

swagger:response deleteReplicationPolicyOK
*/
type DeleteReplicationPolicyOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteReplicationPolicyOK creates DeleteReplicationPolicyOK with default headers values
func NewDeleteReplicationPolicyOK() *DeleteReplicationPolicyOK {

	return &DeleteReplicationPolicyOK{}
}

// WithXRequestID adds the xRequestId to the delete replication policy o k response
func (o *DeleteReplicationPolicyOK) WithXRequestID(xRequestID string) *DeleteReplicationPolicyOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete replication policy o k response
func (o *DeleteReplicationPolicyOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteReplicationPolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteReplicationPolicyUnauthorizedCode is the HTTP code returned for type DeleteReplicationPolicyUnauthorized
const DeleteReplicationPolicyUnauthorizedCode int = 401

/*DeleteReplicationPolicyUnauthorized Unauthorized

swagger:response deleteReplicationPolicyUnauthorized
*/
type DeleteReplicationPolicyUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteReplicationPolicyUnauthorized creates DeleteReplicationPolicyUnauthorized with default headers values
func NewDeleteReplicationPolicyUnauthorized() *DeleteReplicationPolicyUnauthorized {

	return &DeleteReplicationPolicyUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete replication policy unauthorized response
func (o *DeleteReplicationPolicyUnauthorized) WithXRequestID(xRequestID string) *DeleteReplicationPolicyUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete replication policy unauthorized response
func (o *DeleteReplicationPolicyUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete replication policy unauthorized response
func (o *DeleteReplicationPolicyUnauthorized) WithPayload(payload *models.Errors) *DeleteReplicationPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete replication policy unauthorized response
func (o *DeleteReplicationPolicyUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReplicationPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteReplicationPolicyForbiddenCode is the HTTP code returned for type DeleteReplicationPolicyForbidden
const DeleteReplicationPolicyForbiddenCode int = 403

/*DeleteReplicationPolicyForbidden Forbidden

swagger:response deleteReplicationPolicyForbidden
*/
type DeleteReplicationPolicyForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteReplicationPolicyForbidden creates DeleteReplicationPolicyForbidden with default headers values
func NewDeleteReplicationPolicyForbidden() *DeleteReplicationPolicyForbidden {

	return &DeleteReplicationPolicyForbidden{}
}

// WithXRequestID adds the xRequestId to the delete replication policy forbidden response
func (o *DeleteReplicationPolicyForbidden) WithXRequestID(xRequestID string) *DeleteReplicationPolicyForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete replication policy forbidden response
func (o *DeleteReplicationPolicyForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete replication policy forbidden response
func (o *DeleteReplicationPolicyForbidden) WithPayload(payload *models.Errors) *DeleteReplicationPolicyForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete replication policy forbidden response
func (o *DeleteReplicationPolicyForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReplicationPolicyForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteReplicationPolicyNotFoundCode is the HTTP code returned for type DeleteReplicationPolicyNotFound
const DeleteReplicationPolicyNotFoundCode int = 404

/*DeleteReplicationPolicyNotFound Not found

swagger:response deleteReplicationPolicyNotFound
*/
type DeleteReplicationPolicyNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteReplicationPolicyNotFound creates DeleteReplicationPolicyNotFound with default headers values
func NewDeleteReplicationPolicyNotFound() *DeleteReplicationPolicyNotFound {

	return &DeleteReplicationPolicyNotFound{}
}

// WithXRequestID adds the xRequestId to the delete replication policy not found response
func (o *DeleteReplicationPolicyNotFound) WithXRequestID(xRequestID string) *DeleteReplicationPolicyNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete replication policy not found response
func (o *DeleteReplicationPolicyNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete replication policy not found response
func (o *DeleteReplicationPolicyNotFound) WithPayload(payload *models.Errors) *DeleteReplicationPolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete replication policy not found response
func (o *DeleteReplicationPolicyNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReplicationPolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteReplicationPolicyPreconditionFailedCode is the HTTP code returned for type DeleteReplicationPolicyPreconditionFailed
const DeleteReplicationPolicyPreconditionFailedCode int = 412

/*DeleteReplicationPolicyPreconditionFailed Precondition failed

swagger:response deleteReplicationPolicyPreconditionFailed
*/
type DeleteReplicationPolicyPreconditionFailed struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteReplicationPolicyPreconditionFailed creates DeleteReplicationPolicyPreconditionFailed with default headers values
func NewDeleteReplicationPolicyPreconditionFailed() *DeleteReplicationPolicyPreconditionFailed {

	return &DeleteReplicationPolicyPreconditionFailed{}
}

// WithXRequestID adds the xRequestId to the delete replication policy precondition failed response
func (o *DeleteReplicationPolicyPreconditionFailed) WithXRequestID(xRequestID string) *DeleteReplicationPolicyPreconditionFailed {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete replication policy precondition failed response
func (o *DeleteReplicationPolicyPreconditionFailed) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete replication policy precondition failed response
func (o *DeleteReplicationPolicyPreconditionFailed) WithPayload(payload *models.Errors) *DeleteReplicationPolicyPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete replication policy precondition failed response
func (o *DeleteReplicationPolicyPreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReplicationPolicyPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteReplicationPolicyInternalServerErrorCode is the HTTP code returned for type DeleteReplicationPolicyInternalServerError
const DeleteReplicationPolicyInternalServerErrorCode int = 500

/*DeleteReplicationPolicyInternalServerError Internal server error

swagger:response deleteReplicationPolicyInternalServerError
*/
type DeleteReplicationPolicyInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteReplicationPolicyInternalServerError creates DeleteReplicationPolicyInternalServerError with default headers values
func NewDeleteReplicationPolicyInternalServerError() *DeleteReplicationPolicyInternalServerError {

	return &DeleteReplicationPolicyInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete replication policy internal server error response
func (o *DeleteReplicationPolicyInternalServerError) WithXRequestID(xRequestID string) *DeleteReplicationPolicyInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete replication policy internal server error response
func (o *DeleteReplicationPolicyInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete replication policy internal server error response
func (o *DeleteReplicationPolicyInternalServerError) WithPayload(payload *models.Errors) *DeleteReplicationPolicyInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete replication policy internal server error response
func (o *DeleteReplicationPolicyInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReplicationPolicyInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
