// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListProvidersOKCode is the HTTP code returned for type ListProvidersOK
const ListProvidersOKCode int = 200

/*ListProvidersOK Success

swagger:response listProvidersOK
*/
type ListProvidersOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Metadata `json:"body,omitempty"`
}

// NewListProvidersOK creates ListProvidersOK with default headers values
func NewListProvidersOK() *ListProvidersOK {

	return &ListProvidersOK{}
}

// WithPayload adds the payload to the list providers o k response
func (o *ListProvidersOK) WithPayload(payload []*models.Metadata) *ListProvidersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers o k response
func (o *ListProvidersOK) SetPayload(payload []*models.Metadata) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Metadata, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListProvidersBadRequestCode is the HTTP code returned for type ListProvidersBadRequest
const ListProvidersBadRequestCode int = 400

/*ListProvidersBadRequest Bad request

swagger:response listProvidersBadRequest
*/
type ListProvidersBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersBadRequest creates ListProvidersBadRequest with default headers values
func NewListProvidersBadRequest() *ListProvidersBadRequest {

	return &ListProvidersBadRequest{}
}

// WithXRequestID adds the xRequestId to the list providers bad request response
func (o *ListProvidersBadRequest) WithXRequestID(xRequestID string) *ListProvidersBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers bad request response
func (o *ListProvidersBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers bad request response
func (o *ListProvidersBadRequest) WithPayload(payload *models.Errors) *ListProvidersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers bad request response
func (o *ListProvidersBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersUnauthorizedCode is the HTTP code returned for type ListProvidersUnauthorized
const ListProvidersUnauthorizedCode int = 401

/*ListProvidersUnauthorized Unauthorized

swagger:response listProvidersUnauthorized
*/
type ListProvidersUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersUnauthorized creates ListProvidersUnauthorized with default headers values
func NewListProvidersUnauthorized() *ListProvidersUnauthorized {

	return &ListProvidersUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list providers unauthorized response
func (o *ListProvidersUnauthorized) WithXRequestID(xRequestID string) *ListProvidersUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers unauthorized response
func (o *ListProvidersUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers unauthorized response
func (o *ListProvidersUnauthorized) WithPayload(payload *models.Errors) *ListProvidersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers unauthorized response
func (o *ListProvidersUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersForbiddenCode is the HTTP code returned for type ListProvidersForbidden
const ListProvidersForbiddenCode int = 403

/*ListProvidersForbidden Forbidden

swagger:response listProvidersForbidden
*/
type ListProvidersForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersForbidden creates ListProvidersForbidden with default headers values
func NewListProvidersForbidden() *ListProvidersForbidden {

	return &ListProvidersForbidden{}
}

// WithXRequestID adds the xRequestId to the list providers forbidden response
func (o *ListProvidersForbidden) WithXRequestID(xRequestID string) *ListProvidersForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers forbidden response
func (o *ListProvidersForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers forbidden response
func (o *ListProvidersForbidden) WithPayload(payload *models.Errors) *ListProvidersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers forbidden response
func (o *ListProvidersForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersNotFoundCode is the HTTP code returned for type ListProvidersNotFound
const ListProvidersNotFoundCode int = 404

/*ListProvidersNotFound Not found

swagger:response listProvidersNotFound
*/
type ListProvidersNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersNotFound creates ListProvidersNotFound with default headers values
func NewListProvidersNotFound() *ListProvidersNotFound {

	return &ListProvidersNotFound{}
}

// WithXRequestID adds the xRequestId to the list providers not found response
func (o *ListProvidersNotFound) WithXRequestID(xRequestID string) *ListProvidersNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers not found response
func (o *ListProvidersNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers not found response
func (o *ListProvidersNotFound) WithPayload(payload *models.Errors) *ListProvidersNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers not found response
func (o *ListProvidersNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersInternalServerErrorCode is the HTTP code returned for type ListProvidersInternalServerError
const ListProvidersInternalServerErrorCode int = 500

/*ListProvidersInternalServerError Internal server error

swagger:response listProvidersInternalServerError
*/
type ListProvidersInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersInternalServerError creates ListProvidersInternalServerError with default headers values
func NewListProvidersInternalServerError() *ListProvidersInternalServerError {

	return &ListProvidersInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list providers internal server error response
func (o *ListProvidersInternalServerError) WithXRequestID(xRequestID string) *ListProvidersInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers internal server error response
func (o *ListProvidersInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers internal server error response
func (o *ListProvidersInternalServerError) WithPayload(payload *models.Errors) *ListProvidersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers internal server error response
func (o *ListProvidersInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
