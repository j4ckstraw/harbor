// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteInstanceOKCode is the HTTP code returned for type DeleteInstanceOK
const DeleteInstanceOKCode int = 200

/*DeleteInstanceOK Success

swagger:response deleteInstanceOK
*/
type DeleteInstanceOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteInstanceOK creates DeleteInstanceOK with default headers values
func NewDeleteInstanceOK() *DeleteInstanceOK {

	return &DeleteInstanceOK{}
}

// WithXRequestID adds the xRequestId to the delete instance o k response
func (o *DeleteInstanceOK) WithXRequestID(xRequestID string) *DeleteInstanceOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete instance o k response
func (o *DeleteInstanceOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteInstanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteInstanceUnauthorizedCode is the HTTP code returned for type DeleteInstanceUnauthorized
const DeleteInstanceUnauthorizedCode int = 401

/*DeleteInstanceUnauthorized Unauthorized

swagger:response deleteInstanceUnauthorized
*/
type DeleteInstanceUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteInstanceUnauthorized creates DeleteInstanceUnauthorized with default headers values
func NewDeleteInstanceUnauthorized() *DeleteInstanceUnauthorized {

	return &DeleteInstanceUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete instance unauthorized response
func (o *DeleteInstanceUnauthorized) WithXRequestID(xRequestID string) *DeleteInstanceUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete instance unauthorized response
func (o *DeleteInstanceUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete instance unauthorized response
func (o *DeleteInstanceUnauthorized) WithPayload(payload *models.Errors) *DeleteInstanceUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete instance unauthorized response
func (o *DeleteInstanceUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteInstanceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteInstanceForbiddenCode is the HTTP code returned for type DeleteInstanceForbidden
const DeleteInstanceForbiddenCode int = 403

/*DeleteInstanceForbidden Forbidden

swagger:response deleteInstanceForbidden
*/
type DeleteInstanceForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteInstanceForbidden creates DeleteInstanceForbidden with default headers values
func NewDeleteInstanceForbidden() *DeleteInstanceForbidden {

	return &DeleteInstanceForbidden{}
}

// WithXRequestID adds the xRequestId to the delete instance forbidden response
func (o *DeleteInstanceForbidden) WithXRequestID(xRequestID string) *DeleteInstanceForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete instance forbidden response
func (o *DeleteInstanceForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete instance forbidden response
func (o *DeleteInstanceForbidden) WithPayload(payload *models.Errors) *DeleteInstanceForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete instance forbidden response
func (o *DeleteInstanceForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteInstanceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteInstanceNotFoundCode is the HTTP code returned for type DeleteInstanceNotFound
const DeleteInstanceNotFoundCode int = 404

/*DeleteInstanceNotFound Not found

swagger:response deleteInstanceNotFound
*/
type DeleteInstanceNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteInstanceNotFound creates DeleteInstanceNotFound with default headers values
func NewDeleteInstanceNotFound() *DeleteInstanceNotFound {

	return &DeleteInstanceNotFound{}
}

// WithXRequestID adds the xRequestId to the delete instance not found response
func (o *DeleteInstanceNotFound) WithXRequestID(xRequestID string) *DeleteInstanceNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete instance not found response
func (o *DeleteInstanceNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete instance not found response
func (o *DeleteInstanceNotFound) WithPayload(payload *models.Errors) *DeleteInstanceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete instance not found response
func (o *DeleteInstanceNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteInstanceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteInstanceInternalServerErrorCode is the HTTP code returned for type DeleteInstanceInternalServerError
const DeleteInstanceInternalServerErrorCode int = 500

/*DeleteInstanceInternalServerError Internal server error

swagger:response deleteInstanceInternalServerError
*/
type DeleteInstanceInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteInstanceInternalServerError creates DeleteInstanceInternalServerError with default headers values
func NewDeleteInstanceInternalServerError() *DeleteInstanceInternalServerError {

	return &DeleteInstanceInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete instance internal server error response
func (o *DeleteInstanceInternalServerError) WithXRequestID(xRequestID string) *DeleteInstanceInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete instance internal server error response
func (o *DeleteInstanceInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete instance internal server error response
func (o *DeleteInstanceInternalServerError) WithPayload(payload *models.Errors) *DeleteInstanceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete instance internal server error response
func (o *DeleteInstanceInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteInstanceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
