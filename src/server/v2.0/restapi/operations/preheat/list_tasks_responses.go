// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListTasksOKCode is the HTTP code returned for type ListTasksOK
const ListTasksOKCode int = 200

/*ListTasksOK List tasks success

swagger:response listTasksOK
*/
type ListTasksOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of tasks

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Task `json:"body,omitempty"`
}

// NewListTasksOK creates ListTasksOK with default headers values
func NewListTasksOK() *ListTasksOK {

	return &ListTasksOK{}
}

// WithLink adds the link to the list tasks o k response
func (o *ListTasksOK) WithLink(link string) *ListTasksOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list tasks o k response
func (o *ListTasksOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list tasks o k response
func (o *ListTasksOK) WithXTotalCount(xTotalCount int64) *ListTasksOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list tasks o k response
func (o *ListTasksOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list tasks o k response
func (o *ListTasksOK) WithPayload(payload []*models.Task) *ListTasksOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tasks o k response
func (o *ListTasksOK) SetPayload(payload []*models.Task) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTasksOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Task, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListTasksBadRequestCode is the HTTP code returned for type ListTasksBadRequest
const ListTasksBadRequestCode int = 400

/*ListTasksBadRequest Bad request

swagger:response listTasksBadRequest
*/
type ListTasksBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTasksBadRequest creates ListTasksBadRequest with default headers values
func NewListTasksBadRequest() *ListTasksBadRequest {

	return &ListTasksBadRequest{}
}

// WithXRequestID adds the xRequestId to the list tasks bad request response
func (o *ListTasksBadRequest) WithXRequestID(xRequestID string) *ListTasksBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tasks bad request response
func (o *ListTasksBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tasks bad request response
func (o *ListTasksBadRequest) WithPayload(payload *models.Errors) *ListTasksBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tasks bad request response
func (o *ListTasksBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTasksBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTasksUnauthorizedCode is the HTTP code returned for type ListTasksUnauthorized
const ListTasksUnauthorizedCode int = 401

/*ListTasksUnauthorized Unauthorized

swagger:response listTasksUnauthorized
*/
type ListTasksUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTasksUnauthorized creates ListTasksUnauthorized with default headers values
func NewListTasksUnauthorized() *ListTasksUnauthorized {

	return &ListTasksUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list tasks unauthorized response
func (o *ListTasksUnauthorized) WithXRequestID(xRequestID string) *ListTasksUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tasks unauthorized response
func (o *ListTasksUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tasks unauthorized response
func (o *ListTasksUnauthorized) WithPayload(payload *models.Errors) *ListTasksUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tasks unauthorized response
func (o *ListTasksUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTasksUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTasksForbiddenCode is the HTTP code returned for type ListTasksForbidden
const ListTasksForbiddenCode int = 403

/*ListTasksForbidden Forbidden

swagger:response listTasksForbidden
*/
type ListTasksForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTasksForbidden creates ListTasksForbidden with default headers values
func NewListTasksForbidden() *ListTasksForbidden {

	return &ListTasksForbidden{}
}

// WithXRequestID adds the xRequestId to the list tasks forbidden response
func (o *ListTasksForbidden) WithXRequestID(xRequestID string) *ListTasksForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tasks forbidden response
func (o *ListTasksForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tasks forbidden response
func (o *ListTasksForbidden) WithPayload(payload *models.Errors) *ListTasksForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tasks forbidden response
func (o *ListTasksForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTasksForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTasksNotFoundCode is the HTTP code returned for type ListTasksNotFound
const ListTasksNotFoundCode int = 404

/*ListTasksNotFound Not found

swagger:response listTasksNotFound
*/
type ListTasksNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTasksNotFound creates ListTasksNotFound with default headers values
func NewListTasksNotFound() *ListTasksNotFound {

	return &ListTasksNotFound{}
}

// WithXRequestID adds the xRequestId to the list tasks not found response
func (o *ListTasksNotFound) WithXRequestID(xRequestID string) *ListTasksNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tasks not found response
func (o *ListTasksNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tasks not found response
func (o *ListTasksNotFound) WithPayload(payload *models.Errors) *ListTasksNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tasks not found response
func (o *ListTasksNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTasksNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTasksInternalServerErrorCode is the HTTP code returned for type ListTasksInternalServerError
const ListTasksInternalServerErrorCode int = 500

/*ListTasksInternalServerError Internal server error

swagger:response listTasksInternalServerError
*/
type ListTasksInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTasksInternalServerError creates ListTasksInternalServerError with default headers values
func NewListTasksInternalServerError() *ListTasksInternalServerError {

	return &ListTasksInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list tasks internal server error response
func (o *ListTasksInternalServerError) WithXRequestID(xRequestID string) *ListTasksInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tasks internal server error response
func (o *ListTasksInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tasks internal server error response
func (o *ListTasksInternalServerError) WithPayload(payload *models.Errors) *ListTasksInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tasks internal server error response
func (o *ListTasksInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTasksInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
