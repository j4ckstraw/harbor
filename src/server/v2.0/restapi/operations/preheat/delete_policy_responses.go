// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeletePolicyOKCode is the HTTP code returned for type DeletePolicyOK
const DeletePolicyOKCode int = 200

/*DeletePolicyOK Success

swagger:response deletePolicyOK
*/
type DeletePolicyOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeletePolicyOK creates DeletePolicyOK with default headers values
func NewDeletePolicyOK() *DeletePolicyOK {

	return &DeletePolicyOK{}
}

// WithXRequestID adds the xRequestId to the delete policy o k response
func (o *DeletePolicyOK) WithXRequestID(xRequestID string) *DeletePolicyOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete policy o k response
func (o *DeletePolicyOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeletePolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeletePolicyBadRequestCode is the HTTP code returned for type DeletePolicyBadRequest
const DeletePolicyBadRequestCode int = 400

/*DeletePolicyBadRequest Bad request

swagger:response deletePolicyBadRequest
*/
type DeletePolicyBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeletePolicyBadRequest creates DeletePolicyBadRequest with default headers values
func NewDeletePolicyBadRequest() *DeletePolicyBadRequest {

	return &DeletePolicyBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete policy bad request response
func (o *DeletePolicyBadRequest) WithXRequestID(xRequestID string) *DeletePolicyBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete policy bad request response
func (o *DeletePolicyBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete policy bad request response
func (o *DeletePolicyBadRequest) WithPayload(payload *models.Errors) *DeletePolicyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete policy bad request response
func (o *DeletePolicyBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePolicyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePolicyUnauthorizedCode is the HTTP code returned for type DeletePolicyUnauthorized
const DeletePolicyUnauthorizedCode int = 401

/*DeletePolicyUnauthorized Unauthorized

swagger:response deletePolicyUnauthorized
*/
type DeletePolicyUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeletePolicyUnauthorized creates DeletePolicyUnauthorized with default headers values
func NewDeletePolicyUnauthorized() *DeletePolicyUnauthorized {

	return &DeletePolicyUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete policy unauthorized response
func (o *DeletePolicyUnauthorized) WithXRequestID(xRequestID string) *DeletePolicyUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete policy unauthorized response
func (o *DeletePolicyUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete policy unauthorized response
func (o *DeletePolicyUnauthorized) WithPayload(payload *models.Errors) *DeletePolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete policy unauthorized response
func (o *DeletePolicyUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePolicyForbiddenCode is the HTTP code returned for type DeletePolicyForbidden
const DeletePolicyForbiddenCode int = 403

/*DeletePolicyForbidden Forbidden

swagger:response deletePolicyForbidden
*/
type DeletePolicyForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeletePolicyForbidden creates DeletePolicyForbidden with default headers values
func NewDeletePolicyForbidden() *DeletePolicyForbidden {

	return &DeletePolicyForbidden{}
}

// WithXRequestID adds the xRequestId to the delete policy forbidden response
func (o *DeletePolicyForbidden) WithXRequestID(xRequestID string) *DeletePolicyForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete policy forbidden response
func (o *DeletePolicyForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete policy forbidden response
func (o *DeletePolicyForbidden) WithPayload(payload *models.Errors) *DeletePolicyForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete policy forbidden response
func (o *DeletePolicyForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePolicyForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePolicyNotFoundCode is the HTTP code returned for type DeletePolicyNotFound
const DeletePolicyNotFoundCode int = 404

/*DeletePolicyNotFound Not found

swagger:response deletePolicyNotFound
*/
type DeletePolicyNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeletePolicyNotFound creates DeletePolicyNotFound with default headers values
func NewDeletePolicyNotFound() *DeletePolicyNotFound {

	return &DeletePolicyNotFound{}
}

// WithXRequestID adds the xRequestId to the delete policy not found response
func (o *DeletePolicyNotFound) WithXRequestID(xRequestID string) *DeletePolicyNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete policy not found response
func (o *DeletePolicyNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete policy not found response
func (o *DeletePolicyNotFound) WithPayload(payload *models.Errors) *DeletePolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete policy not found response
func (o *DeletePolicyNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeletePolicyInternalServerErrorCode is the HTTP code returned for type DeletePolicyInternalServerError
const DeletePolicyInternalServerErrorCode int = 500

/*DeletePolicyInternalServerError Internal server error

swagger:response deletePolicyInternalServerError
*/
type DeletePolicyInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeletePolicyInternalServerError creates DeletePolicyInternalServerError with default headers values
func NewDeletePolicyInternalServerError() *DeletePolicyInternalServerError {

	return &DeletePolicyInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete policy internal server error response
func (o *DeletePolicyInternalServerError) WithXRequestID(xRequestID string) *DeletePolicyInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete policy internal server error response
func (o *DeletePolicyInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete policy internal server error response
func (o *DeletePolicyInternalServerError) WithPayload(payload *models.Errors) *DeletePolicyInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete policy internal server error response
func (o *DeletePolicyInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePolicyInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
