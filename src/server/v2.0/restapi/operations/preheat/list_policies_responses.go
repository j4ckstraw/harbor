// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListPoliciesOKCode is the HTTP code returned for type ListPoliciesOK
const ListPoliciesOKCode int = 200

/*ListPoliciesOK List preheat policies success

swagger:response listPoliciesOK
*/
type ListPoliciesOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of policies

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.PreheatPolicy `json:"body,omitempty"`
}

// NewListPoliciesOK creates ListPoliciesOK with default headers values
func NewListPoliciesOK() *ListPoliciesOK {

	return &ListPoliciesOK{}
}

// WithLink adds the link to the list policies o k response
func (o *ListPoliciesOK) WithLink(link string) *ListPoliciesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list policies o k response
func (o *ListPoliciesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list policies o k response
func (o *ListPoliciesOK) WithXTotalCount(xTotalCount int64) *ListPoliciesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list policies o k response
func (o *ListPoliciesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list policies o k response
func (o *ListPoliciesOK) WithPayload(payload []*models.PreheatPolicy) *ListPoliciesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list policies o k response
func (o *ListPoliciesOK) SetPayload(payload []*models.PreheatPolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPoliciesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.PreheatPolicy, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListPoliciesBadRequestCode is the HTTP code returned for type ListPoliciesBadRequest
const ListPoliciesBadRequestCode int = 400

/*ListPoliciesBadRequest Bad request

swagger:response listPoliciesBadRequest
*/
type ListPoliciesBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListPoliciesBadRequest creates ListPoliciesBadRequest with default headers values
func NewListPoliciesBadRequest() *ListPoliciesBadRequest {

	return &ListPoliciesBadRequest{}
}

// WithXRequestID adds the xRequestId to the list policies bad request response
func (o *ListPoliciesBadRequest) WithXRequestID(xRequestID string) *ListPoliciesBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list policies bad request response
func (o *ListPoliciesBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list policies bad request response
func (o *ListPoliciesBadRequest) WithPayload(payload *models.Errors) *ListPoliciesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list policies bad request response
func (o *ListPoliciesBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPoliciesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPoliciesUnauthorizedCode is the HTTP code returned for type ListPoliciesUnauthorized
const ListPoliciesUnauthorizedCode int = 401

/*ListPoliciesUnauthorized Unauthorized

swagger:response listPoliciesUnauthorized
*/
type ListPoliciesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListPoliciesUnauthorized creates ListPoliciesUnauthorized with default headers values
func NewListPoliciesUnauthorized() *ListPoliciesUnauthorized {

	return &ListPoliciesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list policies unauthorized response
func (o *ListPoliciesUnauthorized) WithXRequestID(xRequestID string) *ListPoliciesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list policies unauthorized response
func (o *ListPoliciesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list policies unauthorized response
func (o *ListPoliciesUnauthorized) WithPayload(payload *models.Errors) *ListPoliciesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list policies unauthorized response
func (o *ListPoliciesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPoliciesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPoliciesForbiddenCode is the HTTP code returned for type ListPoliciesForbidden
const ListPoliciesForbiddenCode int = 403

/*ListPoliciesForbidden Forbidden

swagger:response listPoliciesForbidden
*/
type ListPoliciesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListPoliciesForbidden creates ListPoliciesForbidden with default headers values
func NewListPoliciesForbidden() *ListPoliciesForbidden {

	return &ListPoliciesForbidden{}
}

// WithXRequestID adds the xRequestId to the list policies forbidden response
func (o *ListPoliciesForbidden) WithXRequestID(xRequestID string) *ListPoliciesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list policies forbidden response
func (o *ListPoliciesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list policies forbidden response
func (o *ListPoliciesForbidden) WithPayload(payload *models.Errors) *ListPoliciesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list policies forbidden response
func (o *ListPoliciesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPoliciesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListPoliciesInternalServerErrorCode is the HTTP code returned for type ListPoliciesInternalServerError
const ListPoliciesInternalServerErrorCode int = 500

/*ListPoliciesInternalServerError Internal server error

swagger:response listPoliciesInternalServerError
*/
type ListPoliciesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListPoliciesInternalServerError creates ListPoliciesInternalServerError with default headers values
func NewListPoliciesInternalServerError() *ListPoliciesInternalServerError {

	return &ListPoliciesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list policies internal server error response
func (o *ListPoliciesInternalServerError) WithXRequestID(xRequestID string) *ListPoliciesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list policies internal server error response
func (o *ListPoliciesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list policies internal server error response
func (o *ListPoliciesInternalServerError) WithPayload(payload *models.Errors) *ListPoliciesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list policies internal server error response
func (o *ListPoliciesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListPoliciesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
