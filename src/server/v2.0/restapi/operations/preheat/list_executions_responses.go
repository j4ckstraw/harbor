// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListExecutionsOKCode is the HTTP code returned for type ListExecutionsOK
const ListExecutionsOKCode int = 200

/*ListExecutionsOK List executions success

swagger:response listExecutionsOK
*/
type ListExecutionsOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of executions

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Execution `json:"body,omitempty"`
}

// NewListExecutionsOK creates ListExecutionsOK with default headers values
func NewListExecutionsOK() *ListExecutionsOK {

	return &ListExecutionsOK{}
}

// WithLink adds the link to the list executions o k response
func (o *ListExecutionsOK) WithLink(link string) *ListExecutionsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list executions o k response
func (o *ListExecutionsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list executions o k response
func (o *ListExecutionsOK) WithXTotalCount(xTotalCount int64) *ListExecutionsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list executions o k response
func (o *ListExecutionsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list executions o k response
func (o *ListExecutionsOK) WithPayload(payload []*models.Execution) *ListExecutionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list executions o k response
func (o *ListExecutionsOK) SetPayload(payload []*models.Execution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExecutionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Execution, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListExecutionsBadRequestCode is the HTTP code returned for type ListExecutionsBadRequest
const ListExecutionsBadRequestCode int = 400

/*ListExecutionsBadRequest Bad request

swagger:response listExecutionsBadRequest
*/
type ListExecutionsBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListExecutionsBadRequest creates ListExecutionsBadRequest with default headers values
func NewListExecutionsBadRequest() *ListExecutionsBadRequest {

	return &ListExecutionsBadRequest{}
}

// WithXRequestID adds the xRequestId to the list executions bad request response
func (o *ListExecutionsBadRequest) WithXRequestID(xRequestID string) *ListExecutionsBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list executions bad request response
func (o *ListExecutionsBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list executions bad request response
func (o *ListExecutionsBadRequest) WithPayload(payload *models.Errors) *ListExecutionsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list executions bad request response
func (o *ListExecutionsBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExecutionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListExecutionsUnauthorizedCode is the HTTP code returned for type ListExecutionsUnauthorized
const ListExecutionsUnauthorizedCode int = 401

/*ListExecutionsUnauthorized Unauthorized

swagger:response listExecutionsUnauthorized
*/
type ListExecutionsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListExecutionsUnauthorized creates ListExecutionsUnauthorized with default headers values
func NewListExecutionsUnauthorized() *ListExecutionsUnauthorized {

	return &ListExecutionsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list executions unauthorized response
func (o *ListExecutionsUnauthorized) WithXRequestID(xRequestID string) *ListExecutionsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list executions unauthorized response
func (o *ListExecutionsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list executions unauthorized response
func (o *ListExecutionsUnauthorized) WithPayload(payload *models.Errors) *ListExecutionsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list executions unauthorized response
func (o *ListExecutionsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExecutionsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListExecutionsForbiddenCode is the HTTP code returned for type ListExecutionsForbidden
const ListExecutionsForbiddenCode int = 403

/*ListExecutionsForbidden Forbidden

swagger:response listExecutionsForbidden
*/
type ListExecutionsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListExecutionsForbidden creates ListExecutionsForbidden with default headers values
func NewListExecutionsForbidden() *ListExecutionsForbidden {

	return &ListExecutionsForbidden{}
}

// WithXRequestID adds the xRequestId to the list executions forbidden response
func (o *ListExecutionsForbidden) WithXRequestID(xRequestID string) *ListExecutionsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list executions forbidden response
func (o *ListExecutionsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list executions forbidden response
func (o *ListExecutionsForbidden) WithPayload(payload *models.Errors) *ListExecutionsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list executions forbidden response
func (o *ListExecutionsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExecutionsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListExecutionsNotFoundCode is the HTTP code returned for type ListExecutionsNotFound
const ListExecutionsNotFoundCode int = 404

/*ListExecutionsNotFound Not found

swagger:response listExecutionsNotFound
*/
type ListExecutionsNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListExecutionsNotFound creates ListExecutionsNotFound with default headers values
func NewListExecutionsNotFound() *ListExecutionsNotFound {

	return &ListExecutionsNotFound{}
}

// WithXRequestID adds the xRequestId to the list executions not found response
func (o *ListExecutionsNotFound) WithXRequestID(xRequestID string) *ListExecutionsNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list executions not found response
func (o *ListExecutionsNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list executions not found response
func (o *ListExecutionsNotFound) WithPayload(payload *models.Errors) *ListExecutionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list executions not found response
func (o *ListExecutionsNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExecutionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListExecutionsInternalServerErrorCode is the HTTP code returned for type ListExecutionsInternalServerError
const ListExecutionsInternalServerErrorCode int = 500

/*ListExecutionsInternalServerError Internal server error

swagger:response listExecutionsInternalServerError
*/
type ListExecutionsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListExecutionsInternalServerError creates ListExecutionsInternalServerError with default headers values
func NewListExecutionsInternalServerError() *ListExecutionsInternalServerError {

	return &ListExecutionsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list executions internal server error response
func (o *ListExecutionsInternalServerError) WithXRequestID(xRequestID string) *ListExecutionsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list executions internal server error response
func (o *ListExecutionsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list executions internal server error response
func (o *ListExecutionsInternalServerError) WithPayload(payload *models.Errors) *ListExecutionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list executions internal server error response
func (o *ListExecutionsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExecutionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
