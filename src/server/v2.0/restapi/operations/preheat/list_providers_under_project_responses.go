// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListProvidersUnderProjectOKCode is the HTTP code returned for type ListProvidersUnderProjectOK
const ListProvidersUnderProjectOKCode int = 200

/*ListProvidersUnderProjectOK Success

swagger:response listProvidersUnderProjectOK
*/
type ListProvidersUnderProjectOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ProviderUnderProject `json:"body,omitempty"`
}

// NewListProvidersUnderProjectOK creates ListProvidersUnderProjectOK with default headers values
func NewListProvidersUnderProjectOK() *ListProvidersUnderProjectOK {

	return &ListProvidersUnderProjectOK{}
}

// WithPayload adds the payload to the list providers under project o k response
func (o *ListProvidersUnderProjectOK) WithPayload(payload []*models.ProviderUnderProject) *ListProvidersUnderProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers under project o k response
func (o *ListProvidersUnderProjectOK) SetPayload(payload []*models.ProviderUnderProject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnderProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ProviderUnderProject, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListProvidersUnderProjectBadRequestCode is the HTTP code returned for type ListProvidersUnderProjectBadRequest
const ListProvidersUnderProjectBadRequestCode int = 400

/*ListProvidersUnderProjectBadRequest Bad request

swagger:response listProvidersUnderProjectBadRequest
*/
type ListProvidersUnderProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersUnderProjectBadRequest creates ListProvidersUnderProjectBadRequest with default headers values
func NewListProvidersUnderProjectBadRequest() *ListProvidersUnderProjectBadRequest {

	return &ListProvidersUnderProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the list providers under project bad request response
func (o *ListProvidersUnderProjectBadRequest) WithXRequestID(xRequestID string) *ListProvidersUnderProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers under project bad request response
func (o *ListProvidersUnderProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers under project bad request response
func (o *ListProvidersUnderProjectBadRequest) WithPayload(payload *models.Errors) *ListProvidersUnderProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers under project bad request response
func (o *ListProvidersUnderProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnderProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersUnderProjectUnauthorizedCode is the HTTP code returned for type ListProvidersUnderProjectUnauthorized
const ListProvidersUnderProjectUnauthorizedCode int = 401

/*ListProvidersUnderProjectUnauthorized Unauthorized

swagger:response listProvidersUnderProjectUnauthorized
*/
type ListProvidersUnderProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersUnderProjectUnauthorized creates ListProvidersUnderProjectUnauthorized with default headers values
func NewListProvidersUnderProjectUnauthorized() *ListProvidersUnderProjectUnauthorized {

	return &ListProvidersUnderProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list providers under project unauthorized response
func (o *ListProvidersUnderProjectUnauthorized) WithXRequestID(xRequestID string) *ListProvidersUnderProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers under project unauthorized response
func (o *ListProvidersUnderProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers under project unauthorized response
func (o *ListProvidersUnderProjectUnauthorized) WithPayload(payload *models.Errors) *ListProvidersUnderProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers under project unauthorized response
func (o *ListProvidersUnderProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnderProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersUnderProjectForbiddenCode is the HTTP code returned for type ListProvidersUnderProjectForbidden
const ListProvidersUnderProjectForbiddenCode int = 403

/*ListProvidersUnderProjectForbidden Forbidden

swagger:response listProvidersUnderProjectForbidden
*/
type ListProvidersUnderProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersUnderProjectForbidden creates ListProvidersUnderProjectForbidden with default headers values
func NewListProvidersUnderProjectForbidden() *ListProvidersUnderProjectForbidden {

	return &ListProvidersUnderProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the list providers under project forbidden response
func (o *ListProvidersUnderProjectForbidden) WithXRequestID(xRequestID string) *ListProvidersUnderProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers under project forbidden response
func (o *ListProvidersUnderProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers under project forbidden response
func (o *ListProvidersUnderProjectForbidden) WithPayload(payload *models.Errors) *ListProvidersUnderProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers under project forbidden response
func (o *ListProvidersUnderProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnderProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersUnderProjectNotFoundCode is the HTTP code returned for type ListProvidersUnderProjectNotFound
const ListProvidersUnderProjectNotFoundCode int = 404

/*ListProvidersUnderProjectNotFound Not found

swagger:response listProvidersUnderProjectNotFound
*/
type ListProvidersUnderProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersUnderProjectNotFound creates ListProvidersUnderProjectNotFound with default headers values
func NewListProvidersUnderProjectNotFound() *ListProvidersUnderProjectNotFound {

	return &ListProvidersUnderProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the list providers under project not found response
func (o *ListProvidersUnderProjectNotFound) WithXRequestID(xRequestID string) *ListProvidersUnderProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers under project not found response
func (o *ListProvidersUnderProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers under project not found response
func (o *ListProvidersUnderProjectNotFound) WithPayload(payload *models.Errors) *ListProvidersUnderProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers under project not found response
func (o *ListProvidersUnderProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnderProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProvidersUnderProjectInternalServerErrorCode is the HTTP code returned for type ListProvidersUnderProjectInternalServerError
const ListProvidersUnderProjectInternalServerErrorCode int = 500

/*ListProvidersUnderProjectInternalServerError Internal server error

swagger:response listProvidersUnderProjectInternalServerError
*/
type ListProvidersUnderProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProvidersUnderProjectInternalServerError creates ListProvidersUnderProjectInternalServerError with default headers values
func NewListProvidersUnderProjectInternalServerError() *ListProvidersUnderProjectInternalServerError {

	return &ListProvidersUnderProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list providers under project internal server error response
func (o *ListProvidersUnderProjectInternalServerError) WithXRequestID(xRequestID string) *ListProvidersUnderProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list providers under project internal server error response
func (o *ListProvidersUnderProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list providers under project internal server error response
func (o *ListProvidersUnderProjectInternalServerError) WithPayload(payload *models.Errors) *ListProvidersUnderProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list providers under project internal server error response
func (o *ListProvidersUnderProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProvidersUnderProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
