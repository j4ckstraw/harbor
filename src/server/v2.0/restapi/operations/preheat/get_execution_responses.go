// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetExecutionOKCode is the HTTP code returned for type GetExecutionOK
const GetExecutionOKCode int = 200

/*GetExecutionOK Get execution success

swagger:response getExecutionOK
*/
type GetExecutionOK struct {

	/*
	  In: Body
	*/
	Payload *models.Execution `json:"body,omitempty"`
}

// NewGetExecutionOK creates GetExecutionOK with default headers values
func NewGetExecutionOK() *GetExecutionOK {

	return &GetExecutionOK{}
}

// WithPayload adds the payload to the get execution o k response
func (o *GetExecutionOK) WithPayload(payload *models.Execution) *GetExecutionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get execution o k response
func (o *GetExecutionOK) SetPayload(payload *models.Execution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExecutionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExecutionBadRequestCode is the HTTP code returned for type GetExecutionBadRequest
const GetExecutionBadRequestCode int = 400

/*GetExecutionBadRequest Bad request

swagger:response getExecutionBadRequest
*/
type GetExecutionBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetExecutionBadRequest creates GetExecutionBadRequest with default headers values
func NewGetExecutionBadRequest() *GetExecutionBadRequest {

	return &GetExecutionBadRequest{}
}

// WithXRequestID adds the xRequestId to the get execution bad request response
func (o *GetExecutionBadRequest) WithXRequestID(xRequestID string) *GetExecutionBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get execution bad request response
func (o *GetExecutionBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get execution bad request response
func (o *GetExecutionBadRequest) WithPayload(payload *models.Errors) *GetExecutionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get execution bad request response
func (o *GetExecutionBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExecutionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExecutionUnauthorizedCode is the HTTP code returned for type GetExecutionUnauthorized
const GetExecutionUnauthorizedCode int = 401

/*GetExecutionUnauthorized Unauthorized

swagger:response getExecutionUnauthorized
*/
type GetExecutionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetExecutionUnauthorized creates GetExecutionUnauthorized with default headers values
func NewGetExecutionUnauthorized() *GetExecutionUnauthorized {

	return &GetExecutionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get execution unauthorized response
func (o *GetExecutionUnauthorized) WithXRequestID(xRequestID string) *GetExecutionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get execution unauthorized response
func (o *GetExecutionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get execution unauthorized response
func (o *GetExecutionUnauthorized) WithPayload(payload *models.Errors) *GetExecutionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get execution unauthorized response
func (o *GetExecutionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExecutionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExecutionForbiddenCode is the HTTP code returned for type GetExecutionForbidden
const GetExecutionForbiddenCode int = 403

/*GetExecutionForbidden Forbidden

swagger:response getExecutionForbidden
*/
type GetExecutionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetExecutionForbidden creates GetExecutionForbidden with default headers values
func NewGetExecutionForbidden() *GetExecutionForbidden {

	return &GetExecutionForbidden{}
}

// WithXRequestID adds the xRequestId to the get execution forbidden response
func (o *GetExecutionForbidden) WithXRequestID(xRequestID string) *GetExecutionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get execution forbidden response
func (o *GetExecutionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get execution forbidden response
func (o *GetExecutionForbidden) WithPayload(payload *models.Errors) *GetExecutionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get execution forbidden response
func (o *GetExecutionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExecutionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExecutionNotFoundCode is the HTTP code returned for type GetExecutionNotFound
const GetExecutionNotFoundCode int = 404

/*GetExecutionNotFound Not found

swagger:response getExecutionNotFound
*/
type GetExecutionNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetExecutionNotFound creates GetExecutionNotFound with default headers values
func NewGetExecutionNotFound() *GetExecutionNotFound {

	return &GetExecutionNotFound{}
}

// WithXRequestID adds the xRequestId to the get execution not found response
func (o *GetExecutionNotFound) WithXRequestID(xRequestID string) *GetExecutionNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get execution not found response
func (o *GetExecutionNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get execution not found response
func (o *GetExecutionNotFound) WithPayload(payload *models.Errors) *GetExecutionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get execution not found response
func (o *GetExecutionNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExecutionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExecutionInternalServerErrorCode is the HTTP code returned for type GetExecutionInternalServerError
const GetExecutionInternalServerErrorCode int = 500

/*GetExecutionInternalServerError Internal server error

swagger:response getExecutionInternalServerError
*/
type GetExecutionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetExecutionInternalServerError creates GetExecutionInternalServerError with default headers values
func NewGetExecutionInternalServerError() *GetExecutionInternalServerError {

	return &GetExecutionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get execution internal server error response
func (o *GetExecutionInternalServerError) WithXRequestID(xRequestID string) *GetExecutionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get execution internal server error response
func (o *GetExecutionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get execution internal server error response
func (o *GetExecutionInternalServerError) WithPayload(payload *models.Errors) *GetExecutionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get execution internal server error response
func (o *GetExecutionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExecutionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
