// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetPreheatLogOKCode is the HTTP code returned for type GetPreheatLogOK
const GetPreheatLogOKCode int = 200

/*GetPreheatLogOK Get log success

swagger:response getPreheatLogOK
*/
type GetPreheatLogOK struct {
	/*Content type of response

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetPreheatLogOK creates GetPreheatLogOK with default headers values
func NewGetPreheatLogOK() *GetPreheatLogOK {

	return &GetPreheatLogOK{}
}

// WithContentType adds the contentType to the get preheat log o k response
func (o *GetPreheatLogOK) WithContentType(contentType string) *GetPreheatLogOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the get preheat log o k response
func (o *GetPreheatLogOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the get preheat log o k response
func (o *GetPreheatLogOK) WithPayload(payload string) *GetPreheatLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get preheat log o k response
func (o *GetPreheatLogOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPreheatLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPreheatLogBadRequestCode is the HTTP code returned for type GetPreheatLogBadRequest
const GetPreheatLogBadRequestCode int = 400

/*GetPreheatLogBadRequest Bad request

swagger:response getPreheatLogBadRequest
*/
type GetPreheatLogBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPreheatLogBadRequest creates GetPreheatLogBadRequest with default headers values
func NewGetPreheatLogBadRequest() *GetPreheatLogBadRequest {

	return &GetPreheatLogBadRequest{}
}

// WithXRequestID adds the xRequestId to the get preheat log bad request response
func (o *GetPreheatLogBadRequest) WithXRequestID(xRequestID string) *GetPreheatLogBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get preheat log bad request response
func (o *GetPreheatLogBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get preheat log bad request response
func (o *GetPreheatLogBadRequest) WithPayload(payload *models.Errors) *GetPreheatLogBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get preheat log bad request response
func (o *GetPreheatLogBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPreheatLogBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPreheatLogUnauthorizedCode is the HTTP code returned for type GetPreheatLogUnauthorized
const GetPreheatLogUnauthorizedCode int = 401

/*GetPreheatLogUnauthorized Unauthorized

swagger:response getPreheatLogUnauthorized
*/
type GetPreheatLogUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPreheatLogUnauthorized creates GetPreheatLogUnauthorized with default headers values
func NewGetPreheatLogUnauthorized() *GetPreheatLogUnauthorized {

	return &GetPreheatLogUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get preheat log unauthorized response
func (o *GetPreheatLogUnauthorized) WithXRequestID(xRequestID string) *GetPreheatLogUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get preheat log unauthorized response
func (o *GetPreheatLogUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get preheat log unauthorized response
func (o *GetPreheatLogUnauthorized) WithPayload(payload *models.Errors) *GetPreheatLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get preheat log unauthorized response
func (o *GetPreheatLogUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPreheatLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPreheatLogForbiddenCode is the HTTP code returned for type GetPreheatLogForbidden
const GetPreheatLogForbiddenCode int = 403

/*GetPreheatLogForbidden Forbidden

swagger:response getPreheatLogForbidden
*/
type GetPreheatLogForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPreheatLogForbidden creates GetPreheatLogForbidden with default headers values
func NewGetPreheatLogForbidden() *GetPreheatLogForbidden {

	return &GetPreheatLogForbidden{}
}

// WithXRequestID adds the xRequestId to the get preheat log forbidden response
func (o *GetPreheatLogForbidden) WithXRequestID(xRequestID string) *GetPreheatLogForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get preheat log forbidden response
func (o *GetPreheatLogForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get preheat log forbidden response
func (o *GetPreheatLogForbidden) WithPayload(payload *models.Errors) *GetPreheatLogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get preheat log forbidden response
func (o *GetPreheatLogForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPreheatLogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPreheatLogNotFoundCode is the HTTP code returned for type GetPreheatLogNotFound
const GetPreheatLogNotFoundCode int = 404

/*GetPreheatLogNotFound Not found

swagger:response getPreheatLogNotFound
*/
type GetPreheatLogNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPreheatLogNotFound creates GetPreheatLogNotFound with default headers values
func NewGetPreheatLogNotFound() *GetPreheatLogNotFound {

	return &GetPreheatLogNotFound{}
}

// WithXRequestID adds the xRequestId to the get preheat log not found response
func (o *GetPreheatLogNotFound) WithXRequestID(xRequestID string) *GetPreheatLogNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get preheat log not found response
func (o *GetPreheatLogNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get preheat log not found response
func (o *GetPreheatLogNotFound) WithPayload(payload *models.Errors) *GetPreheatLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get preheat log not found response
func (o *GetPreheatLogNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPreheatLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPreheatLogInternalServerErrorCode is the HTTP code returned for type GetPreheatLogInternalServerError
const GetPreheatLogInternalServerErrorCode int = 500

/*GetPreheatLogInternalServerError Internal server error

swagger:response getPreheatLogInternalServerError
*/
type GetPreheatLogInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPreheatLogInternalServerError creates GetPreheatLogInternalServerError with default headers values
func NewGetPreheatLogInternalServerError() *GetPreheatLogInternalServerError {

	return &GetPreheatLogInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get preheat log internal server error response
func (o *GetPreheatLogInternalServerError) WithXRequestID(xRequestID string) *GetPreheatLogInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get preheat log internal server error response
func (o *GetPreheatLogInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get preheat log internal server error response
func (o *GetPreheatLogInternalServerError) WithPayload(payload *models.Errors) *GetPreheatLogInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get preheat log internal server error response
func (o *GetPreheatLogInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPreheatLogInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
