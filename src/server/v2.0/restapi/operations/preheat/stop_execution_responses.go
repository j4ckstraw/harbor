// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StopExecutionOKCode is the HTTP code returned for type StopExecutionOK
const StopExecutionOKCode int = 200

/*StopExecutionOK Success

swagger:response stopExecutionOK
*/
type StopExecutionOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewStopExecutionOK creates StopExecutionOK with default headers values
func NewStopExecutionOK() *StopExecutionOK {

	return &StopExecutionOK{}
}

// WithXRequestID adds the xRequestId to the stop execution o k response
func (o *StopExecutionOK) WithXRequestID(xRequestID string) *StopExecutionOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop execution o k response
func (o *StopExecutionOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *StopExecutionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StopExecutionBadRequestCode is the HTTP code returned for type StopExecutionBadRequest
const StopExecutionBadRequestCode int = 400

/*StopExecutionBadRequest Bad request

swagger:response stopExecutionBadRequest
*/
type StopExecutionBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopExecutionBadRequest creates StopExecutionBadRequest with default headers values
func NewStopExecutionBadRequest() *StopExecutionBadRequest {

	return &StopExecutionBadRequest{}
}

// WithXRequestID adds the xRequestId to the stop execution bad request response
func (o *StopExecutionBadRequest) WithXRequestID(xRequestID string) *StopExecutionBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop execution bad request response
func (o *StopExecutionBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop execution bad request response
func (o *StopExecutionBadRequest) WithPayload(payload *models.Errors) *StopExecutionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop execution bad request response
func (o *StopExecutionBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopExecutionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopExecutionUnauthorizedCode is the HTTP code returned for type StopExecutionUnauthorized
const StopExecutionUnauthorizedCode int = 401

/*StopExecutionUnauthorized Unauthorized

swagger:response stopExecutionUnauthorized
*/
type StopExecutionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopExecutionUnauthorized creates StopExecutionUnauthorized with default headers values
func NewStopExecutionUnauthorized() *StopExecutionUnauthorized {

	return &StopExecutionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the stop execution unauthorized response
func (o *StopExecutionUnauthorized) WithXRequestID(xRequestID string) *StopExecutionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop execution unauthorized response
func (o *StopExecutionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop execution unauthorized response
func (o *StopExecutionUnauthorized) WithPayload(payload *models.Errors) *StopExecutionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop execution unauthorized response
func (o *StopExecutionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopExecutionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopExecutionForbiddenCode is the HTTP code returned for type StopExecutionForbidden
const StopExecutionForbiddenCode int = 403

/*StopExecutionForbidden Forbidden

swagger:response stopExecutionForbidden
*/
type StopExecutionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopExecutionForbidden creates StopExecutionForbidden with default headers values
func NewStopExecutionForbidden() *StopExecutionForbidden {

	return &StopExecutionForbidden{}
}

// WithXRequestID adds the xRequestId to the stop execution forbidden response
func (o *StopExecutionForbidden) WithXRequestID(xRequestID string) *StopExecutionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop execution forbidden response
func (o *StopExecutionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop execution forbidden response
func (o *StopExecutionForbidden) WithPayload(payload *models.Errors) *StopExecutionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop execution forbidden response
func (o *StopExecutionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopExecutionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopExecutionNotFoundCode is the HTTP code returned for type StopExecutionNotFound
const StopExecutionNotFoundCode int = 404

/*StopExecutionNotFound Not found

swagger:response stopExecutionNotFound
*/
type StopExecutionNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopExecutionNotFound creates StopExecutionNotFound with default headers values
func NewStopExecutionNotFound() *StopExecutionNotFound {

	return &StopExecutionNotFound{}
}

// WithXRequestID adds the xRequestId to the stop execution not found response
func (o *StopExecutionNotFound) WithXRequestID(xRequestID string) *StopExecutionNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop execution not found response
func (o *StopExecutionNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop execution not found response
func (o *StopExecutionNotFound) WithPayload(payload *models.Errors) *StopExecutionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop execution not found response
func (o *StopExecutionNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopExecutionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopExecutionInternalServerErrorCode is the HTTP code returned for type StopExecutionInternalServerError
const StopExecutionInternalServerErrorCode int = 500

/*StopExecutionInternalServerError Internal server error

swagger:response stopExecutionInternalServerError
*/
type StopExecutionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopExecutionInternalServerError creates StopExecutionInternalServerError with default headers values
func NewStopExecutionInternalServerError() *StopExecutionInternalServerError {

	return &StopExecutionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the stop execution internal server error response
func (o *StopExecutionInternalServerError) WithXRequestID(xRequestID string) *StopExecutionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop execution internal server error response
func (o *StopExecutionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop execution internal server error response
func (o *StopExecutionInternalServerError) WithPayload(payload *models.Errors) *StopExecutionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop execution internal server error response
func (o *StopExecutionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopExecutionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
