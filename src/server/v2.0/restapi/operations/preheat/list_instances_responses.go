// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListInstancesOKCode is the HTTP code returned for type ListInstancesOK
const ListInstancesOKCode int = 200

/*ListInstancesOK Success

swagger:response listInstancesOK
*/
type ListInstancesOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of preheating provider instances

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Instance `json:"body,omitempty"`
}

// NewListInstancesOK creates ListInstancesOK with default headers values
func NewListInstancesOK() *ListInstancesOK {

	return &ListInstancesOK{}
}

// WithLink adds the link to the list instances o k response
func (o *ListInstancesOK) WithLink(link string) *ListInstancesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list instances o k response
func (o *ListInstancesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list instances o k response
func (o *ListInstancesOK) WithXTotalCount(xTotalCount int64) *ListInstancesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list instances o k response
func (o *ListInstancesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list instances o k response
func (o *ListInstancesOK) WithPayload(payload []*models.Instance) *ListInstancesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list instances o k response
func (o *ListInstancesOK) SetPayload(payload []*models.Instance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInstancesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Instance, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListInstancesBadRequestCode is the HTTP code returned for type ListInstancesBadRequest
const ListInstancesBadRequestCode int = 400

/*ListInstancesBadRequest Bad request

swagger:response listInstancesBadRequest
*/
type ListInstancesBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListInstancesBadRequest creates ListInstancesBadRequest with default headers values
func NewListInstancesBadRequest() *ListInstancesBadRequest {

	return &ListInstancesBadRequest{}
}

// WithXRequestID adds the xRequestId to the list instances bad request response
func (o *ListInstancesBadRequest) WithXRequestID(xRequestID string) *ListInstancesBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list instances bad request response
func (o *ListInstancesBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list instances bad request response
func (o *ListInstancesBadRequest) WithPayload(payload *models.Errors) *ListInstancesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list instances bad request response
func (o *ListInstancesBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInstancesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInstancesUnauthorizedCode is the HTTP code returned for type ListInstancesUnauthorized
const ListInstancesUnauthorizedCode int = 401

/*ListInstancesUnauthorized Unauthorized

swagger:response listInstancesUnauthorized
*/
type ListInstancesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListInstancesUnauthorized creates ListInstancesUnauthorized with default headers values
func NewListInstancesUnauthorized() *ListInstancesUnauthorized {

	return &ListInstancesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list instances unauthorized response
func (o *ListInstancesUnauthorized) WithXRequestID(xRequestID string) *ListInstancesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list instances unauthorized response
func (o *ListInstancesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list instances unauthorized response
func (o *ListInstancesUnauthorized) WithPayload(payload *models.Errors) *ListInstancesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list instances unauthorized response
func (o *ListInstancesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInstancesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInstancesForbiddenCode is the HTTP code returned for type ListInstancesForbidden
const ListInstancesForbiddenCode int = 403

/*ListInstancesForbidden Forbidden

swagger:response listInstancesForbidden
*/
type ListInstancesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListInstancesForbidden creates ListInstancesForbidden with default headers values
func NewListInstancesForbidden() *ListInstancesForbidden {

	return &ListInstancesForbidden{}
}

// WithXRequestID adds the xRequestId to the list instances forbidden response
func (o *ListInstancesForbidden) WithXRequestID(xRequestID string) *ListInstancesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list instances forbidden response
func (o *ListInstancesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list instances forbidden response
func (o *ListInstancesForbidden) WithPayload(payload *models.Errors) *ListInstancesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list instances forbidden response
func (o *ListInstancesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInstancesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInstancesNotFoundCode is the HTTP code returned for type ListInstancesNotFound
const ListInstancesNotFoundCode int = 404

/*ListInstancesNotFound Not found

swagger:response listInstancesNotFound
*/
type ListInstancesNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListInstancesNotFound creates ListInstancesNotFound with default headers values
func NewListInstancesNotFound() *ListInstancesNotFound {

	return &ListInstancesNotFound{}
}

// WithXRequestID adds the xRequestId to the list instances not found response
func (o *ListInstancesNotFound) WithXRequestID(xRequestID string) *ListInstancesNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list instances not found response
func (o *ListInstancesNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list instances not found response
func (o *ListInstancesNotFound) WithPayload(payload *models.Errors) *ListInstancesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list instances not found response
func (o *ListInstancesNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInstancesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInstancesInternalServerErrorCode is the HTTP code returned for type ListInstancesInternalServerError
const ListInstancesInternalServerErrorCode int = 500

/*ListInstancesInternalServerError Internal server error

swagger:response listInstancesInternalServerError
*/
type ListInstancesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListInstancesInternalServerError creates ListInstancesInternalServerError with default headers values
func NewListInstancesInternalServerError() *ListInstancesInternalServerError {

	return &ListInstancesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list instances internal server error response
func (o *ListInstancesInternalServerError) WithXRequestID(xRequestID string) *ListInstancesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list instances internal server error response
func (o *ListInstancesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list instances internal server error response
func (o *ListInstancesInternalServerError) WithPayload(payload *models.Errors) *ListInstancesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list instances internal server error response
func (o *ListInstancesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInstancesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
