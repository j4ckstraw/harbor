// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListRepositoriesOKCode is the HTTP code returned for type ListRepositoriesOK
const ListRepositoriesOKCode int = 200

/*ListRepositoriesOK Success

swagger:response listRepositoriesOK
*/
type ListRepositoriesOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of repositories

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Repository `json:"body,omitempty"`
}

// NewListRepositoriesOK creates ListRepositoriesOK with default headers values
func NewListRepositoriesOK() *ListRepositoriesOK {

	return &ListRepositoriesOK{}
}

// WithLink adds the link to the list repositories o k response
func (o *ListRepositoriesOK) WithLink(link string) *ListRepositoriesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list repositories o k response
func (o *ListRepositoriesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list repositories o k response
func (o *ListRepositoriesOK) WithXTotalCount(xTotalCount int64) *ListRepositoriesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list repositories o k response
func (o *ListRepositoriesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list repositories o k response
func (o *ListRepositoriesOK) WithPayload(payload []*models.Repository) *ListRepositoriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories o k response
func (o *ListRepositoriesOK) SetPayload(payload []*models.Repository) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Repository, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRepositoriesBadRequestCode is the HTTP code returned for type ListRepositoriesBadRequest
const ListRepositoriesBadRequestCode int = 400

/*ListRepositoriesBadRequest Bad request

swagger:response listRepositoriesBadRequest
*/
type ListRepositoriesBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRepositoriesBadRequest creates ListRepositoriesBadRequest with default headers values
func NewListRepositoriesBadRequest() *ListRepositoriesBadRequest {

	return &ListRepositoriesBadRequest{}
}

// WithXRequestID adds the xRequestId to the list repositories bad request response
func (o *ListRepositoriesBadRequest) WithXRequestID(xRequestID string) *ListRepositoriesBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list repositories bad request response
func (o *ListRepositoriesBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list repositories bad request response
func (o *ListRepositoriesBadRequest) WithPayload(payload *models.Errors) *ListRepositoriesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories bad request response
func (o *ListRepositoriesBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRepositoriesUnauthorizedCode is the HTTP code returned for type ListRepositoriesUnauthorized
const ListRepositoriesUnauthorizedCode int = 401

/*ListRepositoriesUnauthorized Unauthorized

swagger:response listRepositoriesUnauthorized
*/
type ListRepositoriesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRepositoriesUnauthorized creates ListRepositoriesUnauthorized with default headers values
func NewListRepositoriesUnauthorized() *ListRepositoriesUnauthorized {

	return &ListRepositoriesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list repositories unauthorized response
func (o *ListRepositoriesUnauthorized) WithXRequestID(xRequestID string) *ListRepositoriesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list repositories unauthorized response
func (o *ListRepositoriesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list repositories unauthorized response
func (o *ListRepositoriesUnauthorized) WithPayload(payload *models.Errors) *ListRepositoriesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories unauthorized response
func (o *ListRepositoriesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRepositoriesForbiddenCode is the HTTP code returned for type ListRepositoriesForbidden
const ListRepositoriesForbiddenCode int = 403

/*ListRepositoriesForbidden Forbidden

swagger:response listRepositoriesForbidden
*/
type ListRepositoriesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRepositoriesForbidden creates ListRepositoriesForbidden with default headers values
func NewListRepositoriesForbidden() *ListRepositoriesForbidden {

	return &ListRepositoriesForbidden{}
}

// WithXRequestID adds the xRequestId to the list repositories forbidden response
func (o *ListRepositoriesForbidden) WithXRequestID(xRequestID string) *ListRepositoriesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list repositories forbidden response
func (o *ListRepositoriesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list repositories forbidden response
func (o *ListRepositoriesForbidden) WithPayload(payload *models.Errors) *ListRepositoriesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories forbidden response
func (o *ListRepositoriesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRepositoriesNotFoundCode is the HTTP code returned for type ListRepositoriesNotFound
const ListRepositoriesNotFoundCode int = 404

/*ListRepositoriesNotFound Not found

swagger:response listRepositoriesNotFound
*/
type ListRepositoriesNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRepositoriesNotFound creates ListRepositoriesNotFound with default headers values
func NewListRepositoriesNotFound() *ListRepositoriesNotFound {

	return &ListRepositoriesNotFound{}
}

// WithXRequestID adds the xRequestId to the list repositories not found response
func (o *ListRepositoriesNotFound) WithXRequestID(xRequestID string) *ListRepositoriesNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list repositories not found response
func (o *ListRepositoriesNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list repositories not found response
func (o *ListRepositoriesNotFound) WithPayload(payload *models.Errors) *ListRepositoriesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories not found response
func (o *ListRepositoriesNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRepositoriesInternalServerErrorCode is the HTTP code returned for type ListRepositoriesInternalServerError
const ListRepositoriesInternalServerErrorCode int = 500

/*ListRepositoriesInternalServerError Internal server error

swagger:response listRepositoriesInternalServerError
*/
type ListRepositoriesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRepositoriesInternalServerError creates ListRepositoriesInternalServerError with default headers values
func NewListRepositoriesInternalServerError() *ListRepositoriesInternalServerError {

	return &ListRepositoriesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list repositories internal server error response
func (o *ListRepositoriesInternalServerError) WithXRequestID(xRequestID string) *ListRepositoriesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list repositories internal server error response
func (o *ListRepositoriesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list repositories internal server error response
func (o *ListRepositoriesInternalServerError) WithPayload(payload *models.Errors) *ListRepositoriesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories internal server error response
func (o *ListRepositoriesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
