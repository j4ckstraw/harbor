// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteRepositoryOKCode is the HTTP code returned for type DeleteRepositoryOK
const DeleteRepositoryOKCode int = 200

/*DeleteRepositoryOK Success

swagger:response deleteRepositoryOK
*/
type DeleteRepositoryOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteRepositoryOK creates DeleteRepositoryOK with default headers values
func NewDeleteRepositoryOK() *DeleteRepositoryOK {

	return &DeleteRepositoryOK{}
}

// WithXRequestID adds the xRequestId to the delete repository o k response
func (o *DeleteRepositoryOK) WithXRequestID(xRequestID string) *DeleteRepositoryOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete repository o k response
func (o *DeleteRepositoryOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteRepositoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteRepositoryBadRequestCode is the HTTP code returned for type DeleteRepositoryBadRequest
const DeleteRepositoryBadRequestCode int = 400

/*DeleteRepositoryBadRequest Bad request

swagger:response deleteRepositoryBadRequest
*/
type DeleteRepositoryBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRepositoryBadRequest creates DeleteRepositoryBadRequest with default headers values
func NewDeleteRepositoryBadRequest() *DeleteRepositoryBadRequest {

	return &DeleteRepositoryBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete repository bad request response
func (o *DeleteRepositoryBadRequest) WithXRequestID(xRequestID string) *DeleteRepositoryBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete repository bad request response
func (o *DeleteRepositoryBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete repository bad request response
func (o *DeleteRepositoryBadRequest) WithPayload(payload *models.Errors) *DeleteRepositoryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository bad request response
func (o *DeleteRepositoryBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRepositoryUnauthorizedCode is the HTTP code returned for type DeleteRepositoryUnauthorized
const DeleteRepositoryUnauthorizedCode int = 401

/*DeleteRepositoryUnauthorized Unauthorized

swagger:response deleteRepositoryUnauthorized
*/
type DeleteRepositoryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRepositoryUnauthorized creates DeleteRepositoryUnauthorized with default headers values
func NewDeleteRepositoryUnauthorized() *DeleteRepositoryUnauthorized {

	return &DeleteRepositoryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete repository unauthorized response
func (o *DeleteRepositoryUnauthorized) WithXRequestID(xRequestID string) *DeleteRepositoryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete repository unauthorized response
func (o *DeleteRepositoryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete repository unauthorized response
func (o *DeleteRepositoryUnauthorized) WithPayload(payload *models.Errors) *DeleteRepositoryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository unauthorized response
func (o *DeleteRepositoryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRepositoryForbiddenCode is the HTTP code returned for type DeleteRepositoryForbidden
const DeleteRepositoryForbiddenCode int = 403

/*DeleteRepositoryForbidden Forbidden

swagger:response deleteRepositoryForbidden
*/
type DeleteRepositoryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRepositoryForbidden creates DeleteRepositoryForbidden with default headers values
func NewDeleteRepositoryForbidden() *DeleteRepositoryForbidden {

	return &DeleteRepositoryForbidden{}
}

// WithXRequestID adds the xRequestId to the delete repository forbidden response
func (o *DeleteRepositoryForbidden) WithXRequestID(xRequestID string) *DeleteRepositoryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete repository forbidden response
func (o *DeleteRepositoryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete repository forbidden response
func (o *DeleteRepositoryForbidden) WithPayload(payload *models.Errors) *DeleteRepositoryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository forbidden response
func (o *DeleteRepositoryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRepositoryNotFoundCode is the HTTP code returned for type DeleteRepositoryNotFound
const DeleteRepositoryNotFoundCode int = 404

/*DeleteRepositoryNotFound Not found

swagger:response deleteRepositoryNotFound
*/
type DeleteRepositoryNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRepositoryNotFound creates DeleteRepositoryNotFound with default headers values
func NewDeleteRepositoryNotFound() *DeleteRepositoryNotFound {

	return &DeleteRepositoryNotFound{}
}

// WithXRequestID adds the xRequestId to the delete repository not found response
func (o *DeleteRepositoryNotFound) WithXRequestID(xRequestID string) *DeleteRepositoryNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete repository not found response
func (o *DeleteRepositoryNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete repository not found response
func (o *DeleteRepositoryNotFound) WithPayload(payload *models.Errors) *DeleteRepositoryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository not found response
func (o *DeleteRepositoryNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRepositoryInternalServerErrorCode is the HTTP code returned for type DeleteRepositoryInternalServerError
const DeleteRepositoryInternalServerErrorCode int = 500

/*DeleteRepositoryInternalServerError Internal server error

swagger:response deleteRepositoryInternalServerError
*/
type DeleteRepositoryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRepositoryInternalServerError creates DeleteRepositoryInternalServerError with default headers values
func NewDeleteRepositoryInternalServerError() *DeleteRepositoryInternalServerError {

	return &DeleteRepositoryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete repository internal server error response
func (o *DeleteRepositoryInternalServerError) WithXRequestID(xRequestID string) *DeleteRepositoryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete repository internal server error response
func (o *DeleteRepositoryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete repository internal server error response
func (o *DeleteRepositoryInternalServerError) WithPayload(payload *models.Errors) *DeleteRepositoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository internal server error response
func (o *DeleteRepositoryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
