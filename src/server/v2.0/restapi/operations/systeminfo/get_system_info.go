// Code generated by go-swagger; DO NOT EDIT.

package systeminfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSystemInfoHandlerFunc turns a function with the right signature into a get system info handler
type GetSystemInfoHandlerFunc func(GetSystemInfoParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSystemInfoHandlerFunc) Handle(params GetSystemInfoParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetSystemInfoHandler interface for that can handle valid get system info params
type GetSystemInfoHandler interface {
	Handle(GetSystemInfoParams, interface{}) middleware.Responder
}

// NewGetSystemInfo creates a new http.Handler for the get system info operation
func NewGetSystemInfo(ctx *middleware.Context, handler GetSystemInfoHandler) *GetSystemInfo {
	return &GetSystemInfo{Context: ctx, Handler: handler}
}

/*GetSystemInfo swagger:route GET /systeminfo systeminfo getSystemInfo

Get general system info

This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.


*/
type GetSystemInfo struct {
	Context *middleware.Context
	Handler GetSystemInfoHandler
}

func (o *GetSystemInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSystemInfoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
