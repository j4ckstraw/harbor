// Code generated by go-swagger; DO NOT EDIT.

package systeminfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetVolumesOKCode is the HTTP code returned for type GetVolumesOK
const GetVolumesOKCode int = 200

/*GetVolumesOK Get system volumes successfully.

swagger:response getVolumesOK
*/
type GetVolumesOK struct {

	/*
	  In: Body
	*/
	Payload *models.SystemInfo `json:"body,omitempty"`
}

// NewGetVolumesOK creates GetVolumesOK with default headers values
func NewGetVolumesOK() *GetVolumesOK {

	return &GetVolumesOK{}
}

// WithPayload adds the payload to the get volumes o k response
func (o *GetVolumesOK) WithPayload(payload *models.SystemInfo) *GetVolumesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volumes o k response
func (o *GetVolumesOK) SetPayload(payload *models.SystemInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVolumesUnauthorizedCode is the HTTP code returned for type GetVolumesUnauthorized
const GetVolumesUnauthorizedCode int = 401

/*GetVolumesUnauthorized Unauthorized

swagger:response getVolumesUnauthorized
*/
type GetVolumesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetVolumesUnauthorized creates GetVolumesUnauthorized with default headers values
func NewGetVolumesUnauthorized() *GetVolumesUnauthorized {

	return &GetVolumesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get volumes unauthorized response
func (o *GetVolumesUnauthorized) WithXRequestID(xRequestID string) *GetVolumesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get volumes unauthorized response
func (o *GetVolumesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get volumes unauthorized response
func (o *GetVolumesUnauthorized) WithPayload(payload *models.Errors) *GetVolumesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volumes unauthorized response
func (o *GetVolumesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVolumesForbiddenCode is the HTTP code returned for type GetVolumesForbidden
const GetVolumesForbiddenCode int = 403

/*GetVolumesForbidden Forbidden

swagger:response getVolumesForbidden
*/
type GetVolumesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetVolumesForbidden creates GetVolumesForbidden with default headers values
func NewGetVolumesForbidden() *GetVolumesForbidden {

	return &GetVolumesForbidden{}
}

// WithXRequestID adds the xRequestId to the get volumes forbidden response
func (o *GetVolumesForbidden) WithXRequestID(xRequestID string) *GetVolumesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get volumes forbidden response
func (o *GetVolumesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get volumes forbidden response
func (o *GetVolumesForbidden) WithPayload(payload *models.Errors) *GetVolumesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volumes forbidden response
func (o *GetVolumesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVolumesNotFoundCode is the HTTP code returned for type GetVolumesNotFound
const GetVolumesNotFoundCode int = 404

/*GetVolumesNotFound Not found

swagger:response getVolumesNotFound
*/
type GetVolumesNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetVolumesNotFound creates GetVolumesNotFound with default headers values
func NewGetVolumesNotFound() *GetVolumesNotFound {

	return &GetVolumesNotFound{}
}

// WithXRequestID adds the xRequestId to the get volumes not found response
func (o *GetVolumesNotFound) WithXRequestID(xRequestID string) *GetVolumesNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get volumes not found response
func (o *GetVolumesNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get volumes not found response
func (o *GetVolumesNotFound) WithPayload(payload *models.Errors) *GetVolumesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volumes not found response
func (o *GetVolumesNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetVolumesInternalServerErrorCode is the HTTP code returned for type GetVolumesInternalServerError
const GetVolumesInternalServerErrorCode int = 500

/*GetVolumesInternalServerError Internal server error

swagger:response getVolumesInternalServerError
*/
type GetVolumesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetVolumesInternalServerError creates GetVolumesInternalServerError with default headers values
func NewGetVolumesInternalServerError() *GetVolumesInternalServerError {

	return &GetVolumesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get volumes internal server error response
func (o *GetVolumesInternalServerError) WithXRequestID(xRequestID string) *GetVolumesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get volumes internal server error response
func (o *GetVolumesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get volumes internal server error response
func (o *GetVolumesInternalServerError) WithPayload(payload *models.Errors) *GetVolumesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get volumes internal server error response
func (o *GetVolumesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetVolumesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
