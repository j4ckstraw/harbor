// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListArtifactsHandlerFunc turns a function with the right signature into a list artifacts handler
type ListArtifactsHandlerFunc func(ListArtifactsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListArtifactsHandlerFunc) Handle(params ListArtifactsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListArtifactsHandler interface for that can handle valid list artifacts params
type ListArtifactsHandler interface {
	Handle(ListArtifactsParams, interface{}) middleware.Responder
}

// NewListArtifacts creates a new http.Handler for the list artifacts operation
func NewListArtifacts(ctx *middleware.Context, handler ListArtifactsHandler) *ListArtifacts {
	return &ListArtifacts{Context: ctx, Handler: handler}
}

/*ListArtifacts swagger:route GET /projects/{project_name}/repositories/{repository_name}/artifacts artifact listArtifacts

List artifacts

List artifacts under the specific project and repository. Except the basic properties, the other supported queries in "q" includes "tags=*" to list only tagged artifacts, "tags=nil" to list only untagged artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v", "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1, id2)" to list artifacts that both labels with id1 and id2 are added to

*/
type ListArtifacts struct {
	Context *middleware.Context
	Handler ListArtifactsHandler
}

func (o *ListArtifacts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListArtifactsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
