// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListTagsOKCode is the HTTP code returned for type ListTagsOK
const ListTagsOKCode int = 200

/*ListTagsOK Success

swagger:response listTagsOK
*/
type ListTagsOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of tags

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Tag `json:"body,omitempty"`
}

// NewListTagsOK creates ListTagsOK with default headers values
func NewListTagsOK() *ListTagsOK {

	return &ListTagsOK{}
}

// WithLink adds the link to the list tags o k response
func (o *ListTagsOK) WithLink(link string) *ListTagsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list tags o k response
func (o *ListTagsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list tags o k response
func (o *ListTagsOK) WithXTotalCount(xTotalCount int64) *ListTagsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list tags o k response
func (o *ListTagsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list tags o k response
func (o *ListTagsOK) WithPayload(payload []*models.Tag) *ListTagsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tags o k response
func (o *ListTagsOK) SetPayload(payload []*models.Tag) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTagsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Tag, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListTagsBadRequestCode is the HTTP code returned for type ListTagsBadRequest
const ListTagsBadRequestCode int = 400

/*ListTagsBadRequest Bad request

swagger:response listTagsBadRequest
*/
type ListTagsBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTagsBadRequest creates ListTagsBadRequest with default headers values
func NewListTagsBadRequest() *ListTagsBadRequest {

	return &ListTagsBadRequest{}
}

// WithXRequestID adds the xRequestId to the list tags bad request response
func (o *ListTagsBadRequest) WithXRequestID(xRequestID string) *ListTagsBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tags bad request response
func (o *ListTagsBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tags bad request response
func (o *ListTagsBadRequest) WithPayload(payload *models.Errors) *ListTagsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tags bad request response
func (o *ListTagsBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTagsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTagsUnauthorizedCode is the HTTP code returned for type ListTagsUnauthorized
const ListTagsUnauthorizedCode int = 401

/*ListTagsUnauthorized Unauthorized

swagger:response listTagsUnauthorized
*/
type ListTagsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTagsUnauthorized creates ListTagsUnauthorized with default headers values
func NewListTagsUnauthorized() *ListTagsUnauthorized {

	return &ListTagsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list tags unauthorized response
func (o *ListTagsUnauthorized) WithXRequestID(xRequestID string) *ListTagsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tags unauthorized response
func (o *ListTagsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tags unauthorized response
func (o *ListTagsUnauthorized) WithPayload(payload *models.Errors) *ListTagsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tags unauthorized response
func (o *ListTagsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTagsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTagsForbiddenCode is the HTTP code returned for type ListTagsForbidden
const ListTagsForbiddenCode int = 403

/*ListTagsForbidden Forbidden

swagger:response listTagsForbidden
*/
type ListTagsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTagsForbidden creates ListTagsForbidden with default headers values
func NewListTagsForbidden() *ListTagsForbidden {

	return &ListTagsForbidden{}
}

// WithXRequestID adds the xRequestId to the list tags forbidden response
func (o *ListTagsForbidden) WithXRequestID(xRequestID string) *ListTagsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tags forbidden response
func (o *ListTagsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tags forbidden response
func (o *ListTagsForbidden) WithPayload(payload *models.Errors) *ListTagsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tags forbidden response
func (o *ListTagsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTagsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTagsNotFoundCode is the HTTP code returned for type ListTagsNotFound
const ListTagsNotFoundCode int = 404

/*ListTagsNotFound Not found

swagger:response listTagsNotFound
*/
type ListTagsNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTagsNotFound creates ListTagsNotFound with default headers values
func NewListTagsNotFound() *ListTagsNotFound {

	return &ListTagsNotFound{}
}

// WithXRequestID adds the xRequestId to the list tags not found response
func (o *ListTagsNotFound) WithXRequestID(xRequestID string) *ListTagsNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tags not found response
func (o *ListTagsNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tags not found response
func (o *ListTagsNotFound) WithPayload(payload *models.Errors) *ListTagsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tags not found response
func (o *ListTagsNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTagsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTagsInternalServerErrorCode is the HTTP code returned for type ListTagsInternalServerError
const ListTagsInternalServerErrorCode int = 500

/*ListTagsInternalServerError Internal server error

swagger:response listTagsInternalServerError
*/
type ListTagsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListTagsInternalServerError creates ListTagsInternalServerError with default headers values
func NewListTagsInternalServerError() *ListTagsInternalServerError {

	return &ListTagsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list tags internal server error response
func (o *ListTagsInternalServerError) WithXRequestID(xRequestID string) *ListTagsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list tags internal server error response
func (o *ListTagsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list tags internal server error response
func (o *ListTagsInternalServerError) WithPayload(payload *models.Errors) *ListTagsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list tags internal server error response
func (o *ListTagsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTagsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
