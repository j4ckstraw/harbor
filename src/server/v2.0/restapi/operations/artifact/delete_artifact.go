// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteArtifactHandlerFunc turns a function with the right signature into a delete artifact handler
type DeleteArtifactHandlerFunc func(DeleteArtifactParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteArtifactHandlerFunc) Handle(params DeleteArtifactParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteArtifactHandler interface for that can handle valid delete artifact params
type DeleteArtifactHandler interface {
	Handle(DeleteArtifactParams, interface{}) middleware.Responder
}

// NewDeleteArtifact creates a new http.Handler for the delete artifact operation
func NewDeleteArtifact(ctx *middleware.Context, handler DeleteArtifactHandler) *DeleteArtifact {
	return &DeleteArtifact{Context: ctx, Handler: handler}
}

/*DeleteArtifact swagger:route DELETE /projects/{project_name}/repositories/{repository_name}/artifacts/{reference} artifact deleteArtifact

Delete the specific artifact

Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag

*/
type DeleteArtifact struct {
	Context *middleware.Context
	Handler DeleteArtifactHandler
}

func (o *DeleteArtifact) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteArtifactParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
