// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetArtifactOKCode is the HTTP code returned for type GetArtifactOK
const GetArtifactOKCode int = 200

/*GetArtifactOK Success

swagger:response getArtifactOK
*/
type GetArtifactOK struct {

	/*
	  In: Body
	*/
	Payload *models.Artifact `json:"body,omitempty"`
}

// NewGetArtifactOK creates GetArtifactOK with default headers values
func NewGetArtifactOK() *GetArtifactOK {

	return &GetArtifactOK{}
}

// WithPayload adds the payload to the get artifact o k response
func (o *GetArtifactOK) WithPayload(payload *models.Artifact) *GetArtifactOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact o k response
func (o *GetArtifactOK) SetPayload(payload *models.Artifact) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetArtifactBadRequestCode is the HTTP code returned for type GetArtifactBadRequest
const GetArtifactBadRequestCode int = 400

/*GetArtifactBadRequest Bad request

swagger:response getArtifactBadRequest
*/
type GetArtifactBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetArtifactBadRequest creates GetArtifactBadRequest with default headers values
func NewGetArtifactBadRequest() *GetArtifactBadRequest {

	return &GetArtifactBadRequest{}
}

// WithXRequestID adds the xRequestId to the get artifact bad request response
func (o *GetArtifactBadRequest) WithXRequestID(xRequestID string) *GetArtifactBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get artifact bad request response
func (o *GetArtifactBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get artifact bad request response
func (o *GetArtifactBadRequest) WithPayload(payload *models.Errors) *GetArtifactBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact bad request response
func (o *GetArtifactBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetArtifactUnauthorizedCode is the HTTP code returned for type GetArtifactUnauthorized
const GetArtifactUnauthorizedCode int = 401

/*GetArtifactUnauthorized Unauthorized

swagger:response getArtifactUnauthorized
*/
type GetArtifactUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetArtifactUnauthorized creates GetArtifactUnauthorized with default headers values
func NewGetArtifactUnauthorized() *GetArtifactUnauthorized {

	return &GetArtifactUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get artifact unauthorized response
func (o *GetArtifactUnauthorized) WithXRequestID(xRequestID string) *GetArtifactUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get artifact unauthorized response
func (o *GetArtifactUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get artifact unauthorized response
func (o *GetArtifactUnauthorized) WithPayload(payload *models.Errors) *GetArtifactUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact unauthorized response
func (o *GetArtifactUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetArtifactForbiddenCode is the HTTP code returned for type GetArtifactForbidden
const GetArtifactForbiddenCode int = 403

/*GetArtifactForbidden Forbidden

swagger:response getArtifactForbidden
*/
type GetArtifactForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetArtifactForbidden creates GetArtifactForbidden with default headers values
func NewGetArtifactForbidden() *GetArtifactForbidden {

	return &GetArtifactForbidden{}
}

// WithXRequestID adds the xRequestId to the get artifact forbidden response
func (o *GetArtifactForbidden) WithXRequestID(xRequestID string) *GetArtifactForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get artifact forbidden response
func (o *GetArtifactForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get artifact forbidden response
func (o *GetArtifactForbidden) WithPayload(payload *models.Errors) *GetArtifactForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact forbidden response
func (o *GetArtifactForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetArtifactNotFoundCode is the HTTP code returned for type GetArtifactNotFound
const GetArtifactNotFoundCode int = 404

/*GetArtifactNotFound Not found

swagger:response getArtifactNotFound
*/
type GetArtifactNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetArtifactNotFound creates GetArtifactNotFound with default headers values
func NewGetArtifactNotFound() *GetArtifactNotFound {

	return &GetArtifactNotFound{}
}

// WithXRequestID adds the xRequestId to the get artifact not found response
func (o *GetArtifactNotFound) WithXRequestID(xRequestID string) *GetArtifactNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get artifact not found response
func (o *GetArtifactNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get artifact not found response
func (o *GetArtifactNotFound) WithPayload(payload *models.Errors) *GetArtifactNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact not found response
func (o *GetArtifactNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetArtifactInternalServerErrorCode is the HTTP code returned for type GetArtifactInternalServerError
const GetArtifactInternalServerErrorCode int = 500

/*GetArtifactInternalServerError Internal server error

swagger:response getArtifactInternalServerError
*/
type GetArtifactInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetArtifactInternalServerError creates GetArtifactInternalServerError with default headers values
func NewGetArtifactInternalServerError() *GetArtifactInternalServerError {

	return &GetArtifactInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get artifact internal server error response
func (o *GetArtifactInternalServerError) WithXRequestID(xRequestID string) *GetArtifactInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get artifact internal server error response
func (o *GetArtifactInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get artifact internal server error response
func (o *GetArtifactInternalServerError) WithPayload(payload *models.Errors) *GetArtifactInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact internal server error response
func (o *GetArtifactInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
