// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteTagOKCode is the HTTP code returned for type DeleteTagOK
const DeleteTagOKCode int = 200

/*DeleteTagOK Success

swagger:response deleteTagOK
*/
type DeleteTagOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteTagOK creates DeleteTagOK with default headers values
func NewDeleteTagOK() *DeleteTagOK {

	return &DeleteTagOK{}
}

// WithXRequestID adds the xRequestId to the delete tag o k response
func (o *DeleteTagOK) WithXRequestID(xRequestID string) *DeleteTagOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete tag o k response
func (o *DeleteTagOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteTagOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteTagUnauthorizedCode is the HTTP code returned for type DeleteTagUnauthorized
const DeleteTagUnauthorizedCode int = 401

/*DeleteTagUnauthorized Unauthorized

swagger:response deleteTagUnauthorized
*/
type DeleteTagUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteTagUnauthorized creates DeleteTagUnauthorized with default headers values
func NewDeleteTagUnauthorized() *DeleteTagUnauthorized {

	return &DeleteTagUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete tag unauthorized response
func (o *DeleteTagUnauthorized) WithXRequestID(xRequestID string) *DeleteTagUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete tag unauthorized response
func (o *DeleteTagUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete tag unauthorized response
func (o *DeleteTagUnauthorized) WithPayload(payload *models.Errors) *DeleteTagUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tag unauthorized response
func (o *DeleteTagUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTagUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTagForbiddenCode is the HTTP code returned for type DeleteTagForbidden
const DeleteTagForbiddenCode int = 403

/*DeleteTagForbidden Forbidden

swagger:response deleteTagForbidden
*/
type DeleteTagForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteTagForbidden creates DeleteTagForbidden with default headers values
func NewDeleteTagForbidden() *DeleteTagForbidden {

	return &DeleteTagForbidden{}
}

// WithXRequestID adds the xRequestId to the delete tag forbidden response
func (o *DeleteTagForbidden) WithXRequestID(xRequestID string) *DeleteTagForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete tag forbidden response
func (o *DeleteTagForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete tag forbidden response
func (o *DeleteTagForbidden) WithPayload(payload *models.Errors) *DeleteTagForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tag forbidden response
func (o *DeleteTagForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTagForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTagNotFoundCode is the HTTP code returned for type DeleteTagNotFound
const DeleteTagNotFoundCode int = 404

/*DeleteTagNotFound Not found

swagger:response deleteTagNotFound
*/
type DeleteTagNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteTagNotFound creates DeleteTagNotFound with default headers values
func NewDeleteTagNotFound() *DeleteTagNotFound {

	return &DeleteTagNotFound{}
}

// WithXRequestID adds the xRequestId to the delete tag not found response
func (o *DeleteTagNotFound) WithXRequestID(xRequestID string) *DeleteTagNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete tag not found response
func (o *DeleteTagNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete tag not found response
func (o *DeleteTagNotFound) WithPayload(payload *models.Errors) *DeleteTagNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tag not found response
func (o *DeleteTagNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTagNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTagInternalServerErrorCode is the HTTP code returned for type DeleteTagInternalServerError
const DeleteTagInternalServerErrorCode int = 500

/*DeleteTagInternalServerError Internal server error

swagger:response deleteTagInternalServerError
*/
type DeleteTagInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteTagInternalServerError creates DeleteTagInternalServerError with default headers values
func NewDeleteTagInternalServerError() *DeleteTagInternalServerError {

	return &DeleteTagInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete tag internal server error response
func (o *DeleteTagInternalServerError) WithXRequestID(xRequestID string) *DeleteTagInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete tag internal server error response
func (o *DeleteTagInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete tag internal server error response
func (o *DeleteTagInternalServerError) WithPayload(payload *models.Errors) *DeleteTagInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tag internal server error response
func (o *DeleteTagInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTagInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
