// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/swag"
)

// GetArtifactURL generates an URL for the get artifact operation
type GetArtifactURL struct {
	ProjectName    string
	Reference      string
	RepositoryName string

	Page                *int64
	PageSize            *int64
	WithImmutableStatus *bool
	WithLabel           *bool
	WithScanOverview    *bool
	WithSignature       *bool
	WithTag             *bool

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetArtifactURL) WithBasePath(bp string) *GetArtifactURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetArtifactURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetArtifactURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}"

	projectName := o.ProjectName
	if projectName != "" {
		_path = strings.Replace(_path, "{project_name}", projectName, -1)
	} else {
		return nil, errors.New("projectName is required on GetArtifactURL")
	}

	reference := o.Reference
	if reference != "" {
		_path = strings.Replace(_path, "{reference}", reference, -1)
	} else {
		return nil, errors.New("reference is required on GetArtifactURL")
	}

	repositoryName := o.RepositoryName
	if repositoryName != "" {
		_path = strings.Replace(_path, "{repository_name}", repositoryName, -1)
	} else {
		return nil, errors.New("repositoryName is required on GetArtifactURL")
	}

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/v2.0"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var pageSizeQ string
	if o.PageSize != nil {
		pageSizeQ = swag.FormatInt64(*o.PageSize)
	}
	if pageSizeQ != "" {
		qs.Set("page_size", pageSizeQ)
	}

	var withImmutableStatusQ string
	if o.WithImmutableStatus != nil {
		withImmutableStatusQ = swag.FormatBool(*o.WithImmutableStatus)
	}
	if withImmutableStatusQ != "" {
		qs.Set("with_immutable_status", withImmutableStatusQ)
	}

	var withLabelQ string
	if o.WithLabel != nil {
		withLabelQ = swag.FormatBool(*o.WithLabel)
	}
	if withLabelQ != "" {
		qs.Set("with_label", withLabelQ)
	}

	var withScanOverviewQ string
	if o.WithScanOverview != nil {
		withScanOverviewQ = swag.FormatBool(*o.WithScanOverview)
	}
	if withScanOverviewQ != "" {
		qs.Set("with_scan_overview", withScanOverviewQ)
	}

	var withSignatureQ string
	if o.WithSignature != nil {
		withSignatureQ = swag.FormatBool(*o.WithSignature)
	}
	if withSignatureQ != "" {
		qs.Set("with_signature", withSignatureQ)
	}

	var withTagQ string
	if o.WithTag != nil {
		withTagQ = swag.FormatBool(*o.WithTag)
	}
	if withTagQ != "" {
		qs.Set("with_tag", withTagQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetArtifactURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetArtifactURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetArtifactURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetArtifactURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetArtifactURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetArtifactURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
