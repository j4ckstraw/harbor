// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// AddLabelOKCode is the HTTP code returned for type AddLabelOK
const AddLabelOKCode int = 200

/*AddLabelOK Success

swagger:response addLabelOK
*/
type AddLabelOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewAddLabelOK creates AddLabelOK with default headers values
func NewAddLabelOK() *AddLabelOK {

	return &AddLabelOK{}
}

// WithXRequestID adds the xRequestId to the add label o k response
func (o *AddLabelOK) WithXRequestID(xRequestID string) *AddLabelOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label o k response
func (o *AddLabelOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *AddLabelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddLabelBadRequestCode is the HTTP code returned for type AddLabelBadRequest
const AddLabelBadRequestCode int = 400

/*AddLabelBadRequest Bad request

swagger:response addLabelBadRequest
*/
type AddLabelBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddLabelBadRequest creates AddLabelBadRequest with default headers values
func NewAddLabelBadRequest() *AddLabelBadRequest {

	return &AddLabelBadRequest{}
}

// WithXRequestID adds the xRequestId to the add label bad request response
func (o *AddLabelBadRequest) WithXRequestID(xRequestID string) *AddLabelBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label bad request response
func (o *AddLabelBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add label bad request response
func (o *AddLabelBadRequest) WithPayload(payload *models.Errors) *AddLabelBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add label bad request response
func (o *AddLabelBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddLabelBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddLabelUnauthorizedCode is the HTTP code returned for type AddLabelUnauthorized
const AddLabelUnauthorizedCode int = 401

/*AddLabelUnauthorized Unauthorized

swagger:response addLabelUnauthorized
*/
type AddLabelUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddLabelUnauthorized creates AddLabelUnauthorized with default headers values
func NewAddLabelUnauthorized() *AddLabelUnauthorized {

	return &AddLabelUnauthorized{}
}

// WithXRequestID adds the xRequestId to the add label unauthorized response
func (o *AddLabelUnauthorized) WithXRequestID(xRequestID string) *AddLabelUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label unauthorized response
func (o *AddLabelUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add label unauthorized response
func (o *AddLabelUnauthorized) WithPayload(payload *models.Errors) *AddLabelUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add label unauthorized response
func (o *AddLabelUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddLabelUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddLabelForbiddenCode is the HTTP code returned for type AddLabelForbidden
const AddLabelForbiddenCode int = 403

/*AddLabelForbidden Forbidden

swagger:response addLabelForbidden
*/
type AddLabelForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddLabelForbidden creates AddLabelForbidden with default headers values
func NewAddLabelForbidden() *AddLabelForbidden {

	return &AddLabelForbidden{}
}

// WithXRequestID adds the xRequestId to the add label forbidden response
func (o *AddLabelForbidden) WithXRequestID(xRequestID string) *AddLabelForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label forbidden response
func (o *AddLabelForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add label forbidden response
func (o *AddLabelForbidden) WithPayload(payload *models.Errors) *AddLabelForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add label forbidden response
func (o *AddLabelForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddLabelForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddLabelNotFoundCode is the HTTP code returned for type AddLabelNotFound
const AddLabelNotFoundCode int = 404

/*AddLabelNotFound Not found

swagger:response addLabelNotFound
*/
type AddLabelNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddLabelNotFound creates AddLabelNotFound with default headers values
func NewAddLabelNotFound() *AddLabelNotFound {

	return &AddLabelNotFound{}
}

// WithXRequestID adds the xRequestId to the add label not found response
func (o *AddLabelNotFound) WithXRequestID(xRequestID string) *AddLabelNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label not found response
func (o *AddLabelNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add label not found response
func (o *AddLabelNotFound) WithPayload(payload *models.Errors) *AddLabelNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add label not found response
func (o *AddLabelNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddLabelNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddLabelConflictCode is the HTTP code returned for type AddLabelConflict
const AddLabelConflictCode int = 409

/*AddLabelConflict Conflict

swagger:response addLabelConflict
*/
type AddLabelConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddLabelConflict creates AddLabelConflict with default headers values
func NewAddLabelConflict() *AddLabelConflict {

	return &AddLabelConflict{}
}

// WithXRequestID adds the xRequestId to the add label conflict response
func (o *AddLabelConflict) WithXRequestID(xRequestID string) *AddLabelConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label conflict response
func (o *AddLabelConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add label conflict response
func (o *AddLabelConflict) WithPayload(payload *models.Errors) *AddLabelConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add label conflict response
func (o *AddLabelConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddLabelConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddLabelInternalServerErrorCode is the HTTP code returned for type AddLabelInternalServerError
const AddLabelInternalServerErrorCode int = 500

/*AddLabelInternalServerError Internal server error

swagger:response addLabelInternalServerError
*/
type AddLabelInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddLabelInternalServerError creates AddLabelInternalServerError with default headers values
func NewAddLabelInternalServerError() *AddLabelInternalServerError {

	return &AddLabelInternalServerError{}
}

// WithXRequestID adds the xRequestId to the add label internal server error response
func (o *AddLabelInternalServerError) WithXRequestID(xRequestID string) *AddLabelInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add label internal server error response
func (o *AddLabelInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add label internal server error response
func (o *AddLabelInternalServerError) WithPayload(payload *models.Errors) *AddLabelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add label internal server error response
func (o *AddLabelInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddLabelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
