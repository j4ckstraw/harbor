// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetAdditionOKCode is the HTTP code returned for type GetAdditionOK
const GetAdditionOKCode int = 200

/*GetAdditionOK Success

swagger:response getAdditionOK
*/
type GetAdditionOK struct {
	/*The content type of the addition

	 */
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAdditionOK creates GetAdditionOK with default headers values
func NewGetAdditionOK() *GetAdditionOK {

	return &GetAdditionOK{}
}

// WithContentType adds the contentType to the get addition o k response
func (o *GetAdditionOK) WithContentType(contentType string) *GetAdditionOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the get addition o k response
func (o *GetAdditionOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the get addition o k response
func (o *GetAdditionOK) WithPayload(payload string) *GetAdditionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get addition o k response
func (o *GetAdditionOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAdditionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAdditionBadRequestCode is the HTTP code returned for type GetAdditionBadRequest
const GetAdditionBadRequestCode int = 400

/*GetAdditionBadRequest Bad request

swagger:response getAdditionBadRequest
*/
type GetAdditionBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetAdditionBadRequest creates GetAdditionBadRequest with default headers values
func NewGetAdditionBadRequest() *GetAdditionBadRequest {

	return &GetAdditionBadRequest{}
}

// WithXRequestID adds the xRequestId to the get addition bad request response
func (o *GetAdditionBadRequest) WithXRequestID(xRequestID string) *GetAdditionBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get addition bad request response
func (o *GetAdditionBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get addition bad request response
func (o *GetAdditionBadRequest) WithPayload(payload *models.Errors) *GetAdditionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get addition bad request response
func (o *GetAdditionBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAdditionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAdditionUnauthorizedCode is the HTTP code returned for type GetAdditionUnauthorized
const GetAdditionUnauthorizedCode int = 401

/*GetAdditionUnauthorized Unauthorized

swagger:response getAdditionUnauthorized
*/
type GetAdditionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetAdditionUnauthorized creates GetAdditionUnauthorized with default headers values
func NewGetAdditionUnauthorized() *GetAdditionUnauthorized {

	return &GetAdditionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get addition unauthorized response
func (o *GetAdditionUnauthorized) WithXRequestID(xRequestID string) *GetAdditionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get addition unauthorized response
func (o *GetAdditionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get addition unauthorized response
func (o *GetAdditionUnauthorized) WithPayload(payload *models.Errors) *GetAdditionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get addition unauthorized response
func (o *GetAdditionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAdditionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAdditionForbiddenCode is the HTTP code returned for type GetAdditionForbidden
const GetAdditionForbiddenCode int = 403

/*GetAdditionForbidden Forbidden

swagger:response getAdditionForbidden
*/
type GetAdditionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetAdditionForbidden creates GetAdditionForbidden with default headers values
func NewGetAdditionForbidden() *GetAdditionForbidden {

	return &GetAdditionForbidden{}
}

// WithXRequestID adds the xRequestId to the get addition forbidden response
func (o *GetAdditionForbidden) WithXRequestID(xRequestID string) *GetAdditionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get addition forbidden response
func (o *GetAdditionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get addition forbidden response
func (o *GetAdditionForbidden) WithPayload(payload *models.Errors) *GetAdditionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get addition forbidden response
func (o *GetAdditionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAdditionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAdditionNotFoundCode is the HTTP code returned for type GetAdditionNotFound
const GetAdditionNotFoundCode int = 404

/*GetAdditionNotFound Not found

swagger:response getAdditionNotFound
*/
type GetAdditionNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetAdditionNotFound creates GetAdditionNotFound with default headers values
func NewGetAdditionNotFound() *GetAdditionNotFound {

	return &GetAdditionNotFound{}
}

// WithXRequestID adds the xRequestId to the get addition not found response
func (o *GetAdditionNotFound) WithXRequestID(xRequestID string) *GetAdditionNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get addition not found response
func (o *GetAdditionNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get addition not found response
func (o *GetAdditionNotFound) WithPayload(payload *models.Errors) *GetAdditionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get addition not found response
func (o *GetAdditionNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAdditionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAdditionInternalServerErrorCode is the HTTP code returned for type GetAdditionInternalServerError
const GetAdditionInternalServerErrorCode int = 500

/*GetAdditionInternalServerError Internal server error

swagger:response getAdditionInternalServerError
*/
type GetAdditionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetAdditionInternalServerError creates GetAdditionInternalServerError with default headers values
func NewGetAdditionInternalServerError() *GetAdditionInternalServerError {

	return &GetAdditionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get addition internal server error response
func (o *GetAdditionInternalServerError) WithXRequestID(xRequestID string) *GetAdditionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get addition internal server error response
func (o *GetAdditionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get addition internal server error response
func (o *GetAdditionInternalServerError) WithPayload(payload *models.Errors) *GetAdditionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get addition internal server error response
func (o *GetAdditionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAdditionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
