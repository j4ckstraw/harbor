// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// RemoveLabelOKCode is the HTTP code returned for type RemoveLabelOK
const RemoveLabelOKCode int = 200

/*RemoveLabelOK Success

swagger:response removeLabelOK
*/
type RemoveLabelOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewRemoveLabelOK creates RemoveLabelOK with default headers values
func NewRemoveLabelOK() *RemoveLabelOK {

	return &RemoveLabelOK{}
}

// WithXRequestID adds the xRequestId to the remove label o k response
func (o *RemoveLabelOK) WithXRequestID(xRequestID string) *RemoveLabelOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the remove label o k response
func (o *RemoveLabelOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *RemoveLabelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// RemoveLabelUnauthorizedCode is the HTTP code returned for type RemoveLabelUnauthorized
const RemoveLabelUnauthorizedCode int = 401

/*RemoveLabelUnauthorized Unauthorized

swagger:response removeLabelUnauthorized
*/
type RemoveLabelUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRemoveLabelUnauthorized creates RemoveLabelUnauthorized with default headers values
func NewRemoveLabelUnauthorized() *RemoveLabelUnauthorized {

	return &RemoveLabelUnauthorized{}
}

// WithXRequestID adds the xRequestId to the remove label unauthorized response
func (o *RemoveLabelUnauthorized) WithXRequestID(xRequestID string) *RemoveLabelUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the remove label unauthorized response
func (o *RemoveLabelUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the remove label unauthorized response
func (o *RemoveLabelUnauthorized) WithPayload(payload *models.Errors) *RemoveLabelUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove label unauthorized response
func (o *RemoveLabelUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveLabelUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveLabelForbiddenCode is the HTTP code returned for type RemoveLabelForbidden
const RemoveLabelForbiddenCode int = 403

/*RemoveLabelForbidden Forbidden

swagger:response removeLabelForbidden
*/
type RemoveLabelForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRemoveLabelForbidden creates RemoveLabelForbidden with default headers values
func NewRemoveLabelForbidden() *RemoveLabelForbidden {

	return &RemoveLabelForbidden{}
}

// WithXRequestID adds the xRequestId to the remove label forbidden response
func (o *RemoveLabelForbidden) WithXRequestID(xRequestID string) *RemoveLabelForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the remove label forbidden response
func (o *RemoveLabelForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the remove label forbidden response
func (o *RemoveLabelForbidden) WithPayload(payload *models.Errors) *RemoveLabelForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove label forbidden response
func (o *RemoveLabelForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveLabelForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveLabelNotFoundCode is the HTTP code returned for type RemoveLabelNotFound
const RemoveLabelNotFoundCode int = 404

/*RemoveLabelNotFound Not found

swagger:response removeLabelNotFound
*/
type RemoveLabelNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRemoveLabelNotFound creates RemoveLabelNotFound with default headers values
func NewRemoveLabelNotFound() *RemoveLabelNotFound {

	return &RemoveLabelNotFound{}
}

// WithXRequestID adds the xRequestId to the remove label not found response
func (o *RemoveLabelNotFound) WithXRequestID(xRequestID string) *RemoveLabelNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the remove label not found response
func (o *RemoveLabelNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the remove label not found response
func (o *RemoveLabelNotFound) WithPayload(payload *models.Errors) *RemoveLabelNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove label not found response
func (o *RemoveLabelNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveLabelNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveLabelConflictCode is the HTTP code returned for type RemoveLabelConflict
const RemoveLabelConflictCode int = 409

/*RemoveLabelConflict Conflict

swagger:response removeLabelConflict
*/
type RemoveLabelConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRemoveLabelConflict creates RemoveLabelConflict with default headers values
func NewRemoveLabelConflict() *RemoveLabelConflict {

	return &RemoveLabelConflict{}
}

// WithXRequestID adds the xRequestId to the remove label conflict response
func (o *RemoveLabelConflict) WithXRequestID(xRequestID string) *RemoveLabelConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the remove label conflict response
func (o *RemoveLabelConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the remove label conflict response
func (o *RemoveLabelConflict) WithPayload(payload *models.Errors) *RemoveLabelConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove label conflict response
func (o *RemoveLabelConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveLabelConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveLabelInternalServerErrorCode is the HTTP code returned for type RemoveLabelInternalServerError
const RemoveLabelInternalServerErrorCode int = 500

/*RemoveLabelInternalServerError Internal server error

swagger:response removeLabelInternalServerError
*/
type RemoveLabelInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRemoveLabelInternalServerError creates RemoveLabelInternalServerError with default headers values
func NewRemoveLabelInternalServerError() *RemoveLabelInternalServerError {

	return &RemoveLabelInternalServerError{}
}

// WithXRequestID adds the xRequestId to the remove label internal server error response
func (o *RemoveLabelInternalServerError) WithXRequestID(xRequestID string) *RemoveLabelInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the remove label internal server error response
func (o *RemoveLabelInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the remove label internal server error response
func (o *RemoveLabelInternalServerError) WithPayload(payload *models.Errors) *RemoveLabelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove label internal server error response
func (o *RemoveLabelInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveLabelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
