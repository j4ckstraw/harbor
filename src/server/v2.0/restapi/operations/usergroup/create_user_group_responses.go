// Code generated by go-swagger; DO NOT EDIT.

package usergroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateUserGroupCreatedCode is the HTTP code returned for type CreateUserGroupCreated
const CreateUserGroupCreatedCode int = 201

/*CreateUserGroupCreated User group created successfully.

swagger:response createUserGroupCreated
*/
type CreateUserGroupCreated struct {
	/*The URL of the created resource

	 */
	Location string `json:"Location"`
}

// NewCreateUserGroupCreated creates CreateUserGroupCreated with default headers values
func NewCreateUserGroupCreated() *CreateUserGroupCreated {

	return &CreateUserGroupCreated{}
}

// WithLocation adds the location to the create user group created response
func (o *CreateUserGroupCreated) WithLocation(location string) *CreateUserGroupCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create user group created response
func (o *CreateUserGroupCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *CreateUserGroupCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateUserGroupBadRequestCode is the HTTP code returned for type CreateUserGroupBadRequest
const CreateUserGroupBadRequestCode int = 400

/*CreateUserGroupBadRequest Bad request

swagger:response createUserGroupBadRequest
*/
type CreateUserGroupBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateUserGroupBadRequest creates CreateUserGroupBadRequest with default headers values
func NewCreateUserGroupBadRequest() *CreateUserGroupBadRequest {

	return &CreateUserGroupBadRequest{}
}

// WithXRequestID adds the xRequestId to the create user group bad request response
func (o *CreateUserGroupBadRequest) WithXRequestID(xRequestID string) *CreateUserGroupBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user group bad request response
func (o *CreateUserGroupBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user group bad request response
func (o *CreateUserGroupBadRequest) WithPayload(payload *models.Errors) *CreateUserGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user group bad request response
func (o *CreateUserGroupBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUserGroupUnauthorizedCode is the HTTP code returned for type CreateUserGroupUnauthorized
const CreateUserGroupUnauthorizedCode int = 401

/*CreateUserGroupUnauthorized Unauthorized

swagger:response createUserGroupUnauthorized
*/
type CreateUserGroupUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateUserGroupUnauthorized creates CreateUserGroupUnauthorized with default headers values
func NewCreateUserGroupUnauthorized() *CreateUserGroupUnauthorized {

	return &CreateUserGroupUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create user group unauthorized response
func (o *CreateUserGroupUnauthorized) WithXRequestID(xRequestID string) *CreateUserGroupUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user group unauthorized response
func (o *CreateUserGroupUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user group unauthorized response
func (o *CreateUserGroupUnauthorized) WithPayload(payload *models.Errors) *CreateUserGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user group unauthorized response
func (o *CreateUserGroupUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUserGroupForbiddenCode is the HTTP code returned for type CreateUserGroupForbidden
const CreateUserGroupForbiddenCode int = 403

/*CreateUserGroupForbidden Forbidden

swagger:response createUserGroupForbidden
*/
type CreateUserGroupForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateUserGroupForbidden creates CreateUserGroupForbidden with default headers values
func NewCreateUserGroupForbidden() *CreateUserGroupForbidden {

	return &CreateUserGroupForbidden{}
}

// WithXRequestID adds the xRequestId to the create user group forbidden response
func (o *CreateUserGroupForbidden) WithXRequestID(xRequestID string) *CreateUserGroupForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user group forbidden response
func (o *CreateUserGroupForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user group forbidden response
func (o *CreateUserGroupForbidden) WithPayload(payload *models.Errors) *CreateUserGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user group forbidden response
func (o *CreateUserGroupForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUserGroupConflictCode is the HTTP code returned for type CreateUserGroupConflict
const CreateUserGroupConflictCode int = 409

/*CreateUserGroupConflict Conflict

swagger:response createUserGroupConflict
*/
type CreateUserGroupConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateUserGroupConflict creates CreateUserGroupConflict with default headers values
func NewCreateUserGroupConflict() *CreateUserGroupConflict {

	return &CreateUserGroupConflict{}
}

// WithXRequestID adds the xRequestId to the create user group conflict response
func (o *CreateUserGroupConflict) WithXRequestID(xRequestID string) *CreateUserGroupConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user group conflict response
func (o *CreateUserGroupConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user group conflict response
func (o *CreateUserGroupConflict) WithPayload(payload *models.Errors) *CreateUserGroupConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user group conflict response
func (o *CreateUserGroupConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGroupConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUserGroupInternalServerErrorCode is the HTTP code returned for type CreateUserGroupInternalServerError
const CreateUserGroupInternalServerErrorCode int = 500

/*CreateUserGroupInternalServerError Internal server error

swagger:response createUserGroupInternalServerError
*/
type CreateUserGroupInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateUserGroupInternalServerError creates CreateUserGroupInternalServerError with default headers values
func NewCreateUserGroupInternalServerError() *CreateUserGroupInternalServerError {

	return &CreateUserGroupInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create user group internal server error response
func (o *CreateUserGroupInternalServerError) WithXRequestID(xRequestID string) *CreateUserGroupInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user group internal server error response
func (o *CreateUserGroupInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user group internal server error response
func (o *CreateUserGroupInternalServerError) WithPayload(payload *models.Errors) *CreateUserGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user group internal server error response
func (o *CreateUserGroupInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
