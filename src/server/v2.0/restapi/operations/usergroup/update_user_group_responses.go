// Code generated by go-swagger; DO NOT EDIT.

package usergroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateUserGroupOKCode is the HTTP code returned for type UpdateUserGroupOK
const UpdateUserGroupOKCode int = 200

/*UpdateUserGroupOK Success

swagger:response updateUserGroupOK
*/
type UpdateUserGroupOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateUserGroupOK creates UpdateUserGroupOK with default headers values
func NewUpdateUserGroupOK() *UpdateUserGroupOK {

	return &UpdateUserGroupOK{}
}

// WithXRequestID adds the xRequestId to the update user group o k response
func (o *UpdateUserGroupOK) WithXRequestID(xRequestID string) *UpdateUserGroupOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update user group o k response
func (o *UpdateUserGroupOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateUserGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateUserGroupBadRequestCode is the HTTP code returned for type UpdateUserGroupBadRequest
const UpdateUserGroupBadRequestCode int = 400

/*UpdateUserGroupBadRequest Bad request

swagger:response updateUserGroupBadRequest
*/
type UpdateUserGroupBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateUserGroupBadRequest creates UpdateUserGroupBadRequest with default headers values
func NewUpdateUserGroupBadRequest() *UpdateUserGroupBadRequest {

	return &UpdateUserGroupBadRequest{}
}

// WithXRequestID adds the xRequestId to the update user group bad request response
func (o *UpdateUserGroupBadRequest) WithXRequestID(xRequestID string) *UpdateUserGroupBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update user group bad request response
func (o *UpdateUserGroupBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update user group bad request response
func (o *UpdateUserGroupBadRequest) WithPayload(payload *models.Errors) *UpdateUserGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user group bad request response
func (o *UpdateUserGroupBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateUserGroupUnauthorizedCode is the HTTP code returned for type UpdateUserGroupUnauthorized
const UpdateUserGroupUnauthorizedCode int = 401

/*UpdateUserGroupUnauthorized Unauthorized

swagger:response updateUserGroupUnauthorized
*/
type UpdateUserGroupUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateUserGroupUnauthorized creates UpdateUserGroupUnauthorized with default headers values
func NewUpdateUserGroupUnauthorized() *UpdateUserGroupUnauthorized {

	return &UpdateUserGroupUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update user group unauthorized response
func (o *UpdateUserGroupUnauthorized) WithXRequestID(xRequestID string) *UpdateUserGroupUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update user group unauthorized response
func (o *UpdateUserGroupUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update user group unauthorized response
func (o *UpdateUserGroupUnauthorized) WithPayload(payload *models.Errors) *UpdateUserGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user group unauthorized response
func (o *UpdateUserGroupUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateUserGroupForbiddenCode is the HTTP code returned for type UpdateUserGroupForbidden
const UpdateUserGroupForbiddenCode int = 403

/*UpdateUserGroupForbidden Forbidden

swagger:response updateUserGroupForbidden
*/
type UpdateUserGroupForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateUserGroupForbidden creates UpdateUserGroupForbidden with default headers values
func NewUpdateUserGroupForbidden() *UpdateUserGroupForbidden {

	return &UpdateUserGroupForbidden{}
}

// WithXRequestID adds the xRequestId to the update user group forbidden response
func (o *UpdateUserGroupForbidden) WithXRequestID(xRequestID string) *UpdateUserGroupForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update user group forbidden response
func (o *UpdateUserGroupForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update user group forbidden response
func (o *UpdateUserGroupForbidden) WithPayload(payload *models.Errors) *UpdateUserGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user group forbidden response
func (o *UpdateUserGroupForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateUserGroupNotFoundCode is the HTTP code returned for type UpdateUserGroupNotFound
const UpdateUserGroupNotFoundCode int = 404

/*UpdateUserGroupNotFound Not found

swagger:response updateUserGroupNotFound
*/
type UpdateUserGroupNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateUserGroupNotFound creates UpdateUserGroupNotFound with default headers values
func NewUpdateUserGroupNotFound() *UpdateUserGroupNotFound {

	return &UpdateUserGroupNotFound{}
}

// WithXRequestID adds the xRequestId to the update user group not found response
func (o *UpdateUserGroupNotFound) WithXRequestID(xRequestID string) *UpdateUserGroupNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update user group not found response
func (o *UpdateUserGroupNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update user group not found response
func (o *UpdateUserGroupNotFound) WithPayload(payload *models.Errors) *UpdateUserGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user group not found response
func (o *UpdateUserGroupNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateUserGroupInternalServerErrorCode is the HTTP code returned for type UpdateUserGroupInternalServerError
const UpdateUserGroupInternalServerErrorCode int = 500

/*UpdateUserGroupInternalServerError Internal server error

swagger:response updateUserGroupInternalServerError
*/
type UpdateUserGroupInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateUserGroupInternalServerError creates UpdateUserGroupInternalServerError with default headers values
func NewUpdateUserGroupInternalServerError() *UpdateUserGroupInternalServerError {

	return &UpdateUserGroupInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update user group internal server error response
func (o *UpdateUserGroupInternalServerError) WithXRequestID(xRequestID string) *UpdateUserGroupInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update user group internal server error response
func (o *UpdateUserGroupInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update user group internal server error response
func (o *UpdateUserGroupInternalServerError) WithPayload(payload *models.Errors) *UpdateUserGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update user group internal server error response
func (o *UpdateUserGroupInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateUserGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
