// Code generated by go-swagger; DO NOT EDIT.

package usergroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetUserGroupOKCode is the HTTP code returned for type GetUserGroupOK
const GetUserGroupOKCode int = 200

/*GetUserGroupOK User group get successfully.

swagger:response getUserGroupOK
*/
type GetUserGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserGroup `json:"body,omitempty"`
}

// NewGetUserGroupOK creates GetUserGroupOK with default headers values
func NewGetUserGroupOK() *GetUserGroupOK {

	return &GetUserGroupOK{}
}

// WithPayload adds the payload to the get user group o k response
func (o *GetUserGroupOK) WithPayload(payload *models.UserGroup) *GetUserGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group o k response
func (o *GetUserGroupOK) SetPayload(payload *models.UserGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupBadRequestCode is the HTTP code returned for type GetUserGroupBadRequest
const GetUserGroupBadRequestCode int = 400

/*GetUserGroupBadRequest Bad request

swagger:response getUserGroupBadRequest
*/
type GetUserGroupBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetUserGroupBadRequest creates GetUserGroupBadRequest with default headers values
func NewGetUserGroupBadRequest() *GetUserGroupBadRequest {

	return &GetUserGroupBadRequest{}
}

// WithXRequestID adds the xRequestId to the get user group bad request response
func (o *GetUserGroupBadRequest) WithXRequestID(xRequestID string) *GetUserGroupBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user group bad request response
func (o *GetUserGroupBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user group bad request response
func (o *GetUserGroupBadRequest) WithPayload(payload *models.Errors) *GetUserGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group bad request response
func (o *GetUserGroupBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupUnauthorizedCode is the HTTP code returned for type GetUserGroupUnauthorized
const GetUserGroupUnauthorizedCode int = 401

/*GetUserGroupUnauthorized Unauthorized

swagger:response getUserGroupUnauthorized
*/
type GetUserGroupUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetUserGroupUnauthorized creates GetUserGroupUnauthorized with default headers values
func NewGetUserGroupUnauthorized() *GetUserGroupUnauthorized {

	return &GetUserGroupUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get user group unauthorized response
func (o *GetUserGroupUnauthorized) WithXRequestID(xRequestID string) *GetUserGroupUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user group unauthorized response
func (o *GetUserGroupUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user group unauthorized response
func (o *GetUserGroupUnauthorized) WithPayload(payload *models.Errors) *GetUserGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group unauthorized response
func (o *GetUserGroupUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupForbiddenCode is the HTTP code returned for type GetUserGroupForbidden
const GetUserGroupForbiddenCode int = 403

/*GetUserGroupForbidden Forbidden

swagger:response getUserGroupForbidden
*/
type GetUserGroupForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetUserGroupForbidden creates GetUserGroupForbidden with default headers values
func NewGetUserGroupForbidden() *GetUserGroupForbidden {

	return &GetUserGroupForbidden{}
}

// WithXRequestID adds the xRequestId to the get user group forbidden response
func (o *GetUserGroupForbidden) WithXRequestID(xRequestID string) *GetUserGroupForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user group forbidden response
func (o *GetUserGroupForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user group forbidden response
func (o *GetUserGroupForbidden) WithPayload(payload *models.Errors) *GetUserGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group forbidden response
func (o *GetUserGroupForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupNotFoundCode is the HTTP code returned for type GetUserGroupNotFound
const GetUserGroupNotFoundCode int = 404

/*GetUserGroupNotFound Not found

swagger:response getUserGroupNotFound
*/
type GetUserGroupNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetUserGroupNotFound creates GetUserGroupNotFound with default headers values
func NewGetUserGroupNotFound() *GetUserGroupNotFound {

	return &GetUserGroupNotFound{}
}

// WithXRequestID adds the xRequestId to the get user group not found response
func (o *GetUserGroupNotFound) WithXRequestID(xRequestID string) *GetUserGroupNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user group not found response
func (o *GetUserGroupNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user group not found response
func (o *GetUserGroupNotFound) WithPayload(payload *models.Errors) *GetUserGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group not found response
func (o *GetUserGroupNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupInternalServerErrorCode is the HTTP code returned for type GetUserGroupInternalServerError
const GetUserGroupInternalServerErrorCode int = 500

/*GetUserGroupInternalServerError Internal server error

swagger:response getUserGroupInternalServerError
*/
type GetUserGroupInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetUserGroupInternalServerError creates GetUserGroupInternalServerError with default headers values
func NewGetUserGroupInternalServerError() *GetUserGroupInternalServerError {

	return &GetUserGroupInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get user group internal server error response
func (o *GetUserGroupInternalServerError) WithXRequestID(xRequestID string) *GetUserGroupInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user group internal server error response
func (o *GetUserGroupInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user group internal server error response
func (o *GetUserGroupInternalServerError) WithPayload(payload *models.Errors) *GetUserGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group internal server error response
func (o *GetUserGroupInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
