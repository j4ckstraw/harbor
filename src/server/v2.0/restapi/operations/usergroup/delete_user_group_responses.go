// Code generated by go-swagger; DO NOT EDIT.

package usergroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteUserGroupOKCode is the HTTP code returned for type DeleteUserGroupOK
const DeleteUserGroupOKCode int = 200

/*DeleteUserGroupOK Success

swagger:response deleteUserGroupOK
*/
type DeleteUserGroupOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteUserGroupOK creates DeleteUserGroupOK with default headers values
func NewDeleteUserGroupOK() *DeleteUserGroupOK {

	return &DeleteUserGroupOK{}
}

// WithXRequestID adds the xRequestId to the delete user group o k response
func (o *DeleteUserGroupOK) WithXRequestID(xRequestID string) *DeleteUserGroupOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete user group o k response
func (o *DeleteUserGroupOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteUserGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteUserGroupBadRequestCode is the HTTP code returned for type DeleteUserGroupBadRequest
const DeleteUserGroupBadRequestCode int = 400

/*DeleteUserGroupBadRequest Bad request

swagger:response deleteUserGroupBadRequest
*/
type DeleteUserGroupBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteUserGroupBadRequest creates DeleteUserGroupBadRequest with default headers values
func NewDeleteUserGroupBadRequest() *DeleteUserGroupBadRequest {

	return &DeleteUserGroupBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete user group bad request response
func (o *DeleteUserGroupBadRequest) WithXRequestID(xRequestID string) *DeleteUserGroupBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete user group bad request response
func (o *DeleteUserGroupBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete user group bad request response
func (o *DeleteUserGroupBadRequest) WithPayload(payload *models.Errors) *DeleteUserGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group bad request response
func (o *DeleteUserGroupBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserGroupUnauthorizedCode is the HTTP code returned for type DeleteUserGroupUnauthorized
const DeleteUserGroupUnauthorizedCode int = 401

/*DeleteUserGroupUnauthorized Unauthorized

swagger:response deleteUserGroupUnauthorized
*/
type DeleteUserGroupUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteUserGroupUnauthorized creates DeleteUserGroupUnauthorized with default headers values
func NewDeleteUserGroupUnauthorized() *DeleteUserGroupUnauthorized {

	return &DeleteUserGroupUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete user group unauthorized response
func (o *DeleteUserGroupUnauthorized) WithXRequestID(xRequestID string) *DeleteUserGroupUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete user group unauthorized response
func (o *DeleteUserGroupUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete user group unauthorized response
func (o *DeleteUserGroupUnauthorized) WithPayload(payload *models.Errors) *DeleteUserGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group unauthorized response
func (o *DeleteUserGroupUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserGroupForbiddenCode is the HTTP code returned for type DeleteUserGroupForbidden
const DeleteUserGroupForbiddenCode int = 403

/*DeleteUserGroupForbidden Forbidden

swagger:response deleteUserGroupForbidden
*/
type DeleteUserGroupForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteUserGroupForbidden creates DeleteUserGroupForbidden with default headers values
func NewDeleteUserGroupForbidden() *DeleteUserGroupForbidden {

	return &DeleteUserGroupForbidden{}
}

// WithXRequestID adds the xRequestId to the delete user group forbidden response
func (o *DeleteUserGroupForbidden) WithXRequestID(xRequestID string) *DeleteUserGroupForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete user group forbidden response
func (o *DeleteUserGroupForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete user group forbidden response
func (o *DeleteUserGroupForbidden) WithPayload(payload *models.Errors) *DeleteUserGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group forbidden response
func (o *DeleteUserGroupForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserGroupInternalServerErrorCode is the HTTP code returned for type DeleteUserGroupInternalServerError
const DeleteUserGroupInternalServerErrorCode int = 500

/*DeleteUserGroupInternalServerError Internal server error

swagger:response deleteUserGroupInternalServerError
*/
type DeleteUserGroupInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteUserGroupInternalServerError creates DeleteUserGroupInternalServerError with default headers values
func NewDeleteUserGroupInternalServerError() *DeleteUserGroupInternalServerError {

	return &DeleteUserGroupInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete user group internal server error response
func (o *DeleteUserGroupInternalServerError) WithXRequestID(xRequestID string) *DeleteUserGroupInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete user group internal server error response
func (o *DeleteUserGroupInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete user group internal server error response
func (o *DeleteUserGroupInternalServerError) WithPayload(payload *models.Errors) *DeleteUserGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group internal server error response
func (o *DeleteUserGroupInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
