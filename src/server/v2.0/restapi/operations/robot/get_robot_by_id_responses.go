// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetRobotByIDOKCode is the HTTP code returned for type GetRobotByIDOK
const GetRobotByIDOKCode int = 200

/*GetRobotByIDOK Return matched robot information.

swagger:response getRobotByIdOK
*/
type GetRobotByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Robot `json:"body,omitempty"`
}

// NewGetRobotByIDOK creates GetRobotByIDOK with default headers values
func NewGetRobotByIDOK() *GetRobotByIDOK {

	return &GetRobotByIDOK{}
}

// WithPayload adds the payload to the get robot by Id o k response
func (o *GetRobotByIDOK) WithPayload(payload *models.Robot) *GetRobotByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get robot by Id o k response
func (o *GetRobotByIDOK) SetPayload(payload *models.Robot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRobotByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRobotByIDUnauthorizedCode is the HTTP code returned for type GetRobotByIDUnauthorized
const GetRobotByIDUnauthorizedCode int = 401

/*GetRobotByIDUnauthorized Unauthorized

swagger:response getRobotByIdUnauthorized
*/
type GetRobotByIDUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRobotByIDUnauthorized creates GetRobotByIDUnauthorized with default headers values
func NewGetRobotByIDUnauthorized() *GetRobotByIDUnauthorized {

	return &GetRobotByIDUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get robot by Id unauthorized response
func (o *GetRobotByIDUnauthorized) WithXRequestID(xRequestID string) *GetRobotByIDUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get robot by Id unauthorized response
func (o *GetRobotByIDUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get robot by Id unauthorized response
func (o *GetRobotByIDUnauthorized) WithPayload(payload *models.Errors) *GetRobotByIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get robot by Id unauthorized response
func (o *GetRobotByIDUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRobotByIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRobotByIDForbiddenCode is the HTTP code returned for type GetRobotByIDForbidden
const GetRobotByIDForbiddenCode int = 403

/*GetRobotByIDForbidden Forbidden

swagger:response getRobotByIdForbidden
*/
type GetRobotByIDForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRobotByIDForbidden creates GetRobotByIDForbidden with default headers values
func NewGetRobotByIDForbidden() *GetRobotByIDForbidden {

	return &GetRobotByIDForbidden{}
}

// WithXRequestID adds the xRequestId to the get robot by Id forbidden response
func (o *GetRobotByIDForbidden) WithXRequestID(xRequestID string) *GetRobotByIDForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get robot by Id forbidden response
func (o *GetRobotByIDForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get robot by Id forbidden response
func (o *GetRobotByIDForbidden) WithPayload(payload *models.Errors) *GetRobotByIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get robot by Id forbidden response
func (o *GetRobotByIDForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRobotByIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRobotByIDNotFoundCode is the HTTP code returned for type GetRobotByIDNotFound
const GetRobotByIDNotFoundCode int = 404

/*GetRobotByIDNotFound Not found

swagger:response getRobotByIdNotFound
*/
type GetRobotByIDNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRobotByIDNotFound creates GetRobotByIDNotFound with default headers values
func NewGetRobotByIDNotFound() *GetRobotByIDNotFound {

	return &GetRobotByIDNotFound{}
}

// WithXRequestID adds the xRequestId to the get robot by Id not found response
func (o *GetRobotByIDNotFound) WithXRequestID(xRequestID string) *GetRobotByIDNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get robot by Id not found response
func (o *GetRobotByIDNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get robot by Id not found response
func (o *GetRobotByIDNotFound) WithPayload(payload *models.Errors) *GetRobotByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get robot by Id not found response
func (o *GetRobotByIDNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRobotByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRobotByIDInternalServerErrorCode is the HTTP code returned for type GetRobotByIDInternalServerError
const GetRobotByIDInternalServerErrorCode int = 500

/*GetRobotByIDInternalServerError Internal server error

swagger:response getRobotByIdInternalServerError
*/
type GetRobotByIDInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRobotByIDInternalServerError creates GetRobotByIDInternalServerError with default headers values
func NewGetRobotByIDInternalServerError() *GetRobotByIDInternalServerError {

	return &GetRobotByIDInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get robot by Id internal server error response
func (o *GetRobotByIDInternalServerError) WithXRequestID(xRequestID string) *GetRobotByIDInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get robot by Id internal server error response
func (o *GetRobotByIDInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get robot by Id internal server error response
func (o *GetRobotByIDInternalServerError) WithPayload(payload *models.Errors) *GetRobotByIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get robot by Id internal server error response
func (o *GetRobotByIDInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRobotByIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
