// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateRobotOKCode is the HTTP code returned for type UpdateRobotOK
const UpdateRobotOKCode int = 200

/*UpdateRobotOK Success

swagger:response updateRobotOK
*/
type UpdateRobotOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateRobotOK creates UpdateRobotOK with default headers values
func NewUpdateRobotOK() *UpdateRobotOK {

	return &UpdateRobotOK{}
}

// WithXRequestID adds the xRequestId to the update robot o k response
func (o *UpdateRobotOK) WithXRequestID(xRequestID string) *UpdateRobotOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot o k response
func (o *UpdateRobotOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateRobotOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateRobotBadRequestCode is the HTTP code returned for type UpdateRobotBadRequest
const UpdateRobotBadRequestCode int = 400

/*UpdateRobotBadRequest Bad request

swagger:response updateRobotBadRequest
*/
type UpdateRobotBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRobotBadRequest creates UpdateRobotBadRequest with default headers values
func NewUpdateRobotBadRequest() *UpdateRobotBadRequest {

	return &UpdateRobotBadRequest{}
}

// WithXRequestID adds the xRequestId to the update robot bad request response
func (o *UpdateRobotBadRequest) WithXRequestID(xRequestID string) *UpdateRobotBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot bad request response
func (o *UpdateRobotBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update robot bad request response
func (o *UpdateRobotBadRequest) WithPayload(payload *models.Errors) *UpdateRobotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update robot bad request response
func (o *UpdateRobotBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRobotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRobotUnauthorizedCode is the HTTP code returned for type UpdateRobotUnauthorized
const UpdateRobotUnauthorizedCode int = 401

/*UpdateRobotUnauthorized Unauthorized

swagger:response updateRobotUnauthorized
*/
type UpdateRobotUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRobotUnauthorized creates UpdateRobotUnauthorized with default headers values
func NewUpdateRobotUnauthorized() *UpdateRobotUnauthorized {

	return &UpdateRobotUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update robot unauthorized response
func (o *UpdateRobotUnauthorized) WithXRequestID(xRequestID string) *UpdateRobotUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot unauthorized response
func (o *UpdateRobotUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update robot unauthorized response
func (o *UpdateRobotUnauthorized) WithPayload(payload *models.Errors) *UpdateRobotUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update robot unauthorized response
func (o *UpdateRobotUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRobotUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRobotForbiddenCode is the HTTP code returned for type UpdateRobotForbidden
const UpdateRobotForbiddenCode int = 403

/*UpdateRobotForbidden Forbidden

swagger:response updateRobotForbidden
*/
type UpdateRobotForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRobotForbidden creates UpdateRobotForbidden with default headers values
func NewUpdateRobotForbidden() *UpdateRobotForbidden {

	return &UpdateRobotForbidden{}
}

// WithXRequestID adds the xRequestId to the update robot forbidden response
func (o *UpdateRobotForbidden) WithXRequestID(xRequestID string) *UpdateRobotForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot forbidden response
func (o *UpdateRobotForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update robot forbidden response
func (o *UpdateRobotForbidden) WithPayload(payload *models.Errors) *UpdateRobotForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update robot forbidden response
func (o *UpdateRobotForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRobotForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRobotNotFoundCode is the HTTP code returned for type UpdateRobotNotFound
const UpdateRobotNotFoundCode int = 404

/*UpdateRobotNotFound Not found

swagger:response updateRobotNotFound
*/
type UpdateRobotNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRobotNotFound creates UpdateRobotNotFound with default headers values
func NewUpdateRobotNotFound() *UpdateRobotNotFound {

	return &UpdateRobotNotFound{}
}

// WithXRequestID adds the xRequestId to the update robot not found response
func (o *UpdateRobotNotFound) WithXRequestID(xRequestID string) *UpdateRobotNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot not found response
func (o *UpdateRobotNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update robot not found response
func (o *UpdateRobotNotFound) WithPayload(payload *models.Errors) *UpdateRobotNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update robot not found response
func (o *UpdateRobotNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRobotNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRobotConflictCode is the HTTP code returned for type UpdateRobotConflict
const UpdateRobotConflictCode int = 409

/*UpdateRobotConflict Conflict

swagger:response updateRobotConflict
*/
type UpdateRobotConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRobotConflict creates UpdateRobotConflict with default headers values
func NewUpdateRobotConflict() *UpdateRobotConflict {

	return &UpdateRobotConflict{}
}

// WithXRequestID adds the xRequestId to the update robot conflict response
func (o *UpdateRobotConflict) WithXRequestID(xRequestID string) *UpdateRobotConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot conflict response
func (o *UpdateRobotConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update robot conflict response
func (o *UpdateRobotConflict) WithPayload(payload *models.Errors) *UpdateRobotConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update robot conflict response
func (o *UpdateRobotConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRobotConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRobotInternalServerErrorCode is the HTTP code returned for type UpdateRobotInternalServerError
const UpdateRobotInternalServerErrorCode int = 500

/*UpdateRobotInternalServerError Internal server error

swagger:response updateRobotInternalServerError
*/
type UpdateRobotInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRobotInternalServerError creates UpdateRobotInternalServerError with default headers values
func NewUpdateRobotInternalServerError() *UpdateRobotInternalServerError {

	return &UpdateRobotInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update robot internal server error response
func (o *UpdateRobotInternalServerError) WithXRequestID(xRequestID string) *UpdateRobotInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update robot internal server error response
func (o *UpdateRobotInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update robot internal server error response
func (o *UpdateRobotInternalServerError) WithPayload(payload *models.Errors) *UpdateRobotInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update robot internal server error response
func (o *UpdateRobotInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRobotInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
