// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListRobotOKCode is the HTTP code returned for type ListRobotOK
const ListRobotOKCode int = 200

/*ListRobotOK Success

swagger:response listRobotOK
*/
type ListRobotOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of robot accounts

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Robot `json:"body,omitempty"`
}

// NewListRobotOK creates ListRobotOK with default headers values
func NewListRobotOK() *ListRobotOK {

	return &ListRobotOK{}
}

// WithLink adds the link to the list robot o k response
func (o *ListRobotOK) WithLink(link string) *ListRobotOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list robot o k response
func (o *ListRobotOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list robot o k response
func (o *ListRobotOK) WithXTotalCount(xTotalCount int64) *ListRobotOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list robot o k response
func (o *ListRobotOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list robot o k response
func (o *ListRobotOK) WithPayload(payload []*models.Robot) *ListRobotOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot o k response
func (o *ListRobotOK) SetPayload(payload []*models.Robot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Robot, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRobotBadRequestCode is the HTTP code returned for type ListRobotBadRequest
const ListRobotBadRequestCode int = 400

/*ListRobotBadRequest Bad request

swagger:response listRobotBadRequest
*/
type ListRobotBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRobotBadRequest creates ListRobotBadRequest with default headers values
func NewListRobotBadRequest() *ListRobotBadRequest {

	return &ListRobotBadRequest{}
}

// WithXRequestID adds the xRequestId to the list robot bad request response
func (o *ListRobotBadRequest) WithXRequestID(xRequestID string) *ListRobotBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list robot bad request response
func (o *ListRobotBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list robot bad request response
func (o *ListRobotBadRequest) WithPayload(payload *models.Errors) *ListRobotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot bad request response
func (o *ListRobotBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRobotNotFoundCode is the HTTP code returned for type ListRobotNotFound
const ListRobotNotFoundCode int = 404

/*ListRobotNotFound Not found

swagger:response listRobotNotFound
*/
type ListRobotNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRobotNotFound creates ListRobotNotFound with default headers values
func NewListRobotNotFound() *ListRobotNotFound {

	return &ListRobotNotFound{}
}

// WithXRequestID adds the xRequestId to the list robot not found response
func (o *ListRobotNotFound) WithXRequestID(xRequestID string) *ListRobotNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list robot not found response
func (o *ListRobotNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list robot not found response
func (o *ListRobotNotFound) WithPayload(payload *models.Errors) *ListRobotNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot not found response
func (o *ListRobotNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRobotInternalServerErrorCode is the HTTP code returned for type ListRobotInternalServerError
const ListRobotInternalServerErrorCode int = 500

/*ListRobotInternalServerError Internal server error

swagger:response listRobotInternalServerError
*/
type ListRobotInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRobotInternalServerError creates ListRobotInternalServerError with default headers values
func NewListRobotInternalServerError() *ListRobotInternalServerError {

	return &ListRobotInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list robot internal server error response
func (o *ListRobotInternalServerError) WithXRequestID(xRequestID string) *ListRobotInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list robot internal server error response
func (o *ListRobotInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list robot internal server error response
func (o *ListRobotInternalServerError) WithPayload(payload *models.Errors) *ListRobotInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot internal server error response
func (o *ListRobotInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
