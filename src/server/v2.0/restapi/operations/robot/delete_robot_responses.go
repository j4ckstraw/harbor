// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteRobotOKCode is the HTTP code returned for type DeleteRobotOK
const DeleteRobotOKCode int = 200

/*DeleteRobotOK Success

swagger:response deleteRobotOK
*/
type DeleteRobotOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteRobotOK creates DeleteRobotOK with default headers values
func NewDeleteRobotOK() *DeleteRobotOK {

	return &DeleteRobotOK{}
}

// WithXRequestID adds the xRequestId to the delete robot o k response
func (o *DeleteRobotOK) WithXRequestID(xRequestID string) *DeleteRobotOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot o k response
func (o *DeleteRobotOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteRobotOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteRobotBadRequestCode is the HTTP code returned for type DeleteRobotBadRequest
const DeleteRobotBadRequestCode int = 400

/*DeleteRobotBadRequest Bad request

swagger:response deleteRobotBadRequest
*/
type DeleteRobotBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotBadRequest creates DeleteRobotBadRequest with default headers values
func NewDeleteRobotBadRequest() *DeleteRobotBadRequest {

	return &DeleteRobotBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete robot bad request response
func (o *DeleteRobotBadRequest) WithXRequestID(xRequestID string) *DeleteRobotBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot bad request response
func (o *DeleteRobotBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot bad request response
func (o *DeleteRobotBadRequest) WithPayload(payload *models.Errors) *DeleteRobotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot bad request response
func (o *DeleteRobotBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotUnauthorizedCode is the HTTP code returned for type DeleteRobotUnauthorized
const DeleteRobotUnauthorizedCode int = 401

/*DeleteRobotUnauthorized Unauthorized

swagger:response deleteRobotUnauthorized
*/
type DeleteRobotUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotUnauthorized creates DeleteRobotUnauthorized with default headers values
func NewDeleteRobotUnauthorized() *DeleteRobotUnauthorized {

	return &DeleteRobotUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete robot unauthorized response
func (o *DeleteRobotUnauthorized) WithXRequestID(xRequestID string) *DeleteRobotUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot unauthorized response
func (o *DeleteRobotUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot unauthorized response
func (o *DeleteRobotUnauthorized) WithPayload(payload *models.Errors) *DeleteRobotUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot unauthorized response
func (o *DeleteRobotUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotForbiddenCode is the HTTP code returned for type DeleteRobotForbidden
const DeleteRobotForbiddenCode int = 403

/*DeleteRobotForbidden Forbidden

swagger:response deleteRobotForbidden
*/
type DeleteRobotForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotForbidden creates DeleteRobotForbidden with default headers values
func NewDeleteRobotForbidden() *DeleteRobotForbidden {

	return &DeleteRobotForbidden{}
}

// WithXRequestID adds the xRequestId to the delete robot forbidden response
func (o *DeleteRobotForbidden) WithXRequestID(xRequestID string) *DeleteRobotForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot forbidden response
func (o *DeleteRobotForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot forbidden response
func (o *DeleteRobotForbidden) WithPayload(payload *models.Errors) *DeleteRobotForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot forbidden response
func (o *DeleteRobotForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotNotFoundCode is the HTTP code returned for type DeleteRobotNotFound
const DeleteRobotNotFoundCode int = 404

/*DeleteRobotNotFound Not found

swagger:response deleteRobotNotFound
*/
type DeleteRobotNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotNotFound creates DeleteRobotNotFound with default headers values
func NewDeleteRobotNotFound() *DeleteRobotNotFound {

	return &DeleteRobotNotFound{}
}

// WithXRequestID adds the xRequestId to the delete robot not found response
func (o *DeleteRobotNotFound) WithXRequestID(xRequestID string) *DeleteRobotNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot not found response
func (o *DeleteRobotNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot not found response
func (o *DeleteRobotNotFound) WithPayload(payload *models.Errors) *DeleteRobotNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot not found response
func (o *DeleteRobotNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotInternalServerErrorCode is the HTTP code returned for type DeleteRobotInternalServerError
const DeleteRobotInternalServerErrorCode int = 500

/*DeleteRobotInternalServerError Internal server error

swagger:response deleteRobotInternalServerError
*/
type DeleteRobotInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotInternalServerError creates DeleteRobotInternalServerError with default headers values
func NewDeleteRobotInternalServerError() *DeleteRobotInternalServerError {

	return &DeleteRobotInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete robot internal server error response
func (o *DeleteRobotInternalServerError) WithXRequestID(xRequestID string) *DeleteRobotInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot internal server error response
func (o *DeleteRobotInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot internal server error response
func (o *DeleteRobotInternalServerError) WithPayload(payload *models.Errors) *DeleteRobotInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot internal server error response
func (o *DeleteRobotInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
