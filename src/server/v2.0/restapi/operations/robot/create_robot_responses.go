// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateRobotCreatedCode is the HTTP code returned for type CreateRobotCreated
const CreateRobotCreatedCode int = 201

/*CreateRobotCreated Created

swagger:response createRobotCreated
*/
type CreateRobotCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.RobotCreated `json:"body,omitempty"`
}

// NewCreateRobotCreated creates CreateRobotCreated with default headers values
func NewCreateRobotCreated() *CreateRobotCreated {

	return &CreateRobotCreated{}
}

// WithLocation adds the location to the create robot created response
func (o *CreateRobotCreated) WithLocation(location string) *CreateRobotCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create robot created response
func (o *CreateRobotCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create robot created response
func (o *CreateRobotCreated) WithXRequestID(xRequestID string) *CreateRobotCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot created response
func (o *CreateRobotCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot created response
func (o *CreateRobotCreated) WithPayload(payload *models.RobotCreated) *CreateRobotCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot created response
func (o *CreateRobotCreated) SetPayload(payload *models.RobotCreated) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotBadRequestCode is the HTTP code returned for type CreateRobotBadRequest
const CreateRobotBadRequestCode int = 400

/*CreateRobotBadRequest Bad request

swagger:response createRobotBadRequest
*/
type CreateRobotBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotBadRequest creates CreateRobotBadRequest with default headers values
func NewCreateRobotBadRequest() *CreateRobotBadRequest {

	return &CreateRobotBadRequest{}
}

// WithXRequestID adds the xRequestId to the create robot bad request response
func (o *CreateRobotBadRequest) WithXRequestID(xRequestID string) *CreateRobotBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot bad request response
func (o *CreateRobotBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot bad request response
func (o *CreateRobotBadRequest) WithPayload(payload *models.Errors) *CreateRobotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot bad request response
func (o *CreateRobotBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotUnauthorizedCode is the HTTP code returned for type CreateRobotUnauthorized
const CreateRobotUnauthorizedCode int = 401

/*CreateRobotUnauthorized Unauthorized

swagger:response createRobotUnauthorized
*/
type CreateRobotUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotUnauthorized creates CreateRobotUnauthorized with default headers values
func NewCreateRobotUnauthorized() *CreateRobotUnauthorized {

	return &CreateRobotUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create robot unauthorized response
func (o *CreateRobotUnauthorized) WithXRequestID(xRequestID string) *CreateRobotUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot unauthorized response
func (o *CreateRobotUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot unauthorized response
func (o *CreateRobotUnauthorized) WithPayload(payload *models.Errors) *CreateRobotUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot unauthorized response
func (o *CreateRobotUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotForbiddenCode is the HTTP code returned for type CreateRobotForbidden
const CreateRobotForbiddenCode int = 403

/*CreateRobotForbidden Forbidden

swagger:response createRobotForbidden
*/
type CreateRobotForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotForbidden creates CreateRobotForbidden with default headers values
func NewCreateRobotForbidden() *CreateRobotForbidden {

	return &CreateRobotForbidden{}
}

// WithXRequestID adds the xRequestId to the create robot forbidden response
func (o *CreateRobotForbidden) WithXRequestID(xRequestID string) *CreateRobotForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot forbidden response
func (o *CreateRobotForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot forbidden response
func (o *CreateRobotForbidden) WithPayload(payload *models.Errors) *CreateRobotForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot forbidden response
func (o *CreateRobotForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotNotFoundCode is the HTTP code returned for type CreateRobotNotFound
const CreateRobotNotFoundCode int = 404

/*CreateRobotNotFound Not found

swagger:response createRobotNotFound
*/
type CreateRobotNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotNotFound creates CreateRobotNotFound with default headers values
func NewCreateRobotNotFound() *CreateRobotNotFound {

	return &CreateRobotNotFound{}
}

// WithXRequestID adds the xRequestId to the create robot not found response
func (o *CreateRobotNotFound) WithXRequestID(xRequestID string) *CreateRobotNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot not found response
func (o *CreateRobotNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot not found response
func (o *CreateRobotNotFound) WithPayload(payload *models.Errors) *CreateRobotNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot not found response
func (o *CreateRobotNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotInternalServerErrorCode is the HTTP code returned for type CreateRobotInternalServerError
const CreateRobotInternalServerErrorCode int = 500

/*CreateRobotInternalServerError Internal server error

swagger:response createRobotInternalServerError
*/
type CreateRobotInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotInternalServerError creates CreateRobotInternalServerError with default headers values
func NewCreateRobotInternalServerError() *CreateRobotInternalServerError {

	return &CreateRobotInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create robot internal server error response
func (o *CreateRobotInternalServerError) WithXRequestID(xRequestID string) *CreateRobotInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot internal server error response
func (o *CreateRobotInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot internal server error response
func (o *CreateRobotInternalServerError) WithPayload(payload *models.Errors) *CreateRobotInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot internal server error response
func (o *CreateRobotInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
