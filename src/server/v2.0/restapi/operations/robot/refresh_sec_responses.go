// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// RefreshSecOKCode is the HTTP code returned for type RefreshSecOK
const RefreshSecOKCode int = 200

/*RefreshSecOK Return refreshed robot sec.

swagger:response refreshSecOK
*/
type RefreshSecOK struct {

	/*
	  In: Body
	*/
	Payload *models.RobotSec `json:"body,omitempty"`
}

// NewRefreshSecOK creates RefreshSecOK with default headers values
func NewRefreshSecOK() *RefreshSecOK {

	return &RefreshSecOK{}
}

// WithPayload adds the payload to the refresh sec o k response
func (o *RefreshSecOK) WithPayload(payload *models.RobotSec) *RefreshSecOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh sec o k response
func (o *RefreshSecOK) SetPayload(payload *models.RobotSec) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshSecOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshSecBadRequestCode is the HTTP code returned for type RefreshSecBadRequest
const RefreshSecBadRequestCode int = 400

/*RefreshSecBadRequest Bad request

swagger:response refreshSecBadRequest
*/
type RefreshSecBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRefreshSecBadRequest creates RefreshSecBadRequest with default headers values
func NewRefreshSecBadRequest() *RefreshSecBadRequest {

	return &RefreshSecBadRequest{}
}

// WithXRequestID adds the xRequestId to the refresh sec bad request response
func (o *RefreshSecBadRequest) WithXRequestID(xRequestID string) *RefreshSecBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the refresh sec bad request response
func (o *RefreshSecBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the refresh sec bad request response
func (o *RefreshSecBadRequest) WithPayload(payload *models.Errors) *RefreshSecBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh sec bad request response
func (o *RefreshSecBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshSecBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshSecUnauthorizedCode is the HTTP code returned for type RefreshSecUnauthorized
const RefreshSecUnauthorizedCode int = 401

/*RefreshSecUnauthorized Unauthorized

swagger:response refreshSecUnauthorized
*/
type RefreshSecUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRefreshSecUnauthorized creates RefreshSecUnauthorized with default headers values
func NewRefreshSecUnauthorized() *RefreshSecUnauthorized {

	return &RefreshSecUnauthorized{}
}

// WithXRequestID adds the xRequestId to the refresh sec unauthorized response
func (o *RefreshSecUnauthorized) WithXRequestID(xRequestID string) *RefreshSecUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the refresh sec unauthorized response
func (o *RefreshSecUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the refresh sec unauthorized response
func (o *RefreshSecUnauthorized) WithPayload(payload *models.Errors) *RefreshSecUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh sec unauthorized response
func (o *RefreshSecUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshSecUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshSecForbiddenCode is the HTTP code returned for type RefreshSecForbidden
const RefreshSecForbiddenCode int = 403

/*RefreshSecForbidden Forbidden

swagger:response refreshSecForbidden
*/
type RefreshSecForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRefreshSecForbidden creates RefreshSecForbidden with default headers values
func NewRefreshSecForbidden() *RefreshSecForbidden {

	return &RefreshSecForbidden{}
}

// WithXRequestID adds the xRequestId to the refresh sec forbidden response
func (o *RefreshSecForbidden) WithXRequestID(xRequestID string) *RefreshSecForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the refresh sec forbidden response
func (o *RefreshSecForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the refresh sec forbidden response
func (o *RefreshSecForbidden) WithPayload(payload *models.Errors) *RefreshSecForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh sec forbidden response
func (o *RefreshSecForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshSecForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshSecNotFoundCode is the HTTP code returned for type RefreshSecNotFound
const RefreshSecNotFoundCode int = 404

/*RefreshSecNotFound Not found

swagger:response refreshSecNotFound
*/
type RefreshSecNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRefreshSecNotFound creates RefreshSecNotFound with default headers values
func NewRefreshSecNotFound() *RefreshSecNotFound {

	return &RefreshSecNotFound{}
}

// WithXRequestID adds the xRequestId to the refresh sec not found response
func (o *RefreshSecNotFound) WithXRequestID(xRequestID string) *RefreshSecNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the refresh sec not found response
func (o *RefreshSecNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the refresh sec not found response
func (o *RefreshSecNotFound) WithPayload(payload *models.Errors) *RefreshSecNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh sec not found response
func (o *RefreshSecNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshSecNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshSecInternalServerErrorCode is the HTTP code returned for type RefreshSecInternalServerError
const RefreshSecInternalServerErrorCode int = 500

/*RefreshSecInternalServerError Internal server error

swagger:response refreshSecInternalServerError
*/
type RefreshSecInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewRefreshSecInternalServerError creates RefreshSecInternalServerError with default headers values
func NewRefreshSecInternalServerError() *RefreshSecInternalServerError {

	return &RefreshSecInternalServerError{}
}

// WithXRequestID adds the xRequestId to the refresh sec internal server error response
func (o *RefreshSecInternalServerError) WithXRequestID(xRequestID string) *RefreshSecInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the refresh sec internal server error response
func (o *RefreshSecInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the refresh sec internal server error response
func (o *RefreshSecInternalServerError) WithPayload(payload *models.Errors) *RefreshSecInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh sec internal server error response
func (o *RefreshSecInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshSecInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
