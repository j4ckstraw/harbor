// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateLabelHandlerFunc turns a function with the right signature into a create label handler
type CreateLabelHandlerFunc func(CreateLabelParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateLabelHandlerFunc) Handle(params CreateLabelParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateLabelHandler interface for that can handle valid create label params
type CreateLabelHandler interface {
	Handle(CreateLabelParams, interface{}) middleware.Responder
}

// NewCreateLabel creates a new http.Handler for the create label operation
func NewCreateLabel(ctx *middleware.Context, handler CreateLabelHandler) *CreateLabel {
	return &CreateLabel{Context: ctx, Handler: handler}
}

/*CreateLabel swagger:route POST /labels label createLabel

Post creates a label

This endpoint let user creates a label.


*/
type CreateLabel struct {
	Context *middleware.Context
	Handler CreateLabelHandler
}

func (o *CreateLabel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateLabelParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
