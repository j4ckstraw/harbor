// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateLabelCreatedCode is the HTTP code returned for type CreateLabelCreated
const CreateLabelCreatedCode int = 201

/*CreateLabelCreated Create successfully.

swagger:response createLabelCreated
*/
type CreateLabelCreated struct {
	/*The URL of the created resource

	 */
	Location string `json:"Location"`
}

// NewCreateLabelCreated creates CreateLabelCreated with default headers values
func NewCreateLabelCreated() *CreateLabelCreated {

	return &CreateLabelCreated{}
}

// WithLocation adds the location to the create label created response
func (o *CreateLabelCreated) WithLocation(location string) *CreateLabelCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create label created response
func (o *CreateLabelCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *CreateLabelCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateLabelBadRequestCode is the HTTP code returned for type CreateLabelBadRequest
const CreateLabelBadRequestCode int = 400

/*CreateLabelBadRequest Bad request

swagger:response createLabelBadRequest
*/
type CreateLabelBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateLabelBadRequest creates CreateLabelBadRequest with default headers values
func NewCreateLabelBadRequest() *CreateLabelBadRequest {

	return &CreateLabelBadRequest{}
}

// WithXRequestID adds the xRequestId to the create label bad request response
func (o *CreateLabelBadRequest) WithXRequestID(xRequestID string) *CreateLabelBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create label bad request response
func (o *CreateLabelBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create label bad request response
func (o *CreateLabelBadRequest) WithPayload(payload *models.Errors) *CreateLabelBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create label bad request response
func (o *CreateLabelBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLabelBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLabelUnauthorizedCode is the HTTP code returned for type CreateLabelUnauthorized
const CreateLabelUnauthorizedCode int = 401

/*CreateLabelUnauthorized Unauthorized

swagger:response createLabelUnauthorized
*/
type CreateLabelUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateLabelUnauthorized creates CreateLabelUnauthorized with default headers values
func NewCreateLabelUnauthorized() *CreateLabelUnauthorized {

	return &CreateLabelUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create label unauthorized response
func (o *CreateLabelUnauthorized) WithXRequestID(xRequestID string) *CreateLabelUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create label unauthorized response
func (o *CreateLabelUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create label unauthorized response
func (o *CreateLabelUnauthorized) WithPayload(payload *models.Errors) *CreateLabelUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create label unauthorized response
func (o *CreateLabelUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLabelUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLabelConflictCode is the HTTP code returned for type CreateLabelConflict
const CreateLabelConflictCode int = 409

/*CreateLabelConflict Conflict

swagger:response createLabelConflict
*/
type CreateLabelConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateLabelConflict creates CreateLabelConflict with default headers values
func NewCreateLabelConflict() *CreateLabelConflict {

	return &CreateLabelConflict{}
}

// WithXRequestID adds the xRequestId to the create label conflict response
func (o *CreateLabelConflict) WithXRequestID(xRequestID string) *CreateLabelConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create label conflict response
func (o *CreateLabelConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create label conflict response
func (o *CreateLabelConflict) WithPayload(payload *models.Errors) *CreateLabelConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create label conflict response
func (o *CreateLabelConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLabelConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLabelUnsupportedMediaTypeCode is the HTTP code returned for type CreateLabelUnsupportedMediaType
const CreateLabelUnsupportedMediaTypeCode int = 415

/*CreateLabelUnsupportedMediaType Unsupported MediaType

swagger:response createLabelUnsupportedMediaType
*/
type CreateLabelUnsupportedMediaType struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateLabelUnsupportedMediaType creates CreateLabelUnsupportedMediaType with default headers values
func NewCreateLabelUnsupportedMediaType() *CreateLabelUnsupportedMediaType {

	return &CreateLabelUnsupportedMediaType{}
}

// WithXRequestID adds the xRequestId to the create label unsupported media type response
func (o *CreateLabelUnsupportedMediaType) WithXRequestID(xRequestID string) *CreateLabelUnsupportedMediaType {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create label unsupported media type response
func (o *CreateLabelUnsupportedMediaType) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create label unsupported media type response
func (o *CreateLabelUnsupportedMediaType) WithPayload(payload *models.Errors) *CreateLabelUnsupportedMediaType {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create label unsupported media type response
func (o *CreateLabelUnsupportedMediaType) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLabelUnsupportedMediaType) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(415)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLabelInternalServerErrorCode is the HTTP code returned for type CreateLabelInternalServerError
const CreateLabelInternalServerErrorCode int = 500

/*CreateLabelInternalServerError Internal server error

swagger:response createLabelInternalServerError
*/
type CreateLabelInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateLabelInternalServerError creates CreateLabelInternalServerError with default headers values
func NewCreateLabelInternalServerError() *CreateLabelInternalServerError {

	return &CreateLabelInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create label internal server error response
func (o *CreateLabelInternalServerError) WithXRequestID(xRequestID string) *CreateLabelInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create label internal server error response
func (o *CreateLabelInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create label internal server error response
func (o *CreateLabelInternalServerError) WithPayload(payload *models.Errors) *CreateLabelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create label internal server error response
func (o *CreateLabelInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLabelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
