// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetLabelByIDOKCode is the HTTP code returned for type GetLabelByIDOK
const GetLabelByIDOKCode int = 200

/*GetLabelByIDOK Get successfully.

swagger:response getLabelByIdOK
*/
type GetLabelByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Label `json:"body,omitempty"`
}

// NewGetLabelByIDOK creates GetLabelByIDOK with default headers values
func NewGetLabelByIDOK() *GetLabelByIDOK {

	return &GetLabelByIDOK{}
}

// WithPayload adds the payload to the get label by Id o k response
func (o *GetLabelByIDOK) WithPayload(payload *models.Label) *GetLabelByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get label by Id o k response
func (o *GetLabelByIDOK) SetPayload(payload *models.Label) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLabelByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLabelByIDUnauthorizedCode is the HTTP code returned for type GetLabelByIDUnauthorized
const GetLabelByIDUnauthorizedCode int = 401

/*GetLabelByIDUnauthorized Unauthorized

swagger:response getLabelByIdUnauthorized
*/
type GetLabelByIDUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLabelByIDUnauthorized creates GetLabelByIDUnauthorized with default headers values
func NewGetLabelByIDUnauthorized() *GetLabelByIDUnauthorized {

	return &GetLabelByIDUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get label by Id unauthorized response
func (o *GetLabelByIDUnauthorized) WithXRequestID(xRequestID string) *GetLabelByIDUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get label by Id unauthorized response
func (o *GetLabelByIDUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get label by Id unauthorized response
func (o *GetLabelByIDUnauthorized) WithPayload(payload *models.Errors) *GetLabelByIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get label by Id unauthorized response
func (o *GetLabelByIDUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLabelByIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLabelByIDNotFoundCode is the HTTP code returned for type GetLabelByIDNotFound
const GetLabelByIDNotFoundCode int = 404

/*GetLabelByIDNotFound Not found

swagger:response getLabelByIdNotFound
*/
type GetLabelByIDNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLabelByIDNotFound creates GetLabelByIDNotFound with default headers values
func NewGetLabelByIDNotFound() *GetLabelByIDNotFound {

	return &GetLabelByIDNotFound{}
}

// WithXRequestID adds the xRequestId to the get label by Id not found response
func (o *GetLabelByIDNotFound) WithXRequestID(xRequestID string) *GetLabelByIDNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get label by Id not found response
func (o *GetLabelByIDNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get label by Id not found response
func (o *GetLabelByIDNotFound) WithPayload(payload *models.Errors) *GetLabelByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get label by Id not found response
func (o *GetLabelByIDNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLabelByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLabelByIDInternalServerErrorCode is the HTTP code returned for type GetLabelByIDInternalServerError
const GetLabelByIDInternalServerErrorCode int = 500

/*GetLabelByIDInternalServerError Internal server error

swagger:response getLabelByIdInternalServerError
*/
type GetLabelByIDInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLabelByIDInternalServerError creates GetLabelByIDInternalServerError with default headers values
func NewGetLabelByIDInternalServerError() *GetLabelByIDInternalServerError {

	return &GetLabelByIDInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get label by Id internal server error response
func (o *GetLabelByIDInternalServerError) WithXRequestID(xRequestID string) *GetLabelByIDInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get label by Id internal server error response
func (o *GetLabelByIDInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get label by Id internal server error response
func (o *GetLabelByIDInternalServerError) WithPayload(payload *models.Errors) *GetLabelByIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get label by Id internal server error response
func (o *GetLabelByIDInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLabelByIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
