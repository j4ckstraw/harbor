// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteLabelOKCode is the HTTP code returned for type DeleteLabelOK
const DeleteLabelOKCode int = 200

/*DeleteLabelOK Success

swagger:response deleteLabelOK
*/
type DeleteLabelOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteLabelOK creates DeleteLabelOK with default headers values
func NewDeleteLabelOK() *DeleteLabelOK {

	return &DeleteLabelOK{}
}

// WithXRequestID adds the xRequestId to the delete label o k response
func (o *DeleteLabelOK) WithXRequestID(xRequestID string) *DeleteLabelOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete label o k response
func (o *DeleteLabelOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteLabelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteLabelBadRequestCode is the HTTP code returned for type DeleteLabelBadRequest
const DeleteLabelBadRequestCode int = 400

/*DeleteLabelBadRequest Bad request

swagger:response deleteLabelBadRequest
*/
type DeleteLabelBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteLabelBadRequest creates DeleteLabelBadRequest with default headers values
func NewDeleteLabelBadRequest() *DeleteLabelBadRequest {

	return &DeleteLabelBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete label bad request response
func (o *DeleteLabelBadRequest) WithXRequestID(xRequestID string) *DeleteLabelBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete label bad request response
func (o *DeleteLabelBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete label bad request response
func (o *DeleteLabelBadRequest) WithPayload(payload *models.Errors) *DeleteLabelBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete label bad request response
func (o *DeleteLabelBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteLabelBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteLabelUnauthorizedCode is the HTTP code returned for type DeleteLabelUnauthorized
const DeleteLabelUnauthorizedCode int = 401

/*DeleteLabelUnauthorized Unauthorized

swagger:response deleteLabelUnauthorized
*/
type DeleteLabelUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteLabelUnauthorized creates DeleteLabelUnauthorized with default headers values
func NewDeleteLabelUnauthorized() *DeleteLabelUnauthorized {

	return &DeleteLabelUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete label unauthorized response
func (o *DeleteLabelUnauthorized) WithXRequestID(xRequestID string) *DeleteLabelUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete label unauthorized response
func (o *DeleteLabelUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete label unauthorized response
func (o *DeleteLabelUnauthorized) WithPayload(payload *models.Errors) *DeleteLabelUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete label unauthorized response
func (o *DeleteLabelUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteLabelUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteLabelNotFoundCode is the HTTP code returned for type DeleteLabelNotFound
const DeleteLabelNotFoundCode int = 404

/*DeleteLabelNotFound Not found

swagger:response deleteLabelNotFound
*/
type DeleteLabelNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteLabelNotFound creates DeleteLabelNotFound with default headers values
func NewDeleteLabelNotFound() *DeleteLabelNotFound {

	return &DeleteLabelNotFound{}
}

// WithXRequestID adds the xRequestId to the delete label not found response
func (o *DeleteLabelNotFound) WithXRequestID(xRequestID string) *DeleteLabelNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete label not found response
func (o *DeleteLabelNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete label not found response
func (o *DeleteLabelNotFound) WithPayload(payload *models.Errors) *DeleteLabelNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete label not found response
func (o *DeleteLabelNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteLabelNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteLabelInternalServerErrorCode is the HTTP code returned for type DeleteLabelInternalServerError
const DeleteLabelInternalServerErrorCode int = 500

/*DeleteLabelInternalServerError Internal server error

swagger:response deleteLabelInternalServerError
*/
type DeleteLabelInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteLabelInternalServerError creates DeleteLabelInternalServerError with default headers values
func NewDeleteLabelInternalServerError() *DeleteLabelInternalServerError {

	return &DeleteLabelInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete label internal server error response
func (o *DeleteLabelInternalServerError) WithXRequestID(xRequestID string) *DeleteLabelInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete label internal server error response
func (o *DeleteLabelInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete label internal server error response
func (o *DeleteLabelInternalServerError) WithPayload(payload *models.Errors) *DeleteLabelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete label internal server error response
func (o *DeleteLabelInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteLabelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
