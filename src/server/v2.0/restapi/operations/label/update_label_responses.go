// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateLabelOKCode is the HTTP code returned for type UpdateLabelOK
const UpdateLabelOKCode int = 200

/*UpdateLabelOK Success

swagger:response updateLabelOK
*/
type UpdateLabelOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateLabelOK creates UpdateLabelOK with default headers values
func NewUpdateLabelOK() *UpdateLabelOK {

	return &UpdateLabelOK{}
}

// WithXRequestID adds the xRequestId to the update label o k response
func (o *UpdateLabelOK) WithXRequestID(xRequestID string) *UpdateLabelOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update label o k response
func (o *UpdateLabelOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateLabelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateLabelBadRequestCode is the HTTP code returned for type UpdateLabelBadRequest
const UpdateLabelBadRequestCode int = 400

/*UpdateLabelBadRequest Bad request

swagger:response updateLabelBadRequest
*/
type UpdateLabelBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateLabelBadRequest creates UpdateLabelBadRequest with default headers values
func NewUpdateLabelBadRequest() *UpdateLabelBadRequest {

	return &UpdateLabelBadRequest{}
}

// WithXRequestID adds the xRequestId to the update label bad request response
func (o *UpdateLabelBadRequest) WithXRequestID(xRequestID string) *UpdateLabelBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update label bad request response
func (o *UpdateLabelBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update label bad request response
func (o *UpdateLabelBadRequest) WithPayload(payload *models.Errors) *UpdateLabelBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update label bad request response
func (o *UpdateLabelBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLabelBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLabelUnauthorizedCode is the HTTP code returned for type UpdateLabelUnauthorized
const UpdateLabelUnauthorizedCode int = 401

/*UpdateLabelUnauthorized Unauthorized

swagger:response updateLabelUnauthorized
*/
type UpdateLabelUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateLabelUnauthorized creates UpdateLabelUnauthorized with default headers values
func NewUpdateLabelUnauthorized() *UpdateLabelUnauthorized {

	return &UpdateLabelUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update label unauthorized response
func (o *UpdateLabelUnauthorized) WithXRequestID(xRequestID string) *UpdateLabelUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update label unauthorized response
func (o *UpdateLabelUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update label unauthorized response
func (o *UpdateLabelUnauthorized) WithPayload(payload *models.Errors) *UpdateLabelUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update label unauthorized response
func (o *UpdateLabelUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLabelUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLabelNotFoundCode is the HTTP code returned for type UpdateLabelNotFound
const UpdateLabelNotFoundCode int = 404

/*UpdateLabelNotFound Not found

swagger:response updateLabelNotFound
*/
type UpdateLabelNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateLabelNotFound creates UpdateLabelNotFound with default headers values
func NewUpdateLabelNotFound() *UpdateLabelNotFound {

	return &UpdateLabelNotFound{}
}

// WithXRequestID adds the xRequestId to the update label not found response
func (o *UpdateLabelNotFound) WithXRequestID(xRequestID string) *UpdateLabelNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update label not found response
func (o *UpdateLabelNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update label not found response
func (o *UpdateLabelNotFound) WithPayload(payload *models.Errors) *UpdateLabelNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update label not found response
func (o *UpdateLabelNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLabelNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLabelConflictCode is the HTTP code returned for type UpdateLabelConflict
const UpdateLabelConflictCode int = 409

/*UpdateLabelConflict Conflict

swagger:response updateLabelConflict
*/
type UpdateLabelConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateLabelConflict creates UpdateLabelConflict with default headers values
func NewUpdateLabelConflict() *UpdateLabelConflict {

	return &UpdateLabelConflict{}
}

// WithXRequestID adds the xRequestId to the update label conflict response
func (o *UpdateLabelConflict) WithXRequestID(xRequestID string) *UpdateLabelConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update label conflict response
func (o *UpdateLabelConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update label conflict response
func (o *UpdateLabelConflict) WithPayload(payload *models.Errors) *UpdateLabelConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update label conflict response
func (o *UpdateLabelConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLabelConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLabelInternalServerErrorCode is the HTTP code returned for type UpdateLabelInternalServerError
const UpdateLabelInternalServerErrorCode int = 500

/*UpdateLabelInternalServerError Internal server error

swagger:response updateLabelInternalServerError
*/
type UpdateLabelInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateLabelInternalServerError creates UpdateLabelInternalServerError with default headers values
func NewUpdateLabelInternalServerError() *UpdateLabelInternalServerError {

	return &UpdateLabelInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update label internal server error response
func (o *UpdateLabelInternalServerError) WithXRequestID(xRequestID string) *UpdateLabelInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update label internal server error response
func (o *UpdateLabelInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update label internal server error response
func (o *UpdateLabelInternalServerError) WithPayload(payload *models.Errors) *UpdateLabelInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update label internal server error response
func (o *UpdateLabelInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLabelInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
