// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListLabelsOKCode is the HTTP code returned for type ListLabelsOK
const ListLabelsOKCode int = 200

/*ListLabelsOK Get successfully.

swagger:response listLabelsOK
*/
type ListLabelsOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Label `json:"body,omitempty"`
}

// NewListLabelsOK creates ListLabelsOK with default headers values
func NewListLabelsOK() *ListLabelsOK {

	return &ListLabelsOK{}
}

// WithLink adds the link to the list labels o k response
func (o *ListLabelsOK) WithLink(link string) *ListLabelsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list labels o k response
func (o *ListLabelsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list labels o k response
func (o *ListLabelsOK) WithXTotalCount(xTotalCount int64) *ListLabelsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list labels o k response
func (o *ListLabelsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list labels o k response
func (o *ListLabelsOK) WithPayload(payload []*models.Label) *ListLabelsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list labels o k response
func (o *ListLabelsOK) SetPayload(payload []*models.Label) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListLabelsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Label, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListLabelsBadRequestCode is the HTTP code returned for type ListLabelsBadRequest
const ListLabelsBadRequestCode int = 400

/*ListLabelsBadRequest Bad request

swagger:response listLabelsBadRequest
*/
type ListLabelsBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListLabelsBadRequest creates ListLabelsBadRequest with default headers values
func NewListLabelsBadRequest() *ListLabelsBadRequest {

	return &ListLabelsBadRequest{}
}

// WithXRequestID adds the xRequestId to the list labels bad request response
func (o *ListLabelsBadRequest) WithXRequestID(xRequestID string) *ListLabelsBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list labels bad request response
func (o *ListLabelsBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list labels bad request response
func (o *ListLabelsBadRequest) WithPayload(payload *models.Errors) *ListLabelsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list labels bad request response
func (o *ListLabelsBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListLabelsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListLabelsUnauthorizedCode is the HTTP code returned for type ListLabelsUnauthorized
const ListLabelsUnauthorizedCode int = 401

/*ListLabelsUnauthorized Unauthorized

swagger:response listLabelsUnauthorized
*/
type ListLabelsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListLabelsUnauthorized creates ListLabelsUnauthorized with default headers values
func NewListLabelsUnauthorized() *ListLabelsUnauthorized {

	return &ListLabelsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list labels unauthorized response
func (o *ListLabelsUnauthorized) WithXRequestID(xRequestID string) *ListLabelsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list labels unauthorized response
func (o *ListLabelsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list labels unauthorized response
func (o *ListLabelsUnauthorized) WithPayload(payload *models.Errors) *ListLabelsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list labels unauthorized response
func (o *ListLabelsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListLabelsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListLabelsInternalServerErrorCode is the HTTP code returned for type ListLabelsInternalServerError
const ListLabelsInternalServerErrorCode int = 500

/*ListLabelsInternalServerError Internal server error

swagger:response listLabelsInternalServerError
*/
type ListLabelsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListLabelsInternalServerError creates ListLabelsInternalServerError with default headers values
func NewListLabelsInternalServerError() *ListLabelsInternalServerError {

	return &ListLabelsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list labels internal server error response
func (o *ListLabelsInternalServerError) WithXRequestID(xRequestID string) *ListLabelsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list labels internal server error response
func (o *ListLabelsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list labels internal server error response
func (o *ListLabelsInternalServerError) WithPayload(payload *models.Errors) *ListLabelsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list labels internal server error response
func (o *ListLabelsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListLabelsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
