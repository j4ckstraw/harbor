// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteLabelHandlerFunc turns a function with the right signature into a delete label handler
type DeleteLabelHandlerFunc func(DeleteLabelParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteLabelHandlerFunc) Handle(params DeleteLabelParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteLabelHandler interface for that can handle valid delete label params
type DeleteLabelHandler interface {
	Handle(DeleteLabelParams, interface{}) middleware.Responder
}

// NewDeleteLabel creates a new http.Handler for the delete label operation
func NewDeleteLabel(ctx *middleware.Context, handler DeleteLabelHandler) *DeleteLabel {
	return &DeleteLabel{Context: ctx, Handler: handler}
}

/*DeleteLabel swagger:route DELETE /labels/{label_id} label deleteLabel

Delete the label specified by ID.

Delete the label specified by ID.


*/
type DeleteLabel struct {
	Context *middleware.Context
	Handler DeleteLabelHandler
}

func (o *DeleteLabel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteLabelParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
