// Code generated by go-swagger; DO NOT EDIT.

package robotv1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRobotByIDV1HandlerFunc turns a function with the right signature into a get robot by ID v1 handler
type GetRobotByIDV1HandlerFunc func(GetRobotByIDV1Params, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRobotByIDV1HandlerFunc) Handle(params GetRobotByIDV1Params, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetRobotByIDV1Handler interface for that can handle valid get robot by ID v1 params
type GetRobotByIDV1Handler interface {
	Handle(GetRobotByIDV1Params, interface{}) middleware.Responder
}

// NewGetRobotByIDV1 creates a new http.Handler for the get robot by ID v1 operation
func NewGetRobotByIDV1(ctx *middleware.Context, handler GetRobotByIDV1Handler) *GetRobotByIDV1 {
	return &GetRobotByIDV1{Context: ctx, Handler: handler}
}

/*GetRobotByIDV1 swagger:route GET /projects/{project_name_or_id}/robots/{robot_id} robotv1 getRobotByIdV1

Get a robot account

This endpoint returns specific robot account information by robot ID.

*/
type GetRobotByIDV1 struct {
	Context *middleware.Context
	Handler GetRobotByIDV1Handler
}

func (o *GetRobotByIDV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRobotByIDV1Params()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
