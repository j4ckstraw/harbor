// Code generated by go-swagger; DO NOT EDIT.

package robotv1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteRobotV1OKCode is the HTTP code returned for type DeleteRobotV1OK
const DeleteRobotV1OKCode int = 200

/*DeleteRobotV1OK Success

swagger:response deleteRobotV1OK
*/
type DeleteRobotV1OK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteRobotV1OK creates DeleteRobotV1OK with default headers values
func NewDeleteRobotV1OK() *DeleteRobotV1OK {

	return &DeleteRobotV1OK{}
}

// WithXRequestID adds the xRequestId to the delete robot v1 o k response
func (o *DeleteRobotV1OK) WithXRequestID(xRequestID string) *DeleteRobotV1OK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot v1 o k response
func (o *DeleteRobotV1OK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteRobotV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteRobotV1BadRequestCode is the HTTP code returned for type DeleteRobotV1BadRequest
const DeleteRobotV1BadRequestCode int = 400

/*DeleteRobotV1BadRequest Bad request

swagger:response deleteRobotV1BadRequest
*/
type DeleteRobotV1BadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotV1BadRequest creates DeleteRobotV1BadRequest with default headers values
func NewDeleteRobotV1BadRequest() *DeleteRobotV1BadRequest {

	return &DeleteRobotV1BadRequest{}
}

// WithXRequestID adds the xRequestId to the delete robot v1 bad request response
func (o *DeleteRobotV1BadRequest) WithXRequestID(xRequestID string) *DeleteRobotV1BadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot v1 bad request response
func (o *DeleteRobotV1BadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot v1 bad request response
func (o *DeleteRobotV1BadRequest) WithPayload(payload *models.Errors) *DeleteRobotV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot v1 bad request response
func (o *DeleteRobotV1BadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotV1UnauthorizedCode is the HTTP code returned for type DeleteRobotV1Unauthorized
const DeleteRobotV1UnauthorizedCode int = 401

/*DeleteRobotV1Unauthorized Unauthorized

swagger:response deleteRobotV1Unauthorized
*/
type DeleteRobotV1Unauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotV1Unauthorized creates DeleteRobotV1Unauthorized with default headers values
func NewDeleteRobotV1Unauthorized() *DeleteRobotV1Unauthorized {

	return &DeleteRobotV1Unauthorized{}
}

// WithXRequestID adds the xRequestId to the delete robot v1 unauthorized response
func (o *DeleteRobotV1Unauthorized) WithXRequestID(xRequestID string) *DeleteRobotV1Unauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot v1 unauthorized response
func (o *DeleteRobotV1Unauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot v1 unauthorized response
func (o *DeleteRobotV1Unauthorized) WithPayload(payload *models.Errors) *DeleteRobotV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot v1 unauthorized response
func (o *DeleteRobotV1Unauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotV1ForbiddenCode is the HTTP code returned for type DeleteRobotV1Forbidden
const DeleteRobotV1ForbiddenCode int = 403

/*DeleteRobotV1Forbidden Forbidden

swagger:response deleteRobotV1Forbidden
*/
type DeleteRobotV1Forbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotV1Forbidden creates DeleteRobotV1Forbidden with default headers values
func NewDeleteRobotV1Forbidden() *DeleteRobotV1Forbidden {

	return &DeleteRobotV1Forbidden{}
}

// WithXRequestID adds the xRequestId to the delete robot v1 forbidden response
func (o *DeleteRobotV1Forbidden) WithXRequestID(xRequestID string) *DeleteRobotV1Forbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot v1 forbidden response
func (o *DeleteRobotV1Forbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot v1 forbidden response
func (o *DeleteRobotV1Forbidden) WithPayload(payload *models.Errors) *DeleteRobotV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot v1 forbidden response
func (o *DeleteRobotV1Forbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotV1NotFoundCode is the HTTP code returned for type DeleteRobotV1NotFound
const DeleteRobotV1NotFoundCode int = 404

/*DeleteRobotV1NotFound Not found

swagger:response deleteRobotV1NotFound
*/
type DeleteRobotV1NotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotV1NotFound creates DeleteRobotV1NotFound with default headers values
func NewDeleteRobotV1NotFound() *DeleteRobotV1NotFound {

	return &DeleteRobotV1NotFound{}
}

// WithXRequestID adds the xRequestId to the delete robot v1 not found response
func (o *DeleteRobotV1NotFound) WithXRequestID(xRequestID string) *DeleteRobotV1NotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot v1 not found response
func (o *DeleteRobotV1NotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot v1 not found response
func (o *DeleteRobotV1NotFound) WithPayload(payload *models.Errors) *DeleteRobotV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot v1 not found response
func (o *DeleteRobotV1NotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRobotV1InternalServerErrorCode is the HTTP code returned for type DeleteRobotV1InternalServerError
const DeleteRobotV1InternalServerErrorCode int = 500

/*DeleteRobotV1InternalServerError Internal server error

swagger:response deleteRobotV1InternalServerError
*/
type DeleteRobotV1InternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteRobotV1InternalServerError creates DeleteRobotV1InternalServerError with default headers values
func NewDeleteRobotV1InternalServerError() *DeleteRobotV1InternalServerError {

	return &DeleteRobotV1InternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete robot v1 internal server error response
func (o *DeleteRobotV1InternalServerError) WithXRequestID(xRequestID string) *DeleteRobotV1InternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete robot v1 internal server error response
func (o *DeleteRobotV1InternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete robot v1 internal server error response
func (o *DeleteRobotV1InternalServerError) WithPayload(payload *models.Errors) *DeleteRobotV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete robot v1 internal server error response
func (o *DeleteRobotV1InternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRobotV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
