// Code generated by go-swagger; DO NOT EDIT.

package robotv1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateRobotV1CreatedCode is the HTTP code returned for type CreateRobotV1Created
const CreateRobotV1CreatedCode int = 201

/*CreateRobotV1Created Created

swagger:response createRobotV1Created
*/
type CreateRobotV1Created struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.RobotCreated `json:"body,omitempty"`
}

// NewCreateRobotV1Created creates CreateRobotV1Created with default headers values
func NewCreateRobotV1Created() *CreateRobotV1Created {

	return &CreateRobotV1Created{}
}

// WithLocation adds the location to the create robot v1 created response
func (o *CreateRobotV1Created) WithLocation(location string) *CreateRobotV1Created {
	o.Location = location
	return o
}

// SetLocation sets the location to the create robot v1 created response
func (o *CreateRobotV1Created) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create robot v1 created response
func (o *CreateRobotV1Created) WithXRequestID(xRequestID string) *CreateRobotV1Created {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot v1 created response
func (o *CreateRobotV1Created) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot v1 created response
func (o *CreateRobotV1Created) WithPayload(payload *models.RobotCreated) *CreateRobotV1Created {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot v1 created response
func (o *CreateRobotV1Created) SetPayload(payload *models.RobotCreated) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotV1Created) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotV1BadRequestCode is the HTTP code returned for type CreateRobotV1BadRequest
const CreateRobotV1BadRequestCode int = 400

/*CreateRobotV1BadRequest Bad request

swagger:response createRobotV1BadRequest
*/
type CreateRobotV1BadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotV1BadRequest creates CreateRobotV1BadRequest with default headers values
func NewCreateRobotV1BadRequest() *CreateRobotV1BadRequest {

	return &CreateRobotV1BadRequest{}
}

// WithXRequestID adds the xRequestId to the create robot v1 bad request response
func (o *CreateRobotV1BadRequest) WithXRequestID(xRequestID string) *CreateRobotV1BadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot v1 bad request response
func (o *CreateRobotV1BadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot v1 bad request response
func (o *CreateRobotV1BadRequest) WithPayload(payload *models.Errors) *CreateRobotV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot v1 bad request response
func (o *CreateRobotV1BadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotV1UnauthorizedCode is the HTTP code returned for type CreateRobotV1Unauthorized
const CreateRobotV1UnauthorizedCode int = 401

/*CreateRobotV1Unauthorized Unauthorized

swagger:response createRobotV1Unauthorized
*/
type CreateRobotV1Unauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotV1Unauthorized creates CreateRobotV1Unauthorized with default headers values
func NewCreateRobotV1Unauthorized() *CreateRobotV1Unauthorized {

	return &CreateRobotV1Unauthorized{}
}

// WithXRequestID adds the xRequestId to the create robot v1 unauthorized response
func (o *CreateRobotV1Unauthorized) WithXRequestID(xRequestID string) *CreateRobotV1Unauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot v1 unauthorized response
func (o *CreateRobotV1Unauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot v1 unauthorized response
func (o *CreateRobotV1Unauthorized) WithPayload(payload *models.Errors) *CreateRobotV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot v1 unauthorized response
func (o *CreateRobotV1Unauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotV1ForbiddenCode is the HTTP code returned for type CreateRobotV1Forbidden
const CreateRobotV1ForbiddenCode int = 403

/*CreateRobotV1Forbidden Forbidden

swagger:response createRobotV1Forbidden
*/
type CreateRobotV1Forbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotV1Forbidden creates CreateRobotV1Forbidden with default headers values
func NewCreateRobotV1Forbidden() *CreateRobotV1Forbidden {

	return &CreateRobotV1Forbidden{}
}

// WithXRequestID adds the xRequestId to the create robot v1 forbidden response
func (o *CreateRobotV1Forbidden) WithXRequestID(xRequestID string) *CreateRobotV1Forbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot v1 forbidden response
func (o *CreateRobotV1Forbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot v1 forbidden response
func (o *CreateRobotV1Forbidden) WithPayload(payload *models.Errors) *CreateRobotV1Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot v1 forbidden response
func (o *CreateRobotV1Forbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotV1Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotV1NotFoundCode is the HTTP code returned for type CreateRobotV1NotFound
const CreateRobotV1NotFoundCode int = 404

/*CreateRobotV1NotFound Not found

swagger:response createRobotV1NotFound
*/
type CreateRobotV1NotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotV1NotFound creates CreateRobotV1NotFound with default headers values
func NewCreateRobotV1NotFound() *CreateRobotV1NotFound {

	return &CreateRobotV1NotFound{}
}

// WithXRequestID adds the xRequestId to the create robot v1 not found response
func (o *CreateRobotV1NotFound) WithXRequestID(xRequestID string) *CreateRobotV1NotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot v1 not found response
func (o *CreateRobotV1NotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot v1 not found response
func (o *CreateRobotV1NotFound) WithPayload(payload *models.Errors) *CreateRobotV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot v1 not found response
func (o *CreateRobotV1NotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRobotV1InternalServerErrorCode is the HTTP code returned for type CreateRobotV1InternalServerError
const CreateRobotV1InternalServerErrorCode int = 500

/*CreateRobotV1InternalServerError Internal server error

swagger:response createRobotV1InternalServerError
*/
type CreateRobotV1InternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRobotV1InternalServerError creates CreateRobotV1InternalServerError with default headers values
func NewCreateRobotV1InternalServerError() *CreateRobotV1InternalServerError {

	return &CreateRobotV1InternalServerError{}
}

// WithXRequestID adds the xRequestId to the create robot v1 internal server error response
func (o *CreateRobotV1InternalServerError) WithXRequestID(xRequestID string) *CreateRobotV1InternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create robot v1 internal server error response
func (o *CreateRobotV1InternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create robot v1 internal server error response
func (o *CreateRobotV1InternalServerError) WithPayload(payload *models.Errors) *CreateRobotV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create robot v1 internal server error response
func (o *CreateRobotV1InternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRobotV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
