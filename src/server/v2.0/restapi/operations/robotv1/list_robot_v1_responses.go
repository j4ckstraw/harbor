// Code generated by go-swagger; DO NOT EDIT.

package robotv1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListRobotV1OKCode is the HTTP code returned for type ListRobotV1OK
const ListRobotV1OKCode int = 200

/*ListRobotV1OK Success

swagger:response listRobotV1OK
*/
type ListRobotV1OK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of robot accounts

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Robot `json:"body,omitempty"`
}

// NewListRobotV1OK creates ListRobotV1OK with default headers values
func NewListRobotV1OK() *ListRobotV1OK {

	return &ListRobotV1OK{}
}

// WithLink adds the link to the list robot v1 o k response
func (o *ListRobotV1OK) WithLink(link string) *ListRobotV1OK {
	o.Link = link
	return o
}

// SetLink sets the link to the list robot v1 o k response
func (o *ListRobotV1OK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list robot v1 o k response
func (o *ListRobotV1OK) WithXTotalCount(xTotalCount int64) *ListRobotV1OK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list robot v1 o k response
func (o *ListRobotV1OK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list robot v1 o k response
func (o *ListRobotV1OK) WithPayload(payload []*models.Robot) *ListRobotV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot v1 o k response
func (o *ListRobotV1OK) SetPayload(payload []*models.Robot) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Robot, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRobotV1BadRequestCode is the HTTP code returned for type ListRobotV1BadRequest
const ListRobotV1BadRequestCode int = 400

/*ListRobotV1BadRequest Bad request

swagger:response listRobotV1BadRequest
*/
type ListRobotV1BadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRobotV1BadRequest creates ListRobotV1BadRequest with default headers values
func NewListRobotV1BadRequest() *ListRobotV1BadRequest {

	return &ListRobotV1BadRequest{}
}

// WithXRequestID adds the xRequestId to the list robot v1 bad request response
func (o *ListRobotV1BadRequest) WithXRequestID(xRequestID string) *ListRobotV1BadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list robot v1 bad request response
func (o *ListRobotV1BadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list robot v1 bad request response
func (o *ListRobotV1BadRequest) WithPayload(payload *models.Errors) *ListRobotV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot v1 bad request response
func (o *ListRobotV1BadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRobotV1NotFoundCode is the HTTP code returned for type ListRobotV1NotFound
const ListRobotV1NotFoundCode int = 404

/*ListRobotV1NotFound Not found

swagger:response listRobotV1NotFound
*/
type ListRobotV1NotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRobotV1NotFound creates ListRobotV1NotFound with default headers values
func NewListRobotV1NotFound() *ListRobotV1NotFound {

	return &ListRobotV1NotFound{}
}

// WithXRequestID adds the xRequestId to the list robot v1 not found response
func (o *ListRobotV1NotFound) WithXRequestID(xRequestID string) *ListRobotV1NotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list robot v1 not found response
func (o *ListRobotV1NotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list robot v1 not found response
func (o *ListRobotV1NotFound) WithPayload(payload *models.Errors) *ListRobotV1NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot v1 not found response
func (o *ListRobotV1NotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRobotV1InternalServerErrorCode is the HTTP code returned for type ListRobotV1InternalServerError
const ListRobotV1InternalServerErrorCode int = 500

/*ListRobotV1InternalServerError Internal server error

swagger:response listRobotV1InternalServerError
*/
type ListRobotV1InternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRobotV1InternalServerError creates ListRobotV1InternalServerError with default headers values
func NewListRobotV1InternalServerError() *ListRobotV1InternalServerError {

	return &ListRobotV1InternalServerError{}
}

// WithXRequestID adds the xRequestId to the list robot v1 internal server error response
func (o *ListRobotV1InternalServerError) WithXRequestID(xRequestID string) *ListRobotV1InternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list robot v1 internal server error response
func (o *ListRobotV1InternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list robot v1 internal server error response
func (o *ListRobotV1InternalServerError) WithPayload(payload *models.Errors) *ListRobotV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list robot v1 internal server error response
func (o *ListRobotV1InternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRobotV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
