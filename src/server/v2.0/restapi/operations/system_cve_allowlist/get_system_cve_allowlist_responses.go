// Code generated by go-swagger; DO NOT EDIT.

package system_cve_allowlist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetSystemCVEAllowlistOKCode is the HTTP code returned for type GetSystemCVEAllowlistOK
const GetSystemCVEAllowlistOKCode int = 200

/*GetSystemCVEAllowlistOK Successfully retrieved the CVE allowlist.

swagger:response getSystemCveAllowlistOK
*/
type GetSystemCVEAllowlistOK struct {

	/*
	  In: Body
	*/
	Payload *models.CVEAllowlist `json:"body,omitempty"`
}

// NewGetSystemCVEAllowlistOK creates GetSystemCVEAllowlistOK with default headers values
func NewGetSystemCVEAllowlistOK() *GetSystemCVEAllowlistOK {

	return &GetSystemCVEAllowlistOK{}
}

// WithPayload adds the payload to the get system Cve allowlist o k response
func (o *GetSystemCVEAllowlistOK) WithPayload(payload *models.CVEAllowlist) *GetSystemCVEAllowlistOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get system Cve allowlist o k response
func (o *GetSystemCVEAllowlistOK) SetPayload(payload *models.CVEAllowlist) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSystemCVEAllowlistOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSystemCVEAllowlistUnauthorizedCode is the HTTP code returned for type GetSystemCVEAllowlistUnauthorized
const GetSystemCVEAllowlistUnauthorizedCode int = 401

/*GetSystemCVEAllowlistUnauthorized Unauthorized

swagger:response getSystemCveAllowlistUnauthorized
*/
type GetSystemCVEAllowlistUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSystemCVEAllowlistUnauthorized creates GetSystemCVEAllowlistUnauthorized with default headers values
func NewGetSystemCVEAllowlistUnauthorized() *GetSystemCVEAllowlistUnauthorized {

	return &GetSystemCVEAllowlistUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get system Cve allowlist unauthorized response
func (o *GetSystemCVEAllowlistUnauthorized) WithXRequestID(xRequestID string) *GetSystemCVEAllowlistUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get system Cve allowlist unauthorized response
func (o *GetSystemCVEAllowlistUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get system Cve allowlist unauthorized response
func (o *GetSystemCVEAllowlistUnauthorized) WithPayload(payload *models.Errors) *GetSystemCVEAllowlistUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get system Cve allowlist unauthorized response
func (o *GetSystemCVEAllowlistUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSystemCVEAllowlistUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSystemCVEAllowlistInternalServerErrorCode is the HTTP code returned for type GetSystemCVEAllowlistInternalServerError
const GetSystemCVEAllowlistInternalServerErrorCode int = 500

/*GetSystemCVEAllowlistInternalServerError Internal server error

swagger:response getSystemCveAllowlistInternalServerError
*/
type GetSystemCVEAllowlistInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSystemCVEAllowlistInternalServerError creates GetSystemCVEAllowlistInternalServerError with default headers values
func NewGetSystemCVEAllowlistInternalServerError() *GetSystemCVEAllowlistInternalServerError {

	return &GetSystemCVEAllowlistInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get system Cve allowlist internal server error response
func (o *GetSystemCVEAllowlistInternalServerError) WithXRequestID(xRequestID string) *GetSystemCVEAllowlistInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get system Cve allowlist internal server error response
func (o *GetSystemCVEAllowlistInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get system Cve allowlist internal server error response
func (o *GetSystemCVEAllowlistInternalServerError) WithPayload(payload *models.Errors) *GetSystemCVEAllowlistInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get system Cve allowlist internal server error response
func (o *GetSystemCVEAllowlistInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSystemCVEAllowlistInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
