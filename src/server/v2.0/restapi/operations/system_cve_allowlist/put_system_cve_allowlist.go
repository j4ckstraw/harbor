// Code generated by go-swagger; DO NOT EDIT.

package system_cve_allowlist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutSystemCVEAllowlistHandlerFunc turns a function with the right signature into a put system CVE allowlist handler
type PutSystemCVEAllowlistHandlerFunc func(PutSystemCVEAllowlistParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutSystemCVEAllowlistHandlerFunc) Handle(params PutSystemCVEAllowlistParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutSystemCVEAllowlistHandler interface for that can handle valid put system CVE allowlist params
type PutSystemCVEAllowlistHandler interface {
	Handle(PutSystemCVEAllowlistParams, interface{}) middleware.Responder
}

// NewPutSystemCVEAllowlist creates a new http.Handler for the put system CVE allowlist operation
func NewPutSystemCVEAllowlist(ctx *middleware.Context, handler PutSystemCVEAllowlistHandler) *PutSystemCVEAllowlist {
	return &PutSystemCVEAllowlist{Context: ctx, Handler: handler}
}

/*PutSystemCVEAllowlist swagger:route PUT /system/CVEAllowlist SystemCVEAllowlist putSystemCveAllowlist

Update the system level allowlist of CVE.

This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.

*/
type PutSystemCVEAllowlist struct {
	Context *middleware.Context
	Handler PutSystemCVEAllowlistHandler
}

func (o *PutSystemCVEAllowlist) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutSystemCVEAllowlistParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
