// Code generated by go-swagger; DO NOT EDIT.

package system_cve_allowlist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSystemCVEAllowlistHandlerFunc turns a function with the right signature into a get system CVE allowlist handler
type GetSystemCVEAllowlistHandlerFunc func(GetSystemCVEAllowlistParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSystemCVEAllowlistHandlerFunc) Handle(params GetSystemCVEAllowlistParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetSystemCVEAllowlistHandler interface for that can handle valid get system CVE allowlist params
type GetSystemCVEAllowlistHandler interface {
	Handle(GetSystemCVEAllowlistParams, interface{}) middleware.Responder
}

// NewGetSystemCVEAllowlist creates a new http.Handler for the get system CVE allowlist operation
func NewGetSystemCVEAllowlist(ctx *middleware.Context, handler GetSystemCVEAllowlistHandler) *GetSystemCVEAllowlist {
	return &GetSystemCVEAllowlist{Context: ctx, Handler: handler}
}

/*GetSystemCVEAllowlist swagger:route GET /system/CVEAllowlist SystemCVEAllowlist getSystemCveAllowlist

Get the system level allowlist of CVE.

Get the system level allowlist of CVE.  This API can be called by all authenticated users.

*/
type GetSystemCVEAllowlist struct {
	Context *middleware.Context
	Handler GetSystemCVEAllowlistHandler
}

func (o *GetSystemCVEAllowlist) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSystemCVEAllowlistParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
