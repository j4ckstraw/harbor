// Code generated by go-swagger; DO NOT EDIT.

package auditlog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListAuditLogsOKCode is the HTTP code returned for type ListAuditLogsOK
const ListAuditLogsOKCode int = 200

/*ListAuditLogsOK Success

swagger:response listAuditLogsOK
*/
type ListAuditLogsOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of auditlogs

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.AuditLog `json:"body,omitempty"`
}

// NewListAuditLogsOK creates ListAuditLogsOK with default headers values
func NewListAuditLogsOK() *ListAuditLogsOK {

	return &ListAuditLogsOK{}
}

// WithLink adds the link to the list audit logs o k response
func (o *ListAuditLogsOK) WithLink(link string) *ListAuditLogsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list audit logs o k response
func (o *ListAuditLogsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list audit logs o k response
func (o *ListAuditLogsOK) WithXTotalCount(xTotalCount int64) *ListAuditLogsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list audit logs o k response
func (o *ListAuditLogsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list audit logs o k response
func (o *ListAuditLogsOK) WithPayload(payload []*models.AuditLog) *ListAuditLogsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list audit logs o k response
func (o *ListAuditLogsOK) SetPayload(payload []*models.AuditLog) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuditLogsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.AuditLog, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListAuditLogsBadRequestCode is the HTTP code returned for type ListAuditLogsBadRequest
const ListAuditLogsBadRequestCode int = 400

/*ListAuditLogsBadRequest Bad request

swagger:response listAuditLogsBadRequest
*/
type ListAuditLogsBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAuditLogsBadRequest creates ListAuditLogsBadRequest with default headers values
func NewListAuditLogsBadRequest() *ListAuditLogsBadRequest {

	return &ListAuditLogsBadRequest{}
}

// WithXRequestID adds the xRequestId to the list audit logs bad request response
func (o *ListAuditLogsBadRequest) WithXRequestID(xRequestID string) *ListAuditLogsBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list audit logs bad request response
func (o *ListAuditLogsBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list audit logs bad request response
func (o *ListAuditLogsBadRequest) WithPayload(payload *models.Errors) *ListAuditLogsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list audit logs bad request response
func (o *ListAuditLogsBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuditLogsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuditLogsUnauthorizedCode is the HTTP code returned for type ListAuditLogsUnauthorized
const ListAuditLogsUnauthorizedCode int = 401

/*ListAuditLogsUnauthorized Unauthorized

swagger:response listAuditLogsUnauthorized
*/
type ListAuditLogsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAuditLogsUnauthorized creates ListAuditLogsUnauthorized with default headers values
func NewListAuditLogsUnauthorized() *ListAuditLogsUnauthorized {

	return &ListAuditLogsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list audit logs unauthorized response
func (o *ListAuditLogsUnauthorized) WithXRequestID(xRequestID string) *ListAuditLogsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list audit logs unauthorized response
func (o *ListAuditLogsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list audit logs unauthorized response
func (o *ListAuditLogsUnauthorized) WithPayload(payload *models.Errors) *ListAuditLogsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list audit logs unauthorized response
func (o *ListAuditLogsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuditLogsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuditLogsInternalServerErrorCode is the HTTP code returned for type ListAuditLogsInternalServerError
const ListAuditLogsInternalServerErrorCode int = 500

/*ListAuditLogsInternalServerError Internal server error

swagger:response listAuditLogsInternalServerError
*/
type ListAuditLogsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAuditLogsInternalServerError creates ListAuditLogsInternalServerError with default headers values
func NewListAuditLogsInternalServerError() *ListAuditLogsInternalServerError {

	return &ListAuditLogsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list audit logs internal server error response
func (o *ListAuditLogsInternalServerError) WithXRequestID(xRequestID string) *ListAuditLogsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list audit logs internal server error response
func (o *ListAuditLogsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list audit logs internal server error response
func (o *ListAuditLogsInternalServerError) WithPayload(payload *models.Errors) *ListAuditLogsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list audit logs internal server error response
func (o *ListAuditLogsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuditLogsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
