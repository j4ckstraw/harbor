// Code generated by go-swagger; DO NOT EDIT.

package scan_all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateScanAllScheduleOKCode is the HTTP code returned for type UpdateScanAllScheduleOK
const UpdateScanAllScheduleOKCode int = 200

/*UpdateScanAllScheduleOK Success

swagger:response updateScanAllScheduleOK
*/
type UpdateScanAllScheduleOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateScanAllScheduleOK creates UpdateScanAllScheduleOK with default headers values
func NewUpdateScanAllScheduleOK() *UpdateScanAllScheduleOK {

	return &UpdateScanAllScheduleOK{}
}

// WithXRequestID adds the xRequestId to the update scan all schedule o k response
func (o *UpdateScanAllScheduleOK) WithXRequestID(xRequestID string) *UpdateScanAllScheduleOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scan all schedule o k response
func (o *UpdateScanAllScheduleOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateScanAllScheduleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateScanAllScheduleBadRequestCode is the HTTP code returned for type UpdateScanAllScheduleBadRequest
const UpdateScanAllScheduleBadRequestCode int = 400

/*UpdateScanAllScheduleBadRequest Bad request

swagger:response updateScanAllScheduleBadRequest
*/
type UpdateScanAllScheduleBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScanAllScheduleBadRequest creates UpdateScanAllScheduleBadRequest with default headers values
func NewUpdateScanAllScheduleBadRequest() *UpdateScanAllScheduleBadRequest {

	return &UpdateScanAllScheduleBadRequest{}
}

// WithXRequestID adds the xRequestId to the update scan all schedule bad request response
func (o *UpdateScanAllScheduleBadRequest) WithXRequestID(xRequestID string) *UpdateScanAllScheduleBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scan all schedule bad request response
func (o *UpdateScanAllScheduleBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scan all schedule bad request response
func (o *UpdateScanAllScheduleBadRequest) WithPayload(payload *models.Errors) *UpdateScanAllScheduleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scan all schedule bad request response
func (o *UpdateScanAllScheduleBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScanAllScheduleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScanAllScheduleUnauthorizedCode is the HTTP code returned for type UpdateScanAllScheduleUnauthorized
const UpdateScanAllScheduleUnauthorizedCode int = 401

/*UpdateScanAllScheduleUnauthorized Unauthorized

swagger:response updateScanAllScheduleUnauthorized
*/
type UpdateScanAllScheduleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScanAllScheduleUnauthorized creates UpdateScanAllScheduleUnauthorized with default headers values
func NewUpdateScanAllScheduleUnauthorized() *UpdateScanAllScheduleUnauthorized {

	return &UpdateScanAllScheduleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update scan all schedule unauthorized response
func (o *UpdateScanAllScheduleUnauthorized) WithXRequestID(xRequestID string) *UpdateScanAllScheduleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scan all schedule unauthorized response
func (o *UpdateScanAllScheduleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scan all schedule unauthorized response
func (o *UpdateScanAllScheduleUnauthorized) WithPayload(payload *models.Errors) *UpdateScanAllScheduleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scan all schedule unauthorized response
func (o *UpdateScanAllScheduleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScanAllScheduleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScanAllScheduleForbiddenCode is the HTTP code returned for type UpdateScanAllScheduleForbidden
const UpdateScanAllScheduleForbiddenCode int = 403

/*UpdateScanAllScheduleForbidden Forbidden

swagger:response updateScanAllScheduleForbidden
*/
type UpdateScanAllScheduleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScanAllScheduleForbidden creates UpdateScanAllScheduleForbidden with default headers values
func NewUpdateScanAllScheduleForbidden() *UpdateScanAllScheduleForbidden {

	return &UpdateScanAllScheduleForbidden{}
}

// WithXRequestID adds the xRequestId to the update scan all schedule forbidden response
func (o *UpdateScanAllScheduleForbidden) WithXRequestID(xRequestID string) *UpdateScanAllScheduleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scan all schedule forbidden response
func (o *UpdateScanAllScheduleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scan all schedule forbidden response
func (o *UpdateScanAllScheduleForbidden) WithPayload(payload *models.Errors) *UpdateScanAllScheduleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scan all schedule forbidden response
func (o *UpdateScanAllScheduleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScanAllScheduleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScanAllSchedulePreconditionFailedCode is the HTTP code returned for type UpdateScanAllSchedulePreconditionFailed
const UpdateScanAllSchedulePreconditionFailedCode int = 412

/*UpdateScanAllSchedulePreconditionFailed Precondition failed

swagger:response updateScanAllSchedulePreconditionFailed
*/
type UpdateScanAllSchedulePreconditionFailed struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScanAllSchedulePreconditionFailed creates UpdateScanAllSchedulePreconditionFailed with default headers values
func NewUpdateScanAllSchedulePreconditionFailed() *UpdateScanAllSchedulePreconditionFailed {

	return &UpdateScanAllSchedulePreconditionFailed{}
}

// WithXRequestID adds the xRequestId to the update scan all schedule precondition failed response
func (o *UpdateScanAllSchedulePreconditionFailed) WithXRequestID(xRequestID string) *UpdateScanAllSchedulePreconditionFailed {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scan all schedule precondition failed response
func (o *UpdateScanAllSchedulePreconditionFailed) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scan all schedule precondition failed response
func (o *UpdateScanAllSchedulePreconditionFailed) WithPayload(payload *models.Errors) *UpdateScanAllSchedulePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scan all schedule precondition failed response
func (o *UpdateScanAllSchedulePreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScanAllSchedulePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScanAllScheduleInternalServerErrorCode is the HTTP code returned for type UpdateScanAllScheduleInternalServerError
const UpdateScanAllScheduleInternalServerErrorCode int = 500

/*UpdateScanAllScheduleInternalServerError Internal server error

swagger:response updateScanAllScheduleInternalServerError
*/
type UpdateScanAllScheduleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScanAllScheduleInternalServerError creates UpdateScanAllScheduleInternalServerError with default headers values
func NewUpdateScanAllScheduleInternalServerError() *UpdateScanAllScheduleInternalServerError {

	return &UpdateScanAllScheduleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update scan all schedule internal server error response
func (o *UpdateScanAllScheduleInternalServerError) WithXRequestID(xRequestID string) *UpdateScanAllScheduleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scan all schedule internal server error response
func (o *UpdateScanAllScheduleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scan all schedule internal server error response
func (o *UpdateScanAllScheduleInternalServerError) WithPayload(payload *models.Errors) *UpdateScanAllScheduleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scan all schedule internal server error response
func (o *UpdateScanAllScheduleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScanAllScheduleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
