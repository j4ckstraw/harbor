// Code generated by go-swagger; DO NOT EDIT.

package scan_all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetLatestScanAllMetricsOKCode is the HTTP code returned for type GetLatestScanAllMetricsOK
const GetLatestScanAllMetricsOKCode int = 200

/*GetLatestScanAllMetricsOK OK

swagger:response getLatestScanAllMetricsOK
*/
type GetLatestScanAllMetricsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Stats `json:"body,omitempty"`
}

// NewGetLatestScanAllMetricsOK creates GetLatestScanAllMetricsOK with default headers values
func NewGetLatestScanAllMetricsOK() *GetLatestScanAllMetricsOK {

	return &GetLatestScanAllMetricsOK{}
}

// WithPayload adds the payload to the get latest scan all metrics o k response
func (o *GetLatestScanAllMetricsOK) WithPayload(payload *models.Stats) *GetLatestScanAllMetricsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get latest scan all metrics o k response
func (o *GetLatestScanAllMetricsOK) SetPayload(payload *models.Stats) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLatestScanAllMetricsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLatestScanAllMetricsUnauthorizedCode is the HTTP code returned for type GetLatestScanAllMetricsUnauthorized
const GetLatestScanAllMetricsUnauthorizedCode int = 401

/*GetLatestScanAllMetricsUnauthorized Unauthorized

swagger:response getLatestScanAllMetricsUnauthorized
*/
type GetLatestScanAllMetricsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLatestScanAllMetricsUnauthorized creates GetLatestScanAllMetricsUnauthorized with default headers values
func NewGetLatestScanAllMetricsUnauthorized() *GetLatestScanAllMetricsUnauthorized {

	return &GetLatestScanAllMetricsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get latest scan all metrics unauthorized response
func (o *GetLatestScanAllMetricsUnauthorized) WithXRequestID(xRequestID string) *GetLatestScanAllMetricsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get latest scan all metrics unauthorized response
func (o *GetLatestScanAllMetricsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get latest scan all metrics unauthorized response
func (o *GetLatestScanAllMetricsUnauthorized) WithPayload(payload *models.Errors) *GetLatestScanAllMetricsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get latest scan all metrics unauthorized response
func (o *GetLatestScanAllMetricsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLatestScanAllMetricsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLatestScanAllMetricsForbiddenCode is the HTTP code returned for type GetLatestScanAllMetricsForbidden
const GetLatestScanAllMetricsForbiddenCode int = 403

/*GetLatestScanAllMetricsForbidden Forbidden

swagger:response getLatestScanAllMetricsForbidden
*/
type GetLatestScanAllMetricsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLatestScanAllMetricsForbidden creates GetLatestScanAllMetricsForbidden with default headers values
func NewGetLatestScanAllMetricsForbidden() *GetLatestScanAllMetricsForbidden {

	return &GetLatestScanAllMetricsForbidden{}
}

// WithXRequestID adds the xRequestId to the get latest scan all metrics forbidden response
func (o *GetLatestScanAllMetricsForbidden) WithXRequestID(xRequestID string) *GetLatestScanAllMetricsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get latest scan all metrics forbidden response
func (o *GetLatestScanAllMetricsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get latest scan all metrics forbidden response
func (o *GetLatestScanAllMetricsForbidden) WithPayload(payload *models.Errors) *GetLatestScanAllMetricsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get latest scan all metrics forbidden response
func (o *GetLatestScanAllMetricsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLatestScanAllMetricsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLatestScanAllMetricsPreconditionFailedCode is the HTTP code returned for type GetLatestScanAllMetricsPreconditionFailed
const GetLatestScanAllMetricsPreconditionFailedCode int = 412

/*GetLatestScanAllMetricsPreconditionFailed Precondition failed

swagger:response getLatestScanAllMetricsPreconditionFailed
*/
type GetLatestScanAllMetricsPreconditionFailed struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLatestScanAllMetricsPreconditionFailed creates GetLatestScanAllMetricsPreconditionFailed with default headers values
func NewGetLatestScanAllMetricsPreconditionFailed() *GetLatestScanAllMetricsPreconditionFailed {

	return &GetLatestScanAllMetricsPreconditionFailed{}
}

// WithXRequestID adds the xRequestId to the get latest scan all metrics precondition failed response
func (o *GetLatestScanAllMetricsPreconditionFailed) WithXRequestID(xRequestID string) *GetLatestScanAllMetricsPreconditionFailed {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get latest scan all metrics precondition failed response
func (o *GetLatestScanAllMetricsPreconditionFailed) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get latest scan all metrics precondition failed response
func (o *GetLatestScanAllMetricsPreconditionFailed) WithPayload(payload *models.Errors) *GetLatestScanAllMetricsPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get latest scan all metrics precondition failed response
func (o *GetLatestScanAllMetricsPreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLatestScanAllMetricsPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLatestScanAllMetricsInternalServerErrorCode is the HTTP code returned for type GetLatestScanAllMetricsInternalServerError
const GetLatestScanAllMetricsInternalServerErrorCode int = 500

/*GetLatestScanAllMetricsInternalServerError Internal server error

swagger:response getLatestScanAllMetricsInternalServerError
*/
type GetLatestScanAllMetricsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetLatestScanAllMetricsInternalServerError creates GetLatestScanAllMetricsInternalServerError with default headers values
func NewGetLatestScanAllMetricsInternalServerError() *GetLatestScanAllMetricsInternalServerError {

	return &GetLatestScanAllMetricsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get latest scan all metrics internal server error response
func (o *GetLatestScanAllMetricsInternalServerError) WithXRequestID(xRequestID string) *GetLatestScanAllMetricsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get latest scan all metrics internal server error response
func (o *GetLatestScanAllMetricsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get latest scan all metrics internal server error response
func (o *GetLatestScanAllMetricsInternalServerError) WithPayload(payload *models.Errors) *GetLatestScanAllMetricsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get latest scan all metrics internal server error response
func (o *GetLatestScanAllMetricsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLatestScanAllMetricsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
