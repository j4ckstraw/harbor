// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateProjectMemberCreatedCode is the HTTP code returned for type CreateProjectMemberCreated
const CreateProjectMemberCreatedCode int = 201

/*CreateProjectMemberCreated Project member created successfully.

swagger:response createProjectMemberCreated
*/
type CreateProjectMemberCreated struct {
	/*The URL of the created resource

	 */
	Location string `json:"Location"`
}

// NewCreateProjectMemberCreated creates CreateProjectMemberCreated with default headers values
func NewCreateProjectMemberCreated() *CreateProjectMemberCreated {

	return &CreateProjectMemberCreated{}
}

// WithLocation adds the location to the create project member created response
func (o *CreateProjectMemberCreated) WithLocation(location string) *CreateProjectMemberCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create project member created response
func (o *CreateProjectMemberCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *CreateProjectMemberCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateProjectMemberBadRequestCode is the HTTP code returned for type CreateProjectMemberBadRequest
const CreateProjectMemberBadRequestCode int = 400

/*CreateProjectMemberBadRequest Bad request

swagger:response createProjectMemberBadRequest
*/
type CreateProjectMemberBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectMemberBadRequest creates CreateProjectMemberBadRequest with default headers values
func NewCreateProjectMemberBadRequest() *CreateProjectMemberBadRequest {

	return &CreateProjectMemberBadRequest{}
}

// WithXRequestID adds the xRequestId to the create project member bad request response
func (o *CreateProjectMemberBadRequest) WithXRequestID(xRequestID string) *CreateProjectMemberBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project member bad request response
func (o *CreateProjectMemberBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project member bad request response
func (o *CreateProjectMemberBadRequest) WithPayload(payload *models.Errors) *CreateProjectMemberBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project member bad request response
func (o *CreateProjectMemberBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectMemberBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectMemberUnauthorizedCode is the HTTP code returned for type CreateProjectMemberUnauthorized
const CreateProjectMemberUnauthorizedCode int = 401

/*CreateProjectMemberUnauthorized Unauthorized

swagger:response createProjectMemberUnauthorized
*/
type CreateProjectMemberUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectMemberUnauthorized creates CreateProjectMemberUnauthorized with default headers values
func NewCreateProjectMemberUnauthorized() *CreateProjectMemberUnauthorized {

	return &CreateProjectMemberUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create project member unauthorized response
func (o *CreateProjectMemberUnauthorized) WithXRequestID(xRequestID string) *CreateProjectMemberUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project member unauthorized response
func (o *CreateProjectMemberUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project member unauthorized response
func (o *CreateProjectMemberUnauthorized) WithPayload(payload *models.Errors) *CreateProjectMemberUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project member unauthorized response
func (o *CreateProjectMemberUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectMemberUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectMemberForbiddenCode is the HTTP code returned for type CreateProjectMemberForbidden
const CreateProjectMemberForbiddenCode int = 403

/*CreateProjectMemberForbidden Forbidden

swagger:response createProjectMemberForbidden
*/
type CreateProjectMemberForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectMemberForbidden creates CreateProjectMemberForbidden with default headers values
func NewCreateProjectMemberForbidden() *CreateProjectMemberForbidden {

	return &CreateProjectMemberForbidden{}
}

// WithXRequestID adds the xRequestId to the create project member forbidden response
func (o *CreateProjectMemberForbidden) WithXRequestID(xRequestID string) *CreateProjectMemberForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project member forbidden response
func (o *CreateProjectMemberForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project member forbidden response
func (o *CreateProjectMemberForbidden) WithPayload(payload *models.Errors) *CreateProjectMemberForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project member forbidden response
func (o *CreateProjectMemberForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectMemberForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectMemberConflictCode is the HTTP code returned for type CreateProjectMemberConflict
const CreateProjectMemberConflictCode int = 409

/*CreateProjectMemberConflict Conflict

swagger:response createProjectMemberConflict
*/
type CreateProjectMemberConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectMemberConflict creates CreateProjectMemberConflict with default headers values
func NewCreateProjectMemberConflict() *CreateProjectMemberConflict {

	return &CreateProjectMemberConflict{}
}

// WithXRequestID adds the xRequestId to the create project member conflict response
func (o *CreateProjectMemberConflict) WithXRequestID(xRequestID string) *CreateProjectMemberConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project member conflict response
func (o *CreateProjectMemberConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project member conflict response
func (o *CreateProjectMemberConflict) WithPayload(payload *models.Errors) *CreateProjectMemberConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project member conflict response
func (o *CreateProjectMemberConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectMemberConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectMemberInternalServerErrorCode is the HTTP code returned for type CreateProjectMemberInternalServerError
const CreateProjectMemberInternalServerErrorCode int = 500

/*CreateProjectMemberInternalServerError Internal server error

swagger:response createProjectMemberInternalServerError
*/
type CreateProjectMemberInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateProjectMemberInternalServerError creates CreateProjectMemberInternalServerError with default headers values
func NewCreateProjectMemberInternalServerError() *CreateProjectMemberInternalServerError {

	return &CreateProjectMemberInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create project member internal server error response
func (o *CreateProjectMemberInternalServerError) WithXRequestID(xRequestID string) *CreateProjectMemberInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create project member internal server error response
func (o *CreateProjectMemberInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create project member internal server error response
func (o *CreateProjectMemberInternalServerError) WithPayload(payload *models.Errors) *CreateProjectMemberInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project member internal server error response
func (o *CreateProjectMemberInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectMemberInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
