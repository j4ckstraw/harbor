// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateProjectMemberHandlerFunc turns a function with the right signature into a create project member handler
type CreateProjectMemberHandlerFunc func(CreateProjectMemberParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateProjectMemberHandlerFunc) Handle(params CreateProjectMemberParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateProjectMemberHandler interface for that can handle valid create project member params
type CreateProjectMemberHandler interface {
	Handle(CreateProjectMemberParams, interface{}) middleware.Responder
}

// NewCreateProjectMember creates a new http.Handler for the create project member operation
func NewCreateProjectMember(ctx *middleware.Context, handler CreateProjectMemberHandler) *CreateProjectMember {
	return &CreateProjectMember{Context: ctx, Handler: handler}
}

/*CreateProjectMember swagger:route POST /projects/{project_name_or_id}/members member createProjectMember

Create project member

Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group.

*/
type CreateProjectMember struct {
	Context *middleware.Context
	Handler CreateProjectMemberHandler
}

func (o *CreateProjectMember) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateProjectMemberParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
