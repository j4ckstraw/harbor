// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListProjectMembersOKCode is the HTTP code returned for type ListProjectMembersOK
const ListProjectMembersOKCode int = 200

/*ListProjectMembersOK Get project members successfully.

swagger:response listProjectMembersOK
*/
type ListProjectMembersOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of members

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ProjectMemberEntity `json:"body,omitempty"`
}

// NewListProjectMembersOK creates ListProjectMembersOK with default headers values
func NewListProjectMembersOK() *ListProjectMembersOK {

	return &ListProjectMembersOK{}
}

// WithLink adds the link to the list project members o k response
func (o *ListProjectMembersOK) WithLink(link string) *ListProjectMembersOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list project members o k response
func (o *ListProjectMembersOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list project members o k response
func (o *ListProjectMembersOK) WithXTotalCount(xTotalCount int64) *ListProjectMembersOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list project members o k response
func (o *ListProjectMembersOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list project members o k response
func (o *ListProjectMembersOK) WithPayload(payload []*models.ProjectMemberEntity) *ListProjectMembersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project members o k response
func (o *ListProjectMembersOK) SetPayload(payload []*models.ProjectMemberEntity) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMembersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ProjectMemberEntity, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListProjectMembersBadRequestCode is the HTTP code returned for type ListProjectMembersBadRequest
const ListProjectMembersBadRequestCode int = 400

/*ListProjectMembersBadRequest Bad request

swagger:response listProjectMembersBadRequest
*/
type ListProjectMembersBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMembersBadRequest creates ListProjectMembersBadRequest with default headers values
func NewListProjectMembersBadRequest() *ListProjectMembersBadRequest {

	return &ListProjectMembersBadRequest{}
}

// WithXRequestID adds the xRequestId to the list project members bad request response
func (o *ListProjectMembersBadRequest) WithXRequestID(xRequestID string) *ListProjectMembersBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project members bad request response
func (o *ListProjectMembersBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project members bad request response
func (o *ListProjectMembersBadRequest) WithPayload(payload *models.Errors) *ListProjectMembersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project members bad request response
func (o *ListProjectMembersBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMembersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMembersUnauthorizedCode is the HTTP code returned for type ListProjectMembersUnauthorized
const ListProjectMembersUnauthorizedCode int = 401

/*ListProjectMembersUnauthorized Unauthorized

swagger:response listProjectMembersUnauthorized
*/
type ListProjectMembersUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMembersUnauthorized creates ListProjectMembersUnauthorized with default headers values
func NewListProjectMembersUnauthorized() *ListProjectMembersUnauthorized {

	return &ListProjectMembersUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list project members unauthorized response
func (o *ListProjectMembersUnauthorized) WithXRequestID(xRequestID string) *ListProjectMembersUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project members unauthorized response
func (o *ListProjectMembersUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project members unauthorized response
func (o *ListProjectMembersUnauthorized) WithPayload(payload *models.Errors) *ListProjectMembersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project members unauthorized response
func (o *ListProjectMembersUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMembersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMembersForbiddenCode is the HTTP code returned for type ListProjectMembersForbidden
const ListProjectMembersForbiddenCode int = 403

/*ListProjectMembersForbidden Forbidden

swagger:response listProjectMembersForbidden
*/
type ListProjectMembersForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMembersForbidden creates ListProjectMembersForbidden with default headers values
func NewListProjectMembersForbidden() *ListProjectMembersForbidden {

	return &ListProjectMembersForbidden{}
}

// WithXRequestID adds the xRequestId to the list project members forbidden response
func (o *ListProjectMembersForbidden) WithXRequestID(xRequestID string) *ListProjectMembersForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project members forbidden response
func (o *ListProjectMembersForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project members forbidden response
func (o *ListProjectMembersForbidden) WithPayload(payload *models.Errors) *ListProjectMembersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project members forbidden response
func (o *ListProjectMembersForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMembersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMembersNotFoundCode is the HTTP code returned for type ListProjectMembersNotFound
const ListProjectMembersNotFoundCode int = 404

/*ListProjectMembersNotFound Not found

swagger:response listProjectMembersNotFound
*/
type ListProjectMembersNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMembersNotFound creates ListProjectMembersNotFound with default headers values
func NewListProjectMembersNotFound() *ListProjectMembersNotFound {

	return &ListProjectMembersNotFound{}
}

// WithXRequestID adds the xRequestId to the list project members not found response
func (o *ListProjectMembersNotFound) WithXRequestID(xRequestID string) *ListProjectMembersNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project members not found response
func (o *ListProjectMembersNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project members not found response
func (o *ListProjectMembersNotFound) WithPayload(payload *models.Errors) *ListProjectMembersNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project members not found response
func (o *ListProjectMembersNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMembersNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMembersInternalServerErrorCode is the HTTP code returned for type ListProjectMembersInternalServerError
const ListProjectMembersInternalServerErrorCode int = 500

/*ListProjectMembersInternalServerError Internal server error

swagger:response listProjectMembersInternalServerError
*/
type ListProjectMembersInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMembersInternalServerError creates ListProjectMembersInternalServerError with default headers values
func NewListProjectMembersInternalServerError() *ListProjectMembersInternalServerError {

	return &ListProjectMembersInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list project members internal server error response
func (o *ListProjectMembersInternalServerError) WithXRequestID(xRequestID string) *ListProjectMembersInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project members internal server error response
func (o *ListProjectMembersInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project members internal server error response
func (o *ListProjectMembersInternalServerError) WithPayload(payload *models.Errors) *ListProjectMembersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project members internal server error response
func (o *ListProjectMembersInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMembersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
