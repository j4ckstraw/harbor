// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateQuotaOKCode is the HTTP code returned for type UpdateQuotaOK
const UpdateQuotaOKCode int = 200

/*UpdateQuotaOK Success

swagger:response updateQuotaOK
*/
type UpdateQuotaOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateQuotaOK creates UpdateQuotaOK with default headers values
func NewUpdateQuotaOK() *UpdateQuotaOK {

	return &UpdateQuotaOK{}
}

// WithXRequestID adds the xRequestId to the update quota o k response
func (o *UpdateQuotaOK) WithXRequestID(xRequestID string) *UpdateQuotaOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update quota o k response
func (o *UpdateQuotaOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateQuotaOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateQuotaBadRequestCode is the HTTP code returned for type UpdateQuotaBadRequest
const UpdateQuotaBadRequestCode int = 400

/*UpdateQuotaBadRequest Bad request

swagger:response updateQuotaBadRequest
*/
type UpdateQuotaBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateQuotaBadRequest creates UpdateQuotaBadRequest with default headers values
func NewUpdateQuotaBadRequest() *UpdateQuotaBadRequest {

	return &UpdateQuotaBadRequest{}
}

// WithXRequestID adds the xRequestId to the update quota bad request response
func (o *UpdateQuotaBadRequest) WithXRequestID(xRequestID string) *UpdateQuotaBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update quota bad request response
func (o *UpdateQuotaBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update quota bad request response
func (o *UpdateQuotaBadRequest) WithPayload(payload *models.Errors) *UpdateQuotaBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update quota bad request response
func (o *UpdateQuotaBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateQuotaBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateQuotaUnauthorizedCode is the HTTP code returned for type UpdateQuotaUnauthorized
const UpdateQuotaUnauthorizedCode int = 401

/*UpdateQuotaUnauthorized Unauthorized

swagger:response updateQuotaUnauthorized
*/
type UpdateQuotaUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateQuotaUnauthorized creates UpdateQuotaUnauthorized with default headers values
func NewUpdateQuotaUnauthorized() *UpdateQuotaUnauthorized {

	return &UpdateQuotaUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update quota unauthorized response
func (o *UpdateQuotaUnauthorized) WithXRequestID(xRequestID string) *UpdateQuotaUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update quota unauthorized response
func (o *UpdateQuotaUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update quota unauthorized response
func (o *UpdateQuotaUnauthorized) WithPayload(payload *models.Errors) *UpdateQuotaUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update quota unauthorized response
func (o *UpdateQuotaUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateQuotaUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateQuotaForbiddenCode is the HTTP code returned for type UpdateQuotaForbidden
const UpdateQuotaForbiddenCode int = 403

/*UpdateQuotaForbidden Forbidden

swagger:response updateQuotaForbidden
*/
type UpdateQuotaForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateQuotaForbidden creates UpdateQuotaForbidden with default headers values
func NewUpdateQuotaForbidden() *UpdateQuotaForbidden {

	return &UpdateQuotaForbidden{}
}

// WithXRequestID adds the xRequestId to the update quota forbidden response
func (o *UpdateQuotaForbidden) WithXRequestID(xRequestID string) *UpdateQuotaForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update quota forbidden response
func (o *UpdateQuotaForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update quota forbidden response
func (o *UpdateQuotaForbidden) WithPayload(payload *models.Errors) *UpdateQuotaForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update quota forbidden response
func (o *UpdateQuotaForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateQuotaForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateQuotaNotFoundCode is the HTTP code returned for type UpdateQuotaNotFound
const UpdateQuotaNotFoundCode int = 404

/*UpdateQuotaNotFound Not found

swagger:response updateQuotaNotFound
*/
type UpdateQuotaNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateQuotaNotFound creates UpdateQuotaNotFound with default headers values
func NewUpdateQuotaNotFound() *UpdateQuotaNotFound {

	return &UpdateQuotaNotFound{}
}

// WithXRequestID adds the xRequestId to the update quota not found response
func (o *UpdateQuotaNotFound) WithXRequestID(xRequestID string) *UpdateQuotaNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update quota not found response
func (o *UpdateQuotaNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update quota not found response
func (o *UpdateQuotaNotFound) WithPayload(payload *models.Errors) *UpdateQuotaNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update quota not found response
func (o *UpdateQuotaNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateQuotaNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateQuotaInternalServerErrorCode is the HTTP code returned for type UpdateQuotaInternalServerError
const UpdateQuotaInternalServerErrorCode int = 500

/*UpdateQuotaInternalServerError Internal server error

swagger:response updateQuotaInternalServerError
*/
type UpdateQuotaInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateQuotaInternalServerError creates UpdateQuotaInternalServerError with default headers values
func NewUpdateQuotaInternalServerError() *UpdateQuotaInternalServerError {

	return &UpdateQuotaInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update quota internal server error response
func (o *UpdateQuotaInternalServerError) WithXRequestID(xRequestID string) *UpdateQuotaInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update quota internal server error response
func (o *UpdateQuotaInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update quota internal server error response
func (o *UpdateQuotaInternalServerError) WithPayload(payload *models.Errors) *UpdateQuotaInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update quota internal server error response
func (o *UpdateQuotaInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateQuotaInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
