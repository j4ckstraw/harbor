// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetQuotaOKCode is the HTTP code returned for type GetQuotaOK
const GetQuotaOKCode int = 200

/*GetQuotaOK Successfully retrieved the quota.

swagger:response getQuotaOK
*/
type GetQuotaOK struct {

	/*
	  In: Body
	*/
	Payload *models.Quota `json:"body,omitempty"`
}

// NewGetQuotaOK creates GetQuotaOK with default headers values
func NewGetQuotaOK() *GetQuotaOK {

	return &GetQuotaOK{}
}

// WithPayload adds the payload to the get quota o k response
func (o *GetQuotaOK) WithPayload(payload *models.Quota) *GetQuotaOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quota o k response
func (o *GetQuotaOK) SetPayload(payload *models.Quota) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotaOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuotaUnauthorizedCode is the HTTP code returned for type GetQuotaUnauthorized
const GetQuotaUnauthorizedCode int = 401

/*GetQuotaUnauthorized Unauthorized

swagger:response getQuotaUnauthorized
*/
type GetQuotaUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetQuotaUnauthorized creates GetQuotaUnauthorized with default headers values
func NewGetQuotaUnauthorized() *GetQuotaUnauthorized {

	return &GetQuotaUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get quota unauthorized response
func (o *GetQuotaUnauthorized) WithXRequestID(xRequestID string) *GetQuotaUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get quota unauthorized response
func (o *GetQuotaUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get quota unauthorized response
func (o *GetQuotaUnauthorized) WithPayload(payload *models.Errors) *GetQuotaUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quota unauthorized response
func (o *GetQuotaUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotaUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuotaForbiddenCode is the HTTP code returned for type GetQuotaForbidden
const GetQuotaForbiddenCode int = 403

/*GetQuotaForbidden Forbidden

swagger:response getQuotaForbidden
*/
type GetQuotaForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetQuotaForbidden creates GetQuotaForbidden with default headers values
func NewGetQuotaForbidden() *GetQuotaForbidden {

	return &GetQuotaForbidden{}
}

// WithXRequestID adds the xRequestId to the get quota forbidden response
func (o *GetQuotaForbidden) WithXRequestID(xRequestID string) *GetQuotaForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get quota forbidden response
func (o *GetQuotaForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get quota forbidden response
func (o *GetQuotaForbidden) WithPayload(payload *models.Errors) *GetQuotaForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quota forbidden response
func (o *GetQuotaForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotaForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuotaNotFoundCode is the HTTP code returned for type GetQuotaNotFound
const GetQuotaNotFoundCode int = 404

/*GetQuotaNotFound Not found

swagger:response getQuotaNotFound
*/
type GetQuotaNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetQuotaNotFound creates GetQuotaNotFound with default headers values
func NewGetQuotaNotFound() *GetQuotaNotFound {

	return &GetQuotaNotFound{}
}

// WithXRequestID adds the xRequestId to the get quota not found response
func (o *GetQuotaNotFound) WithXRequestID(xRequestID string) *GetQuotaNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get quota not found response
func (o *GetQuotaNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get quota not found response
func (o *GetQuotaNotFound) WithPayload(payload *models.Errors) *GetQuotaNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quota not found response
func (o *GetQuotaNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotaNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuotaInternalServerErrorCode is the HTTP code returned for type GetQuotaInternalServerError
const GetQuotaInternalServerErrorCode int = 500

/*GetQuotaInternalServerError Internal server error

swagger:response getQuotaInternalServerError
*/
type GetQuotaInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetQuotaInternalServerError creates GetQuotaInternalServerError with default headers values
func NewGetQuotaInternalServerError() *GetQuotaInternalServerError {

	return &GetQuotaInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get quota internal server error response
func (o *GetQuotaInternalServerError) WithXRequestID(xRequestID string) *GetQuotaInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get quota internal server error response
func (o *GetQuotaInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get quota internal server error response
func (o *GetQuotaInternalServerError) WithPayload(payload *models.Errors) *GetQuotaInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quota internal server error response
func (o *GetQuotaInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotaInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
