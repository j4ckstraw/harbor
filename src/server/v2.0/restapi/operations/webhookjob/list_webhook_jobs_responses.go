// Code generated by go-swagger; DO NOT EDIT.

package webhookjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListWebhookJobsOKCode is the HTTP code returned for type ListWebhookJobsOK
const ListWebhookJobsOKCode int = 200

/*ListWebhookJobsOK List project webhook jobs successfully.

swagger:response listWebhookJobsOK
*/
type ListWebhookJobsOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.WebhookJob `json:"body,omitempty"`
}

// NewListWebhookJobsOK creates ListWebhookJobsOK with default headers values
func NewListWebhookJobsOK() *ListWebhookJobsOK {

	return &ListWebhookJobsOK{}
}

// WithLink adds the link to the list webhook jobs o k response
func (o *ListWebhookJobsOK) WithLink(link string) *ListWebhookJobsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list webhook jobs o k response
func (o *ListWebhookJobsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list webhook jobs o k response
func (o *ListWebhookJobsOK) WithXTotalCount(xTotalCount int64) *ListWebhookJobsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list webhook jobs o k response
func (o *ListWebhookJobsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list webhook jobs o k response
func (o *ListWebhookJobsOK) WithPayload(payload []*models.WebhookJob) *ListWebhookJobsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook jobs o k response
func (o *ListWebhookJobsOK) SetPayload(payload []*models.WebhookJob) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookJobsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.WebhookJob, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListWebhookJobsBadRequestCode is the HTTP code returned for type ListWebhookJobsBadRequest
const ListWebhookJobsBadRequestCode int = 400

/*ListWebhookJobsBadRequest Bad request

swagger:response listWebhookJobsBadRequest
*/
type ListWebhookJobsBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookJobsBadRequest creates ListWebhookJobsBadRequest with default headers values
func NewListWebhookJobsBadRequest() *ListWebhookJobsBadRequest {

	return &ListWebhookJobsBadRequest{}
}

// WithXRequestID adds the xRequestId to the list webhook jobs bad request response
func (o *ListWebhookJobsBadRequest) WithXRequestID(xRequestID string) *ListWebhookJobsBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook jobs bad request response
func (o *ListWebhookJobsBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook jobs bad request response
func (o *ListWebhookJobsBadRequest) WithPayload(payload *models.Errors) *ListWebhookJobsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook jobs bad request response
func (o *ListWebhookJobsBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookJobsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWebhookJobsUnauthorizedCode is the HTTP code returned for type ListWebhookJobsUnauthorized
const ListWebhookJobsUnauthorizedCode int = 401

/*ListWebhookJobsUnauthorized Unauthorized

swagger:response listWebhookJobsUnauthorized
*/
type ListWebhookJobsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookJobsUnauthorized creates ListWebhookJobsUnauthorized with default headers values
func NewListWebhookJobsUnauthorized() *ListWebhookJobsUnauthorized {

	return &ListWebhookJobsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list webhook jobs unauthorized response
func (o *ListWebhookJobsUnauthorized) WithXRequestID(xRequestID string) *ListWebhookJobsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook jobs unauthorized response
func (o *ListWebhookJobsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook jobs unauthorized response
func (o *ListWebhookJobsUnauthorized) WithPayload(payload *models.Errors) *ListWebhookJobsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook jobs unauthorized response
func (o *ListWebhookJobsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookJobsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWebhookJobsForbiddenCode is the HTTP code returned for type ListWebhookJobsForbidden
const ListWebhookJobsForbiddenCode int = 403

/*ListWebhookJobsForbidden Forbidden

swagger:response listWebhookJobsForbidden
*/
type ListWebhookJobsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookJobsForbidden creates ListWebhookJobsForbidden with default headers values
func NewListWebhookJobsForbidden() *ListWebhookJobsForbidden {

	return &ListWebhookJobsForbidden{}
}

// WithXRequestID adds the xRequestId to the list webhook jobs forbidden response
func (o *ListWebhookJobsForbidden) WithXRequestID(xRequestID string) *ListWebhookJobsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook jobs forbidden response
func (o *ListWebhookJobsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook jobs forbidden response
func (o *ListWebhookJobsForbidden) WithPayload(payload *models.Errors) *ListWebhookJobsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook jobs forbidden response
func (o *ListWebhookJobsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookJobsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWebhookJobsInternalServerErrorCode is the HTTP code returned for type ListWebhookJobsInternalServerError
const ListWebhookJobsInternalServerErrorCode int = 500

/*ListWebhookJobsInternalServerError Internal server error

swagger:response listWebhookJobsInternalServerError
*/
type ListWebhookJobsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookJobsInternalServerError creates ListWebhookJobsInternalServerError with default headers values
func NewListWebhookJobsInternalServerError() *ListWebhookJobsInternalServerError {

	return &ListWebhookJobsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list webhook jobs internal server error response
func (o *ListWebhookJobsInternalServerError) WithXRequestID(xRequestID string) *ListWebhookJobsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook jobs internal server error response
func (o *ListWebhookJobsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook jobs internal server error response
func (o *ListWebhookJobsInternalServerError) WithPayload(payload *models.Errors) *ListWebhookJobsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook jobs internal server error response
func (o *ListWebhookJobsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookJobsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
