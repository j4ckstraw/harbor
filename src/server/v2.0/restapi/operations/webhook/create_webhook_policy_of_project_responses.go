// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateWebhookPolicyOfProjectCreatedCode is the HTTP code returned for type CreateWebhookPolicyOfProjectCreated
const CreateWebhookPolicyOfProjectCreatedCode int = 201

/*CreateWebhookPolicyOfProjectCreated Project webhook policy create successfully.

swagger:response createWebhookPolicyOfProjectCreated
*/
type CreateWebhookPolicyOfProjectCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreateWebhookPolicyOfProjectCreated creates CreateWebhookPolicyOfProjectCreated with default headers values
func NewCreateWebhookPolicyOfProjectCreated() *CreateWebhookPolicyOfProjectCreated {

	return &CreateWebhookPolicyOfProjectCreated{}
}

// WithLocation adds the location to the create webhook policy of project created response
func (o *CreateWebhookPolicyOfProjectCreated) WithLocation(location string) *CreateWebhookPolicyOfProjectCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create webhook policy of project created response
func (o *CreateWebhookPolicyOfProjectCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create webhook policy of project created response
func (o *CreateWebhookPolicyOfProjectCreated) WithXRequestID(xRequestID string) *CreateWebhookPolicyOfProjectCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create webhook policy of project created response
func (o *CreateWebhookPolicyOfProjectCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreateWebhookPolicyOfProjectCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateWebhookPolicyOfProjectBadRequestCode is the HTTP code returned for type CreateWebhookPolicyOfProjectBadRequest
const CreateWebhookPolicyOfProjectBadRequestCode int = 400

/*CreateWebhookPolicyOfProjectBadRequest Bad request

swagger:response createWebhookPolicyOfProjectBadRequest
*/
type CreateWebhookPolicyOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateWebhookPolicyOfProjectBadRequest creates CreateWebhookPolicyOfProjectBadRequest with default headers values
func NewCreateWebhookPolicyOfProjectBadRequest() *CreateWebhookPolicyOfProjectBadRequest {

	return &CreateWebhookPolicyOfProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the create webhook policy of project bad request response
func (o *CreateWebhookPolicyOfProjectBadRequest) WithXRequestID(xRequestID string) *CreateWebhookPolicyOfProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create webhook policy of project bad request response
func (o *CreateWebhookPolicyOfProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create webhook policy of project bad request response
func (o *CreateWebhookPolicyOfProjectBadRequest) WithPayload(payload *models.Errors) *CreateWebhookPolicyOfProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create webhook policy of project bad request response
func (o *CreateWebhookPolicyOfProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWebhookPolicyOfProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWebhookPolicyOfProjectUnauthorizedCode is the HTTP code returned for type CreateWebhookPolicyOfProjectUnauthorized
const CreateWebhookPolicyOfProjectUnauthorizedCode int = 401

/*CreateWebhookPolicyOfProjectUnauthorized Unauthorized

swagger:response createWebhookPolicyOfProjectUnauthorized
*/
type CreateWebhookPolicyOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateWebhookPolicyOfProjectUnauthorized creates CreateWebhookPolicyOfProjectUnauthorized with default headers values
func NewCreateWebhookPolicyOfProjectUnauthorized() *CreateWebhookPolicyOfProjectUnauthorized {

	return &CreateWebhookPolicyOfProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create webhook policy of project unauthorized response
func (o *CreateWebhookPolicyOfProjectUnauthorized) WithXRequestID(xRequestID string) *CreateWebhookPolicyOfProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create webhook policy of project unauthorized response
func (o *CreateWebhookPolicyOfProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create webhook policy of project unauthorized response
func (o *CreateWebhookPolicyOfProjectUnauthorized) WithPayload(payload *models.Errors) *CreateWebhookPolicyOfProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create webhook policy of project unauthorized response
func (o *CreateWebhookPolicyOfProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWebhookPolicyOfProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWebhookPolicyOfProjectForbiddenCode is the HTTP code returned for type CreateWebhookPolicyOfProjectForbidden
const CreateWebhookPolicyOfProjectForbiddenCode int = 403

/*CreateWebhookPolicyOfProjectForbidden Forbidden

swagger:response createWebhookPolicyOfProjectForbidden
*/
type CreateWebhookPolicyOfProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateWebhookPolicyOfProjectForbidden creates CreateWebhookPolicyOfProjectForbidden with default headers values
func NewCreateWebhookPolicyOfProjectForbidden() *CreateWebhookPolicyOfProjectForbidden {

	return &CreateWebhookPolicyOfProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the create webhook policy of project forbidden response
func (o *CreateWebhookPolicyOfProjectForbidden) WithXRequestID(xRequestID string) *CreateWebhookPolicyOfProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create webhook policy of project forbidden response
func (o *CreateWebhookPolicyOfProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create webhook policy of project forbidden response
func (o *CreateWebhookPolicyOfProjectForbidden) WithPayload(payload *models.Errors) *CreateWebhookPolicyOfProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create webhook policy of project forbidden response
func (o *CreateWebhookPolicyOfProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWebhookPolicyOfProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWebhookPolicyOfProjectInternalServerErrorCode is the HTTP code returned for type CreateWebhookPolicyOfProjectInternalServerError
const CreateWebhookPolicyOfProjectInternalServerErrorCode int = 500

/*CreateWebhookPolicyOfProjectInternalServerError Internal server error

swagger:response createWebhookPolicyOfProjectInternalServerError
*/
type CreateWebhookPolicyOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateWebhookPolicyOfProjectInternalServerError creates CreateWebhookPolicyOfProjectInternalServerError with default headers values
func NewCreateWebhookPolicyOfProjectInternalServerError() *CreateWebhookPolicyOfProjectInternalServerError {

	return &CreateWebhookPolicyOfProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create webhook policy of project internal server error response
func (o *CreateWebhookPolicyOfProjectInternalServerError) WithXRequestID(xRequestID string) *CreateWebhookPolicyOfProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create webhook policy of project internal server error response
func (o *CreateWebhookPolicyOfProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create webhook policy of project internal server error response
func (o *CreateWebhookPolicyOfProjectInternalServerError) WithPayload(payload *models.Errors) *CreateWebhookPolicyOfProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create webhook policy of project internal server error response
func (o *CreateWebhookPolicyOfProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWebhookPolicyOfProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
