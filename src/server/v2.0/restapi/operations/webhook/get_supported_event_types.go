// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSupportedEventTypesHandlerFunc turns a function with the right signature into a get supported event types handler
type GetSupportedEventTypesHandlerFunc func(GetSupportedEventTypesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSupportedEventTypesHandlerFunc) Handle(params GetSupportedEventTypesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetSupportedEventTypesHandler interface for that can handle valid get supported event types params
type GetSupportedEventTypesHandler interface {
	Handle(GetSupportedEventTypesParams, interface{}) middleware.Responder
}

// NewGetSupportedEventTypes creates a new http.Handler for the get supported event types operation
func NewGetSupportedEventTypes(ctx *middleware.Context, handler GetSupportedEventTypesHandler) *GetSupportedEventTypes {
	return &GetSupportedEventTypes{Context: ctx, Handler: handler}
}

/*GetSupportedEventTypes swagger:route GET /projects/{project_name_or_id}/webhook/events webhook getSupportedEventTypes

Get supported event types and notify types.

Get supportted event types and notify types.

*/
type GetSupportedEventTypes struct {
	Context *middleware.Context
	Handler GetSupportedEventTypesHandler
}

func (o *GetSupportedEventTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSupportedEventTypesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
