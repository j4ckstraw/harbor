// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteWebhookPolicyOfProjectOKCode is the HTTP code returned for type DeleteWebhookPolicyOfProjectOK
const DeleteWebhookPolicyOfProjectOKCode int = 200

/*DeleteWebhookPolicyOfProjectOK Success

swagger:response deleteWebhookPolicyOfProjectOK
*/
type DeleteWebhookPolicyOfProjectOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteWebhookPolicyOfProjectOK creates DeleteWebhookPolicyOfProjectOK with default headers values
func NewDeleteWebhookPolicyOfProjectOK() *DeleteWebhookPolicyOfProjectOK {

	return &DeleteWebhookPolicyOfProjectOK{}
}

// WithXRequestID adds the xRequestId to the delete webhook policy of project o k response
func (o *DeleteWebhookPolicyOfProjectOK) WithXRequestID(xRequestID string) *DeleteWebhookPolicyOfProjectOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete webhook policy of project o k response
func (o *DeleteWebhookPolicyOfProjectOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteWebhookPolicyOfProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteWebhookPolicyOfProjectBadRequestCode is the HTTP code returned for type DeleteWebhookPolicyOfProjectBadRequest
const DeleteWebhookPolicyOfProjectBadRequestCode int = 400

/*DeleteWebhookPolicyOfProjectBadRequest Bad request

swagger:response deleteWebhookPolicyOfProjectBadRequest
*/
type DeleteWebhookPolicyOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteWebhookPolicyOfProjectBadRequest creates DeleteWebhookPolicyOfProjectBadRequest with default headers values
func NewDeleteWebhookPolicyOfProjectBadRequest() *DeleteWebhookPolicyOfProjectBadRequest {

	return &DeleteWebhookPolicyOfProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete webhook policy of project bad request response
func (o *DeleteWebhookPolicyOfProjectBadRequest) WithXRequestID(xRequestID string) *DeleteWebhookPolicyOfProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete webhook policy of project bad request response
func (o *DeleteWebhookPolicyOfProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete webhook policy of project bad request response
func (o *DeleteWebhookPolicyOfProjectBadRequest) WithPayload(payload *models.Errors) *DeleteWebhookPolicyOfProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete webhook policy of project bad request response
func (o *DeleteWebhookPolicyOfProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteWebhookPolicyOfProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteWebhookPolicyOfProjectUnauthorizedCode is the HTTP code returned for type DeleteWebhookPolicyOfProjectUnauthorized
const DeleteWebhookPolicyOfProjectUnauthorizedCode int = 401

/*DeleteWebhookPolicyOfProjectUnauthorized Unauthorized

swagger:response deleteWebhookPolicyOfProjectUnauthorized
*/
type DeleteWebhookPolicyOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteWebhookPolicyOfProjectUnauthorized creates DeleteWebhookPolicyOfProjectUnauthorized with default headers values
func NewDeleteWebhookPolicyOfProjectUnauthorized() *DeleteWebhookPolicyOfProjectUnauthorized {

	return &DeleteWebhookPolicyOfProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete webhook policy of project unauthorized response
func (o *DeleteWebhookPolicyOfProjectUnauthorized) WithXRequestID(xRequestID string) *DeleteWebhookPolicyOfProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete webhook policy of project unauthorized response
func (o *DeleteWebhookPolicyOfProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete webhook policy of project unauthorized response
func (o *DeleteWebhookPolicyOfProjectUnauthorized) WithPayload(payload *models.Errors) *DeleteWebhookPolicyOfProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete webhook policy of project unauthorized response
func (o *DeleteWebhookPolicyOfProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteWebhookPolicyOfProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteWebhookPolicyOfProjectForbiddenCode is the HTTP code returned for type DeleteWebhookPolicyOfProjectForbidden
const DeleteWebhookPolicyOfProjectForbiddenCode int = 403

/*DeleteWebhookPolicyOfProjectForbidden Forbidden

swagger:response deleteWebhookPolicyOfProjectForbidden
*/
type DeleteWebhookPolicyOfProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteWebhookPolicyOfProjectForbidden creates DeleteWebhookPolicyOfProjectForbidden with default headers values
func NewDeleteWebhookPolicyOfProjectForbidden() *DeleteWebhookPolicyOfProjectForbidden {

	return &DeleteWebhookPolicyOfProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the delete webhook policy of project forbidden response
func (o *DeleteWebhookPolicyOfProjectForbidden) WithXRequestID(xRequestID string) *DeleteWebhookPolicyOfProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete webhook policy of project forbidden response
func (o *DeleteWebhookPolicyOfProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete webhook policy of project forbidden response
func (o *DeleteWebhookPolicyOfProjectForbidden) WithPayload(payload *models.Errors) *DeleteWebhookPolicyOfProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete webhook policy of project forbidden response
func (o *DeleteWebhookPolicyOfProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteWebhookPolicyOfProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteWebhookPolicyOfProjectNotFoundCode is the HTTP code returned for type DeleteWebhookPolicyOfProjectNotFound
const DeleteWebhookPolicyOfProjectNotFoundCode int = 404

/*DeleteWebhookPolicyOfProjectNotFound Not found

swagger:response deleteWebhookPolicyOfProjectNotFound
*/
type DeleteWebhookPolicyOfProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteWebhookPolicyOfProjectNotFound creates DeleteWebhookPolicyOfProjectNotFound with default headers values
func NewDeleteWebhookPolicyOfProjectNotFound() *DeleteWebhookPolicyOfProjectNotFound {

	return &DeleteWebhookPolicyOfProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the delete webhook policy of project not found response
func (o *DeleteWebhookPolicyOfProjectNotFound) WithXRequestID(xRequestID string) *DeleteWebhookPolicyOfProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete webhook policy of project not found response
func (o *DeleteWebhookPolicyOfProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete webhook policy of project not found response
func (o *DeleteWebhookPolicyOfProjectNotFound) WithPayload(payload *models.Errors) *DeleteWebhookPolicyOfProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete webhook policy of project not found response
func (o *DeleteWebhookPolicyOfProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteWebhookPolicyOfProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteWebhookPolicyOfProjectInternalServerErrorCode is the HTTP code returned for type DeleteWebhookPolicyOfProjectInternalServerError
const DeleteWebhookPolicyOfProjectInternalServerErrorCode int = 500

/*DeleteWebhookPolicyOfProjectInternalServerError Internal server error

swagger:response deleteWebhookPolicyOfProjectInternalServerError
*/
type DeleteWebhookPolicyOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteWebhookPolicyOfProjectInternalServerError creates DeleteWebhookPolicyOfProjectInternalServerError with default headers values
func NewDeleteWebhookPolicyOfProjectInternalServerError() *DeleteWebhookPolicyOfProjectInternalServerError {

	return &DeleteWebhookPolicyOfProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete webhook policy of project internal server error response
func (o *DeleteWebhookPolicyOfProjectInternalServerError) WithXRequestID(xRequestID string) *DeleteWebhookPolicyOfProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete webhook policy of project internal server error response
func (o *DeleteWebhookPolicyOfProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete webhook policy of project internal server error response
func (o *DeleteWebhookPolicyOfProjectInternalServerError) WithPayload(payload *models.Errors) *DeleteWebhookPolicyOfProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete webhook policy of project internal server error response
func (o *DeleteWebhookPolicyOfProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteWebhookPolicyOfProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
