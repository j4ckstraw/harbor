// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetWebhookPolicyOfProjectOKCode is the HTTP code returned for type GetWebhookPolicyOfProjectOK
const GetWebhookPolicyOfProjectOKCode int = 200

/*GetWebhookPolicyOfProjectOK Get webhook policy successfully.

swagger:response getWebhookPolicyOfProjectOK
*/
type GetWebhookPolicyOfProjectOK struct {

	/*
	  In: Body
	*/
	Payload *models.WebhookPolicy `json:"body,omitempty"`
}

// NewGetWebhookPolicyOfProjectOK creates GetWebhookPolicyOfProjectOK with default headers values
func NewGetWebhookPolicyOfProjectOK() *GetWebhookPolicyOfProjectOK {

	return &GetWebhookPolicyOfProjectOK{}
}

// WithPayload adds the payload to the get webhook policy of project o k response
func (o *GetWebhookPolicyOfProjectOK) WithPayload(payload *models.WebhookPolicy) *GetWebhookPolicyOfProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get webhook policy of project o k response
func (o *GetWebhookPolicyOfProjectOK) SetPayload(payload *models.WebhookPolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWebhookPolicyOfProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWebhookPolicyOfProjectBadRequestCode is the HTTP code returned for type GetWebhookPolicyOfProjectBadRequest
const GetWebhookPolicyOfProjectBadRequestCode int = 400

/*GetWebhookPolicyOfProjectBadRequest Bad request

swagger:response getWebhookPolicyOfProjectBadRequest
*/
type GetWebhookPolicyOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWebhookPolicyOfProjectBadRequest creates GetWebhookPolicyOfProjectBadRequest with default headers values
func NewGetWebhookPolicyOfProjectBadRequest() *GetWebhookPolicyOfProjectBadRequest {

	return &GetWebhookPolicyOfProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the get webhook policy of project bad request response
func (o *GetWebhookPolicyOfProjectBadRequest) WithXRequestID(xRequestID string) *GetWebhookPolicyOfProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get webhook policy of project bad request response
func (o *GetWebhookPolicyOfProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get webhook policy of project bad request response
func (o *GetWebhookPolicyOfProjectBadRequest) WithPayload(payload *models.Errors) *GetWebhookPolicyOfProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get webhook policy of project bad request response
func (o *GetWebhookPolicyOfProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWebhookPolicyOfProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWebhookPolicyOfProjectUnauthorizedCode is the HTTP code returned for type GetWebhookPolicyOfProjectUnauthorized
const GetWebhookPolicyOfProjectUnauthorizedCode int = 401

/*GetWebhookPolicyOfProjectUnauthorized Unauthorized

swagger:response getWebhookPolicyOfProjectUnauthorized
*/
type GetWebhookPolicyOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWebhookPolicyOfProjectUnauthorized creates GetWebhookPolicyOfProjectUnauthorized with default headers values
func NewGetWebhookPolicyOfProjectUnauthorized() *GetWebhookPolicyOfProjectUnauthorized {

	return &GetWebhookPolicyOfProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get webhook policy of project unauthorized response
func (o *GetWebhookPolicyOfProjectUnauthorized) WithXRequestID(xRequestID string) *GetWebhookPolicyOfProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get webhook policy of project unauthorized response
func (o *GetWebhookPolicyOfProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get webhook policy of project unauthorized response
func (o *GetWebhookPolicyOfProjectUnauthorized) WithPayload(payload *models.Errors) *GetWebhookPolicyOfProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get webhook policy of project unauthorized response
func (o *GetWebhookPolicyOfProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWebhookPolicyOfProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWebhookPolicyOfProjectForbiddenCode is the HTTP code returned for type GetWebhookPolicyOfProjectForbidden
const GetWebhookPolicyOfProjectForbiddenCode int = 403

/*GetWebhookPolicyOfProjectForbidden Forbidden

swagger:response getWebhookPolicyOfProjectForbidden
*/
type GetWebhookPolicyOfProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWebhookPolicyOfProjectForbidden creates GetWebhookPolicyOfProjectForbidden with default headers values
func NewGetWebhookPolicyOfProjectForbidden() *GetWebhookPolicyOfProjectForbidden {

	return &GetWebhookPolicyOfProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the get webhook policy of project forbidden response
func (o *GetWebhookPolicyOfProjectForbidden) WithXRequestID(xRequestID string) *GetWebhookPolicyOfProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get webhook policy of project forbidden response
func (o *GetWebhookPolicyOfProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get webhook policy of project forbidden response
func (o *GetWebhookPolicyOfProjectForbidden) WithPayload(payload *models.Errors) *GetWebhookPolicyOfProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get webhook policy of project forbidden response
func (o *GetWebhookPolicyOfProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWebhookPolicyOfProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWebhookPolicyOfProjectNotFoundCode is the HTTP code returned for type GetWebhookPolicyOfProjectNotFound
const GetWebhookPolicyOfProjectNotFoundCode int = 404

/*GetWebhookPolicyOfProjectNotFound Not found

swagger:response getWebhookPolicyOfProjectNotFound
*/
type GetWebhookPolicyOfProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWebhookPolicyOfProjectNotFound creates GetWebhookPolicyOfProjectNotFound with default headers values
func NewGetWebhookPolicyOfProjectNotFound() *GetWebhookPolicyOfProjectNotFound {

	return &GetWebhookPolicyOfProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the get webhook policy of project not found response
func (o *GetWebhookPolicyOfProjectNotFound) WithXRequestID(xRequestID string) *GetWebhookPolicyOfProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get webhook policy of project not found response
func (o *GetWebhookPolicyOfProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get webhook policy of project not found response
func (o *GetWebhookPolicyOfProjectNotFound) WithPayload(payload *models.Errors) *GetWebhookPolicyOfProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get webhook policy of project not found response
func (o *GetWebhookPolicyOfProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWebhookPolicyOfProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWebhookPolicyOfProjectInternalServerErrorCode is the HTTP code returned for type GetWebhookPolicyOfProjectInternalServerError
const GetWebhookPolicyOfProjectInternalServerErrorCode int = 500

/*GetWebhookPolicyOfProjectInternalServerError Internal server error

swagger:response getWebhookPolicyOfProjectInternalServerError
*/
type GetWebhookPolicyOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWebhookPolicyOfProjectInternalServerError creates GetWebhookPolicyOfProjectInternalServerError with default headers values
func NewGetWebhookPolicyOfProjectInternalServerError() *GetWebhookPolicyOfProjectInternalServerError {

	return &GetWebhookPolicyOfProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get webhook policy of project internal server error response
func (o *GetWebhookPolicyOfProjectInternalServerError) WithXRequestID(xRequestID string) *GetWebhookPolicyOfProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get webhook policy of project internal server error response
func (o *GetWebhookPolicyOfProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get webhook policy of project internal server error response
func (o *GetWebhookPolicyOfProjectInternalServerError) WithPayload(payload *models.Errors) *GetWebhookPolicyOfProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get webhook policy of project internal server error response
func (o *GetWebhookPolicyOfProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWebhookPolicyOfProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
