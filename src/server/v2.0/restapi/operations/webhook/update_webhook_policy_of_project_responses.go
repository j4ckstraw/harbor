// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateWebhookPolicyOfProjectOKCode is the HTTP code returned for type UpdateWebhookPolicyOfProjectOK
const UpdateWebhookPolicyOfProjectOKCode int = 200

/*UpdateWebhookPolicyOfProjectOK Success

swagger:response updateWebhookPolicyOfProjectOK
*/
type UpdateWebhookPolicyOfProjectOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateWebhookPolicyOfProjectOK creates UpdateWebhookPolicyOfProjectOK with default headers values
func NewUpdateWebhookPolicyOfProjectOK() *UpdateWebhookPolicyOfProjectOK {

	return &UpdateWebhookPolicyOfProjectOK{}
}

// WithXRequestID adds the xRequestId to the update webhook policy of project o k response
func (o *UpdateWebhookPolicyOfProjectOK) WithXRequestID(xRequestID string) *UpdateWebhookPolicyOfProjectOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update webhook policy of project o k response
func (o *UpdateWebhookPolicyOfProjectOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateWebhookPolicyOfProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateWebhookPolicyOfProjectBadRequestCode is the HTTP code returned for type UpdateWebhookPolicyOfProjectBadRequest
const UpdateWebhookPolicyOfProjectBadRequestCode int = 400

/*UpdateWebhookPolicyOfProjectBadRequest Bad request

swagger:response updateWebhookPolicyOfProjectBadRequest
*/
type UpdateWebhookPolicyOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateWebhookPolicyOfProjectBadRequest creates UpdateWebhookPolicyOfProjectBadRequest with default headers values
func NewUpdateWebhookPolicyOfProjectBadRequest() *UpdateWebhookPolicyOfProjectBadRequest {

	return &UpdateWebhookPolicyOfProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the update webhook policy of project bad request response
func (o *UpdateWebhookPolicyOfProjectBadRequest) WithXRequestID(xRequestID string) *UpdateWebhookPolicyOfProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update webhook policy of project bad request response
func (o *UpdateWebhookPolicyOfProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update webhook policy of project bad request response
func (o *UpdateWebhookPolicyOfProjectBadRequest) WithPayload(payload *models.Errors) *UpdateWebhookPolicyOfProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update webhook policy of project bad request response
func (o *UpdateWebhookPolicyOfProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateWebhookPolicyOfProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateWebhookPolicyOfProjectUnauthorizedCode is the HTTP code returned for type UpdateWebhookPolicyOfProjectUnauthorized
const UpdateWebhookPolicyOfProjectUnauthorizedCode int = 401

/*UpdateWebhookPolicyOfProjectUnauthorized Unauthorized

swagger:response updateWebhookPolicyOfProjectUnauthorized
*/
type UpdateWebhookPolicyOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateWebhookPolicyOfProjectUnauthorized creates UpdateWebhookPolicyOfProjectUnauthorized with default headers values
func NewUpdateWebhookPolicyOfProjectUnauthorized() *UpdateWebhookPolicyOfProjectUnauthorized {

	return &UpdateWebhookPolicyOfProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update webhook policy of project unauthorized response
func (o *UpdateWebhookPolicyOfProjectUnauthorized) WithXRequestID(xRequestID string) *UpdateWebhookPolicyOfProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update webhook policy of project unauthorized response
func (o *UpdateWebhookPolicyOfProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update webhook policy of project unauthorized response
func (o *UpdateWebhookPolicyOfProjectUnauthorized) WithPayload(payload *models.Errors) *UpdateWebhookPolicyOfProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update webhook policy of project unauthorized response
func (o *UpdateWebhookPolicyOfProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateWebhookPolicyOfProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateWebhookPolicyOfProjectForbiddenCode is the HTTP code returned for type UpdateWebhookPolicyOfProjectForbidden
const UpdateWebhookPolicyOfProjectForbiddenCode int = 403

/*UpdateWebhookPolicyOfProjectForbidden Forbidden

swagger:response updateWebhookPolicyOfProjectForbidden
*/
type UpdateWebhookPolicyOfProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateWebhookPolicyOfProjectForbidden creates UpdateWebhookPolicyOfProjectForbidden with default headers values
func NewUpdateWebhookPolicyOfProjectForbidden() *UpdateWebhookPolicyOfProjectForbidden {

	return &UpdateWebhookPolicyOfProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the update webhook policy of project forbidden response
func (o *UpdateWebhookPolicyOfProjectForbidden) WithXRequestID(xRequestID string) *UpdateWebhookPolicyOfProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update webhook policy of project forbidden response
func (o *UpdateWebhookPolicyOfProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update webhook policy of project forbidden response
func (o *UpdateWebhookPolicyOfProjectForbidden) WithPayload(payload *models.Errors) *UpdateWebhookPolicyOfProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update webhook policy of project forbidden response
func (o *UpdateWebhookPolicyOfProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateWebhookPolicyOfProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateWebhookPolicyOfProjectNotFoundCode is the HTTP code returned for type UpdateWebhookPolicyOfProjectNotFound
const UpdateWebhookPolicyOfProjectNotFoundCode int = 404

/*UpdateWebhookPolicyOfProjectNotFound Not found

swagger:response updateWebhookPolicyOfProjectNotFound
*/
type UpdateWebhookPolicyOfProjectNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateWebhookPolicyOfProjectNotFound creates UpdateWebhookPolicyOfProjectNotFound with default headers values
func NewUpdateWebhookPolicyOfProjectNotFound() *UpdateWebhookPolicyOfProjectNotFound {

	return &UpdateWebhookPolicyOfProjectNotFound{}
}

// WithXRequestID adds the xRequestId to the update webhook policy of project not found response
func (o *UpdateWebhookPolicyOfProjectNotFound) WithXRequestID(xRequestID string) *UpdateWebhookPolicyOfProjectNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update webhook policy of project not found response
func (o *UpdateWebhookPolicyOfProjectNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update webhook policy of project not found response
func (o *UpdateWebhookPolicyOfProjectNotFound) WithPayload(payload *models.Errors) *UpdateWebhookPolicyOfProjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update webhook policy of project not found response
func (o *UpdateWebhookPolicyOfProjectNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateWebhookPolicyOfProjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateWebhookPolicyOfProjectInternalServerErrorCode is the HTTP code returned for type UpdateWebhookPolicyOfProjectInternalServerError
const UpdateWebhookPolicyOfProjectInternalServerErrorCode int = 500

/*UpdateWebhookPolicyOfProjectInternalServerError Internal server error

swagger:response updateWebhookPolicyOfProjectInternalServerError
*/
type UpdateWebhookPolicyOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateWebhookPolicyOfProjectInternalServerError creates UpdateWebhookPolicyOfProjectInternalServerError with default headers values
func NewUpdateWebhookPolicyOfProjectInternalServerError() *UpdateWebhookPolicyOfProjectInternalServerError {

	return &UpdateWebhookPolicyOfProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update webhook policy of project internal server error response
func (o *UpdateWebhookPolicyOfProjectInternalServerError) WithXRequestID(xRequestID string) *UpdateWebhookPolicyOfProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update webhook policy of project internal server error response
func (o *UpdateWebhookPolicyOfProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update webhook policy of project internal server error response
func (o *UpdateWebhookPolicyOfProjectInternalServerError) WithPayload(payload *models.Errors) *UpdateWebhookPolicyOfProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update webhook policy of project internal server error response
func (o *UpdateWebhookPolicyOfProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateWebhookPolicyOfProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
