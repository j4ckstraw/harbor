// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetSupportedEventTypesOKCode is the HTTP code returned for type GetSupportedEventTypesOK
const GetSupportedEventTypesOKCode int = 200

/*GetSupportedEventTypesOK Success

swagger:response getSupportedEventTypesOK
*/
type GetSupportedEventTypesOK struct {

	/*
	  In: Body
	*/
	Payload *models.SupportedWebhookEventTypes `json:"body,omitempty"`
}

// NewGetSupportedEventTypesOK creates GetSupportedEventTypesOK with default headers values
func NewGetSupportedEventTypesOK() *GetSupportedEventTypesOK {

	return &GetSupportedEventTypesOK{}
}

// WithPayload adds the payload to the get supported event types o k response
func (o *GetSupportedEventTypesOK) WithPayload(payload *models.SupportedWebhookEventTypes) *GetSupportedEventTypesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported event types o k response
func (o *GetSupportedEventTypesOK) SetPayload(payload *models.SupportedWebhookEventTypes) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedEventTypesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedEventTypesUnauthorizedCode is the HTTP code returned for type GetSupportedEventTypesUnauthorized
const GetSupportedEventTypesUnauthorizedCode int = 401

/*GetSupportedEventTypesUnauthorized Unauthorized

swagger:response getSupportedEventTypesUnauthorized
*/
type GetSupportedEventTypesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSupportedEventTypesUnauthorized creates GetSupportedEventTypesUnauthorized with default headers values
func NewGetSupportedEventTypesUnauthorized() *GetSupportedEventTypesUnauthorized {

	return &GetSupportedEventTypesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get supported event types unauthorized response
func (o *GetSupportedEventTypesUnauthorized) WithXRequestID(xRequestID string) *GetSupportedEventTypesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get supported event types unauthorized response
func (o *GetSupportedEventTypesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get supported event types unauthorized response
func (o *GetSupportedEventTypesUnauthorized) WithPayload(payload *models.Errors) *GetSupportedEventTypesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported event types unauthorized response
func (o *GetSupportedEventTypesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedEventTypesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedEventTypesForbiddenCode is the HTTP code returned for type GetSupportedEventTypesForbidden
const GetSupportedEventTypesForbiddenCode int = 403

/*GetSupportedEventTypesForbidden Forbidden

swagger:response getSupportedEventTypesForbidden
*/
type GetSupportedEventTypesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSupportedEventTypesForbidden creates GetSupportedEventTypesForbidden with default headers values
func NewGetSupportedEventTypesForbidden() *GetSupportedEventTypesForbidden {

	return &GetSupportedEventTypesForbidden{}
}

// WithXRequestID adds the xRequestId to the get supported event types forbidden response
func (o *GetSupportedEventTypesForbidden) WithXRequestID(xRequestID string) *GetSupportedEventTypesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get supported event types forbidden response
func (o *GetSupportedEventTypesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get supported event types forbidden response
func (o *GetSupportedEventTypesForbidden) WithPayload(payload *models.Errors) *GetSupportedEventTypesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported event types forbidden response
func (o *GetSupportedEventTypesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedEventTypesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedEventTypesInternalServerErrorCode is the HTTP code returned for type GetSupportedEventTypesInternalServerError
const GetSupportedEventTypesInternalServerErrorCode int = 500

/*GetSupportedEventTypesInternalServerError Internal server error

swagger:response getSupportedEventTypesInternalServerError
*/
type GetSupportedEventTypesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSupportedEventTypesInternalServerError creates GetSupportedEventTypesInternalServerError with default headers values
func NewGetSupportedEventTypesInternalServerError() *GetSupportedEventTypesInternalServerError {

	return &GetSupportedEventTypesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get supported event types internal server error response
func (o *GetSupportedEventTypesInternalServerError) WithXRequestID(xRequestID string) *GetSupportedEventTypesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get supported event types internal server error response
func (o *GetSupportedEventTypesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get supported event types internal server error response
func (o *GetSupportedEventTypesInternalServerError) WithPayload(payload *models.Errors) *GetSupportedEventTypesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported event types internal server error response
func (o *GetSupportedEventTypesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedEventTypesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
