// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListWebhookPoliciesOfProjectOKCode is the HTTP code returned for type ListWebhookPoliciesOfProjectOK
const ListWebhookPoliciesOfProjectOKCode int = 200

/*ListWebhookPoliciesOfProjectOK Success

swagger:response listWebhookPoliciesOfProjectOK
*/
type ListWebhookPoliciesOfProjectOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of webhook policies.

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.WebhookPolicy `json:"body,omitempty"`
}

// NewListWebhookPoliciesOfProjectOK creates ListWebhookPoliciesOfProjectOK with default headers values
func NewListWebhookPoliciesOfProjectOK() *ListWebhookPoliciesOfProjectOK {

	return &ListWebhookPoliciesOfProjectOK{}
}

// WithLink adds the link to the list webhook policies of project o k response
func (o *ListWebhookPoliciesOfProjectOK) WithLink(link string) *ListWebhookPoliciesOfProjectOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list webhook policies of project o k response
func (o *ListWebhookPoliciesOfProjectOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list webhook policies of project o k response
func (o *ListWebhookPoliciesOfProjectOK) WithXTotalCount(xTotalCount int64) *ListWebhookPoliciesOfProjectOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list webhook policies of project o k response
func (o *ListWebhookPoliciesOfProjectOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list webhook policies of project o k response
func (o *ListWebhookPoliciesOfProjectOK) WithPayload(payload []*models.WebhookPolicy) *ListWebhookPoliciesOfProjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook policies of project o k response
func (o *ListWebhookPoliciesOfProjectOK) SetPayload(payload []*models.WebhookPolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookPoliciesOfProjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.WebhookPolicy, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListWebhookPoliciesOfProjectBadRequestCode is the HTTP code returned for type ListWebhookPoliciesOfProjectBadRequest
const ListWebhookPoliciesOfProjectBadRequestCode int = 400

/*ListWebhookPoliciesOfProjectBadRequest Bad request

swagger:response listWebhookPoliciesOfProjectBadRequest
*/
type ListWebhookPoliciesOfProjectBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookPoliciesOfProjectBadRequest creates ListWebhookPoliciesOfProjectBadRequest with default headers values
func NewListWebhookPoliciesOfProjectBadRequest() *ListWebhookPoliciesOfProjectBadRequest {

	return &ListWebhookPoliciesOfProjectBadRequest{}
}

// WithXRequestID adds the xRequestId to the list webhook policies of project bad request response
func (o *ListWebhookPoliciesOfProjectBadRequest) WithXRequestID(xRequestID string) *ListWebhookPoliciesOfProjectBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook policies of project bad request response
func (o *ListWebhookPoliciesOfProjectBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook policies of project bad request response
func (o *ListWebhookPoliciesOfProjectBadRequest) WithPayload(payload *models.Errors) *ListWebhookPoliciesOfProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook policies of project bad request response
func (o *ListWebhookPoliciesOfProjectBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookPoliciesOfProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWebhookPoliciesOfProjectUnauthorizedCode is the HTTP code returned for type ListWebhookPoliciesOfProjectUnauthorized
const ListWebhookPoliciesOfProjectUnauthorizedCode int = 401

/*ListWebhookPoliciesOfProjectUnauthorized Unauthorized

swagger:response listWebhookPoliciesOfProjectUnauthorized
*/
type ListWebhookPoliciesOfProjectUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookPoliciesOfProjectUnauthorized creates ListWebhookPoliciesOfProjectUnauthorized with default headers values
func NewListWebhookPoliciesOfProjectUnauthorized() *ListWebhookPoliciesOfProjectUnauthorized {

	return &ListWebhookPoliciesOfProjectUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list webhook policies of project unauthorized response
func (o *ListWebhookPoliciesOfProjectUnauthorized) WithXRequestID(xRequestID string) *ListWebhookPoliciesOfProjectUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook policies of project unauthorized response
func (o *ListWebhookPoliciesOfProjectUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook policies of project unauthorized response
func (o *ListWebhookPoliciesOfProjectUnauthorized) WithPayload(payload *models.Errors) *ListWebhookPoliciesOfProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook policies of project unauthorized response
func (o *ListWebhookPoliciesOfProjectUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookPoliciesOfProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWebhookPoliciesOfProjectForbiddenCode is the HTTP code returned for type ListWebhookPoliciesOfProjectForbidden
const ListWebhookPoliciesOfProjectForbiddenCode int = 403

/*ListWebhookPoliciesOfProjectForbidden Forbidden

swagger:response listWebhookPoliciesOfProjectForbidden
*/
type ListWebhookPoliciesOfProjectForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookPoliciesOfProjectForbidden creates ListWebhookPoliciesOfProjectForbidden with default headers values
func NewListWebhookPoliciesOfProjectForbidden() *ListWebhookPoliciesOfProjectForbidden {

	return &ListWebhookPoliciesOfProjectForbidden{}
}

// WithXRequestID adds the xRequestId to the list webhook policies of project forbidden response
func (o *ListWebhookPoliciesOfProjectForbidden) WithXRequestID(xRequestID string) *ListWebhookPoliciesOfProjectForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook policies of project forbidden response
func (o *ListWebhookPoliciesOfProjectForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook policies of project forbidden response
func (o *ListWebhookPoliciesOfProjectForbidden) WithPayload(payload *models.Errors) *ListWebhookPoliciesOfProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook policies of project forbidden response
func (o *ListWebhookPoliciesOfProjectForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookPoliciesOfProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWebhookPoliciesOfProjectInternalServerErrorCode is the HTTP code returned for type ListWebhookPoliciesOfProjectInternalServerError
const ListWebhookPoliciesOfProjectInternalServerErrorCode int = 500

/*ListWebhookPoliciesOfProjectInternalServerError Internal server error

swagger:response listWebhookPoliciesOfProjectInternalServerError
*/
type ListWebhookPoliciesOfProjectInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListWebhookPoliciesOfProjectInternalServerError creates ListWebhookPoliciesOfProjectInternalServerError with default headers values
func NewListWebhookPoliciesOfProjectInternalServerError() *ListWebhookPoliciesOfProjectInternalServerError {

	return &ListWebhookPoliciesOfProjectInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list webhook policies of project internal server error response
func (o *ListWebhookPoliciesOfProjectInternalServerError) WithXRequestID(xRequestID string) *ListWebhookPoliciesOfProjectInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list webhook policies of project internal server error response
func (o *ListWebhookPoliciesOfProjectInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list webhook policies of project internal server error response
func (o *ListWebhookPoliciesOfProjectInternalServerError) WithPayload(payload *models.Errors) *ListWebhookPoliciesOfProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list webhook policies of project internal server error response
func (o *ListWebhookPoliciesOfProjectInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWebhookPoliciesOfProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
