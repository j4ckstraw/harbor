// Code generated by go-swagger; DO NOT EDIT.

package icon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetIconHandlerFunc turns a function with the right signature into a get icon handler
type GetIconHandlerFunc func(GetIconParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIconHandlerFunc) Handle(params GetIconParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetIconHandler interface for that can handle valid get icon params
type GetIconHandler interface {
	Handle(GetIconParams, interface{}) middleware.Responder
}

// NewGetIcon creates a new http.Handler for the get icon operation
func NewGetIcon(ctx *middleware.Context, handler GetIconHandler) *GetIcon {
	return &GetIcon{Context: ctx, Handler: handler}
}

/*GetIcon swagger:route GET /icons/{digest} icon getIcon

Get artifact icon

Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter "digest" in the path doesn't match the hash of the returned content

*/
type GetIcon struct {
	Context *middleware.Context
	Handler GetIconHandler
}

func (o *GetIcon) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetIconParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
