// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetGCLogOKCode is the HTTP code returned for type GetGCLogOK
const GetGCLogOKCode int = 200

/*GetGCLogOK Get successfully.

swagger:response getGcLogOK
*/
type GetGCLogOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetGCLogOK creates GetGCLogOK with default headers values
func NewGetGCLogOK() *GetGCLogOK {

	return &GetGCLogOK{}
}

// WithPayload adds the payload to the get Gc log o k response
func (o *GetGCLogOK) WithPayload(payload string) *GetGCLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc log o k response
func (o *GetGCLogOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetGCLogBadRequestCode is the HTTP code returned for type GetGCLogBadRequest
const GetGCLogBadRequestCode int = 400

/*GetGCLogBadRequest Bad request

swagger:response getGcLogBadRequest
*/
type GetGCLogBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCLogBadRequest creates GetGCLogBadRequest with default headers values
func NewGetGCLogBadRequest() *GetGCLogBadRequest {

	return &GetGCLogBadRequest{}
}

// WithXRequestID adds the xRequestId to the get Gc log bad request response
func (o *GetGCLogBadRequest) WithXRequestID(xRequestID string) *GetGCLogBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc log bad request response
func (o *GetGCLogBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc log bad request response
func (o *GetGCLogBadRequest) WithPayload(payload *models.Errors) *GetGCLogBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc log bad request response
func (o *GetGCLogBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCLogBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCLogUnauthorizedCode is the HTTP code returned for type GetGCLogUnauthorized
const GetGCLogUnauthorizedCode int = 401

/*GetGCLogUnauthorized Unauthorized

swagger:response getGcLogUnauthorized
*/
type GetGCLogUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCLogUnauthorized creates GetGCLogUnauthorized with default headers values
func NewGetGCLogUnauthorized() *GetGCLogUnauthorized {

	return &GetGCLogUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get Gc log unauthorized response
func (o *GetGCLogUnauthorized) WithXRequestID(xRequestID string) *GetGCLogUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc log unauthorized response
func (o *GetGCLogUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc log unauthorized response
func (o *GetGCLogUnauthorized) WithPayload(payload *models.Errors) *GetGCLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc log unauthorized response
func (o *GetGCLogUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCLogForbiddenCode is the HTTP code returned for type GetGCLogForbidden
const GetGCLogForbiddenCode int = 403

/*GetGCLogForbidden Forbidden

swagger:response getGcLogForbidden
*/
type GetGCLogForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCLogForbidden creates GetGCLogForbidden with default headers values
func NewGetGCLogForbidden() *GetGCLogForbidden {

	return &GetGCLogForbidden{}
}

// WithXRequestID adds the xRequestId to the get Gc log forbidden response
func (o *GetGCLogForbidden) WithXRequestID(xRequestID string) *GetGCLogForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc log forbidden response
func (o *GetGCLogForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc log forbidden response
func (o *GetGCLogForbidden) WithPayload(payload *models.Errors) *GetGCLogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc log forbidden response
func (o *GetGCLogForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCLogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCLogNotFoundCode is the HTTP code returned for type GetGCLogNotFound
const GetGCLogNotFoundCode int = 404

/*GetGCLogNotFound Not found

swagger:response getGcLogNotFound
*/
type GetGCLogNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCLogNotFound creates GetGCLogNotFound with default headers values
func NewGetGCLogNotFound() *GetGCLogNotFound {

	return &GetGCLogNotFound{}
}

// WithXRequestID adds the xRequestId to the get Gc log not found response
func (o *GetGCLogNotFound) WithXRequestID(xRequestID string) *GetGCLogNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc log not found response
func (o *GetGCLogNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc log not found response
func (o *GetGCLogNotFound) WithPayload(payload *models.Errors) *GetGCLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc log not found response
func (o *GetGCLogNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCLogInternalServerErrorCode is the HTTP code returned for type GetGCLogInternalServerError
const GetGCLogInternalServerErrorCode int = 500

/*GetGCLogInternalServerError Internal server error

swagger:response getGcLogInternalServerError
*/
type GetGCLogInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCLogInternalServerError creates GetGCLogInternalServerError with default headers values
func NewGetGCLogInternalServerError() *GetGCLogInternalServerError {

	return &GetGCLogInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get Gc log internal server error response
func (o *GetGCLogInternalServerError) WithXRequestID(xRequestID string) *GetGCLogInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc log internal server error response
func (o *GetGCLogInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc log internal server error response
func (o *GetGCLogInternalServerError) WithPayload(payload *models.Errors) *GetGCLogInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc log internal server error response
func (o *GetGCLogInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCLogInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
