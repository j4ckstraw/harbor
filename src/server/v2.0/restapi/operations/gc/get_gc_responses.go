// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetGCOKCode is the HTTP code returned for type GetGCOK
const GetGCOKCode int = 200

/*GetGCOK Get gc results successfully.

swagger:response getGcOK
*/
type GetGCOK struct {

	/*
	  In: Body
	*/
	Payload *models.GCHistory `json:"body,omitempty"`
}

// NewGetGCOK creates GetGCOK with default headers values
func NewGetGCOK() *GetGCOK {

	return &GetGCOK{}
}

// WithPayload adds the payload to the get Gc o k response
func (o *GetGCOK) WithPayload(payload *models.GCHistory) *GetGCOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc o k response
func (o *GetGCOK) SetPayload(payload *models.GCHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCUnauthorizedCode is the HTTP code returned for type GetGCUnauthorized
const GetGCUnauthorizedCode int = 401

/*GetGCUnauthorized Unauthorized

swagger:response getGcUnauthorized
*/
type GetGCUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCUnauthorized creates GetGCUnauthorized with default headers values
func NewGetGCUnauthorized() *GetGCUnauthorized {

	return &GetGCUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get Gc unauthorized response
func (o *GetGCUnauthorized) WithXRequestID(xRequestID string) *GetGCUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc unauthorized response
func (o *GetGCUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc unauthorized response
func (o *GetGCUnauthorized) WithPayload(payload *models.Errors) *GetGCUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc unauthorized response
func (o *GetGCUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCForbiddenCode is the HTTP code returned for type GetGCForbidden
const GetGCForbiddenCode int = 403

/*GetGCForbidden Forbidden

swagger:response getGcForbidden
*/
type GetGCForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCForbidden creates GetGCForbidden with default headers values
func NewGetGCForbidden() *GetGCForbidden {

	return &GetGCForbidden{}
}

// WithXRequestID adds the xRequestId to the get Gc forbidden response
func (o *GetGCForbidden) WithXRequestID(xRequestID string) *GetGCForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc forbidden response
func (o *GetGCForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc forbidden response
func (o *GetGCForbidden) WithPayload(payload *models.Errors) *GetGCForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc forbidden response
func (o *GetGCForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCNotFoundCode is the HTTP code returned for type GetGCNotFound
const GetGCNotFoundCode int = 404

/*GetGCNotFound Not found

swagger:response getGcNotFound
*/
type GetGCNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCNotFound creates GetGCNotFound with default headers values
func NewGetGCNotFound() *GetGCNotFound {

	return &GetGCNotFound{}
}

// WithXRequestID adds the xRequestId to the get Gc not found response
func (o *GetGCNotFound) WithXRequestID(xRequestID string) *GetGCNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc not found response
func (o *GetGCNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc not found response
func (o *GetGCNotFound) WithPayload(payload *models.Errors) *GetGCNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc not found response
func (o *GetGCNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCInternalServerErrorCode is the HTTP code returned for type GetGCInternalServerError
const GetGCInternalServerErrorCode int = 500

/*GetGCInternalServerError Internal server error

swagger:response getGcInternalServerError
*/
type GetGCInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCInternalServerError creates GetGCInternalServerError with default headers values
func NewGetGCInternalServerError() *GetGCInternalServerError {

	return &GetGCInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get Gc internal server error response
func (o *GetGCInternalServerError) WithXRequestID(xRequestID string) *GetGCInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc internal server error response
func (o *GetGCInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc internal server error response
func (o *GetGCInternalServerError) WithPayload(payload *models.Errors) *GetGCInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc internal server error response
func (o *GetGCInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
