// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateGCScheduleHandlerFunc turns a function with the right signature into a update GC schedule handler
type UpdateGCScheduleHandlerFunc func(UpdateGCScheduleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateGCScheduleHandlerFunc) Handle(params UpdateGCScheduleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateGCScheduleHandler interface for that can handle valid update GC schedule params
type UpdateGCScheduleHandler interface {
	Handle(UpdateGCScheduleParams, interface{}) middleware.Responder
}

// NewUpdateGCSchedule creates a new http.Handler for the update GC schedule operation
func NewUpdateGCSchedule(ctx *middleware.Context, handler UpdateGCScheduleHandler) *UpdateGCSchedule {
	return &UpdateGCSchedule{Context: ctx, Handler: handler}
}

/*UpdateGCSchedule swagger:route PUT /system/gc/schedule gc updateGcSchedule

Update gc's schedule.

This endpoint is for update gc schedule.


*/
type UpdateGCSchedule struct {
	Context *middleware.Context
	Handler UpdateGCScheduleHandler
}

func (o *UpdateGCSchedule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateGCScheduleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
