// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetGCScheduleOKCode is the HTTP code returned for type GetGCScheduleOK
const GetGCScheduleOKCode int = 200

/*GetGCScheduleOK Get gc's schedule.

swagger:response getGcScheduleOK
*/
type GetGCScheduleOK struct {

	/*
	  In: Body
	*/
	Payload *models.GCHistory `json:"body,omitempty"`
}

// NewGetGCScheduleOK creates GetGCScheduleOK with default headers values
func NewGetGCScheduleOK() *GetGCScheduleOK {

	return &GetGCScheduleOK{}
}

// WithPayload adds the payload to the get Gc schedule o k response
func (o *GetGCScheduleOK) WithPayload(payload *models.GCHistory) *GetGCScheduleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc schedule o k response
func (o *GetGCScheduleOK) SetPayload(payload *models.GCHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCScheduleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCScheduleUnauthorizedCode is the HTTP code returned for type GetGCScheduleUnauthorized
const GetGCScheduleUnauthorizedCode int = 401

/*GetGCScheduleUnauthorized Unauthorized

swagger:response getGcScheduleUnauthorized
*/
type GetGCScheduleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCScheduleUnauthorized creates GetGCScheduleUnauthorized with default headers values
func NewGetGCScheduleUnauthorized() *GetGCScheduleUnauthorized {

	return &GetGCScheduleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get Gc schedule unauthorized response
func (o *GetGCScheduleUnauthorized) WithXRequestID(xRequestID string) *GetGCScheduleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc schedule unauthorized response
func (o *GetGCScheduleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc schedule unauthorized response
func (o *GetGCScheduleUnauthorized) WithPayload(payload *models.Errors) *GetGCScheduleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc schedule unauthorized response
func (o *GetGCScheduleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCScheduleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCScheduleForbiddenCode is the HTTP code returned for type GetGCScheduleForbidden
const GetGCScheduleForbiddenCode int = 403

/*GetGCScheduleForbidden Forbidden

swagger:response getGcScheduleForbidden
*/
type GetGCScheduleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCScheduleForbidden creates GetGCScheduleForbidden with default headers values
func NewGetGCScheduleForbidden() *GetGCScheduleForbidden {

	return &GetGCScheduleForbidden{}
}

// WithXRequestID adds the xRequestId to the get Gc schedule forbidden response
func (o *GetGCScheduleForbidden) WithXRequestID(xRequestID string) *GetGCScheduleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc schedule forbidden response
func (o *GetGCScheduleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc schedule forbidden response
func (o *GetGCScheduleForbidden) WithPayload(payload *models.Errors) *GetGCScheduleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc schedule forbidden response
func (o *GetGCScheduleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCScheduleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCScheduleInternalServerErrorCode is the HTTP code returned for type GetGCScheduleInternalServerError
const GetGCScheduleInternalServerErrorCode int = 500

/*GetGCScheduleInternalServerError Internal server error

swagger:response getGcScheduleInternalServerError
*/
type GetGCScheduleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCScheduleInternalServerError creates GetGCScheduleInternalServerError with default headers values
func NewGetGCScheduleInternalServerError() *GetGCScheduleInternalServerError {

	return &GetGCScheduleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get Gc schedule internal server error response
func (o *GetGCScheduleInternalServerError) WithXRequestID(xRequestID string) *GetGCScheduleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc schedule internal server error response
func (o *GetGCScheduleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc schedule internal server error response
func (o *GetGCScheduleInternalServerError) WithPayload(payload *models.Errors) *GetGCScheduleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc schedule internal server error response
func (o *GetGCScheduleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCScheduleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
