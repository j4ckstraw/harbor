// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetGCHandlerFunc turns a function with the right signature into a get GC handler
type GetGCHandlerFunc func(GetGCParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGCHandlerFunc) Handle(params GetGCParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetGCHandler interface for that can handle valid get GC params
type GetGCHandler interface {
	Handle(GetGCParams, interface{}) middleware.Responder
}

// NewGetGC creates a new http.Handler for the get GC operation
func NewGetGC(ctx *middleware.Context, handler GetGCHandler) *GetGC {
	return &GetGC{Context: ctx, Handler: handler}
}

/*GetGC swagger:route GET /system/gc/{gc_id} gc getGc

Get gc status.

This endpoint let user get gc status filtered by specific ID.

*/
type GetGC struct {
	Context *middleware.Context
	Handler GetGCHandler
}

func (o *GetGC) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetGCParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
