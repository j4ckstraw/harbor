// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetGCHistoryOKCode is the HTTP code returned for type GetGCHistoryOK
const GetGCHistoryOKCode int = 200

/*GetGCHistoryOK Get gc results successfully.

swagger:response getGcHistoryOK
*/
type GetGCHistoryOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of history

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.GCHistory `json:"body,omitempty"`
}

// NewGetGCHistoryOK creates GetGCHistoryOK with default headers values
func NewGetGCHistoryOK() *GetGCHistoryOK {

	return &GetGCHistoryOK{}
}

// WithLink adds the link to the get Gc history o k response
func (o *GetGCHistoryOK) WithLink(link string) *GetGCHistoryOK {
	o.Link = link
	return o
}

// SetLink sets the link to the get Gc history o k response
func (o *GetGCHistoryOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the get Gc history o k response
func (o *GetGCHistoryOK) WithXTotalCount(xTotalCount int64) *GetGCHistoryOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the get Gc history o k response
func (o *GetGCHistoryOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the get Gc history o k response
func (o *GetGCHistoryOK) WithPayload(payload []*models.GCHistory) *GetGCHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc history o k response
func (o *GetGCHistoryOK) SetPayload(payload []*models.GCHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.GCHistory, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetGCHistoryUnauthorizedCode is the HTTP code returned for type GetGCHistoryUnauthorized
const GetGCHistoryUnauthorizedCode int = 401

/*GetGCHistoryUnauthorized Unauthorized

swagger:response getGcHistoryUnauthorized
*/
type GetGCHistoryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCHistoryUnauthorized creates GetGCHistoryUnauthorized with default headers values
func NewGetGCHistoryUnauthorized() *GetGCHistoryUnauthorized {

	return &GetGCHistoryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get Gc history unauthorized response
func (o *GetGCHistoryUnauthorized) WithXRequestID(xRequestID string) *GetGCHistoryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc history unauthorized response
func (o *GetGCHistoryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc history unauthorized response
func (o *GetGCHistoryUnauthorized) WithPayload(payload *models.Errors) *GetGCHistoryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc history unauthorized response
func (o *GetGCHistoryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCHistoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCHistoryForbiddenCode is the HTTP code returned for type GetGCHistoryForbidden
const GetGCHistoryForbiddenCode int = 403

/*GetGCHistoryForbidden Forbidden

swagger:response getGcHistoryForbidden
*/
type GetGCHistoryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCHistoryForbidden creates GetGCHistoryForbidden with default headers values
func NewGetGCHistoryForbidden() *GetGCHistoryForbidden {

	return &GetGCHistoryForbidden{}
}

// WithXRequestID adds the xRequestId to the get Gc history forbidden response
func (o *GetGCHistoryForbidden) WithXRequestID(xRequestID string) *GetGCHistoryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc history forbidden response
func (o *GetGCHistoryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc history forbidden response
func (o *GetGCHistoryForbidden) WithPayload(payload *models.Errors) *GetGCHistoryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc history forbidden response
func (o *GetGCHistoryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCHistoryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGCHistoryInternalServerErrorCode is the HTTP code returned for type GetGCHistoryInternalServerError
const GetGCHistoryInternalServerErrorCode int = 500

/*GetGCHistoryInternalServerError Internal server error

swagger:response getGcHistoryInternalServerError
*/
type GetGCHistoryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetGCHistoryInternalServerError creates GetGCHistoryInternalServerError with default headers values
func NewGetGCHistoryInternalServerError() *GetGCHistoryInternalServerError {

	return &GetGCHistoryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get Gc history internal server error response
func (o *GetGCHistoryInternalServerError) WithXRequestID(xRequestID string) *GetGCHistoryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get Gc history internal server error response
func (o *GetGCHistoryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get Gc history internal server error response
func (o *GetGCHistoryInternalServerError) WithPayload(payload *models.Errors) *GetGCHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Gc history internal server error response
func (o *GetGCHistoryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGCHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
