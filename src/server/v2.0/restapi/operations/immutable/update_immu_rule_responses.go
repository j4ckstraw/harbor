// Code generated by go-swagger; DO NOT EDIT.

package immutable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateImmuRuleOKCode is the HTTP code returned for type UpdateImmuRuleOK
const UpdateImmuRuleOKCode int = 200

/*UpdateImmuRuleOK Success

swagger:response updateImmuRuleOK
*/
type UpdateImmuRuleOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateImmuRuleOK creates UpdateImmuRuleOK with default headers values
func NewUpdateImmuRuleOK() *UpdateImmuRuleOK {

	return &UpdateImmuRuleOK{}
}

// WithXRequestID adds the xRequestId to the update immu rule o k response
func (o *UpdateImmuRuleOK) WithXRequestID(xRequestID string) *UpdateImmuRuleOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update immu rule o k response
func (o *UpdateImmuRuleOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateImmuRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateImmuRuleBadRequestCode is the HTTP code returned for type UpdateImmuRuleBadRequest
const UpdateImmuRuleBadRequestCode int = 400

/*UpdateImmuRuleBadRequest Bad request

swagger:response updateImmuRuleBadRequest
*/
type UpdateImmuRuleBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateImmuRuleBadRequest creates UpdateImmuRuleBadRequest with default headers values
func NewUpdateImmuRuleBadRequest() *UpdateImmuRuleBadRequest {

	return &UpdateImmuRuleBadRequest{}
}

// WithXRequestID adds the xRequestId to the update immu rule bad request response
func (o *UpdateImmuRuleBadRequest) WithXRequestID(xRequestID string) *UpdateImmuRuleBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update immu rule bad request response
func (o *UpdateImmuRuleBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update immu rule bad request response
func (o *UpdateImmuRuleBadRequest) WithPayload(payload *models.Errors) *UpdateImmuRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update immu rule bad request response
func (o *UpdateImmuRuleBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateImmuRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateImmuRuleUnauthorizedCode is the HTTP code returned for type UpdateImmuRuleUnauthorized
const UpdateImmuRuleUnauthorizedCode int = 401

/*UpdateImmuRuleUnauthorized Unauthorized

swagger:response updateImmuRuleUnauthorized
*/
type UpdateImmuRuleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateImmuRuleUnauthorized creates UpdateImmuRuleUnauthorized with default headers values
func NewUpdateImmuRuleUnauthorized() *UpdateImmuRuleUnauthorized {

	return &UpdateImmuRuleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update immu rule unauthorized response
func (o *UpdateImmuRuleUnauthorized) WithXRequestID(xRequestID string) *UpdateImmuRuleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update immu rule unauthorized response
func (o *UpdateImmuRuleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update immu rule unauthorized response
func (o *UpdateImmuRuleUnauthorized) WithPayload(payload *models.Errors) *UpdateImmuRuleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update immu rule unauthorized response
func (o *UpdateImmuRuleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateImmuRuleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateImmuRuleForbiddenCode is the HTTP code returned for type UpdateImmuRuleForbidden
const UpdateImmuRuleForbiddenCode int = 403

/*UpdateImmuRuleForbidden Forbidden

swagger:response updateImmuRuleForbidden
*/
type UpdateImmuRuleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateImmuRuleForbidden creates UpdateImmuRuleForbidden with default headers values
func NewUpdateImmuRuleForbidden() *UpdateImmuRuleForbidden {

	return &UpdateImmuRuleForbidden{}
}

// WithXRequestID adds the xRequestId to the update immu rule forbidden response
func (o *UpdateImmuRuleForbidden) WithXRequestID(xRequestID string) *UpdateImmuRuleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update immu rule forbidden response
func (o *UpdateImmuRuleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update immu rule forbidden response
func (o *UpdateImmuRuleForbidden) WithPayload(payload *models.Errors) *UpdateImmuRuleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update immu rule forbidden response
func (o *UpdateImmuRuleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateImmuRuleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateImmuRuleInternalServerErrorCode is the HTTP code returned for type UpdateImmuRuleInternalServerError
const UpdateImmuRuleInternalServerErrorCode int = 500

/*UpdateImmuRuleInternalServerError Internal server error

swagger:response updateImmuRuleInternalServerError
*/
type UpdateImmuRuleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateImmuRuleInternalServerError creates UpdateImmuRuleInternalServerError with default headers values
func NewUpdateImmuRuleInternalServerError() *UpdateImmuRuleInternalServerError {

	return &UpdateImmuRuleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update immu rule internal server error response
func (o *UpdateImmuRuleInternalServerError) WithXRequestID(xRequestID string) *UpdateImmuRuleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update immu rule internal server error response
func (o *UpdateImmuRuleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update immu rule internal server error response
func (o *UpdateImmuRuleInternalServerError) WithPayload(payload *models.Errors) *UpdateImmuRuleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update immu rule internal server error response
func (o *UpdateImmuRuleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateImmuRuleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
