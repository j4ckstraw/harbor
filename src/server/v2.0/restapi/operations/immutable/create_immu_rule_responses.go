// Code generated by go-swagger; DO NOT EDIT.

package immutable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateImmuRuleCreatedCode is the HTTP code returned for type CreateImmuRuleCreated
const CreateImmuRuleCreatedCode int = 201

/*CreateImmuRuleCreated Created

swagger:response createImmuRuleCreated
*/
type CreateImmuRuleCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreateImmuRuleCreated creates CreateImmuRuleCreated with default headers values
func NewCreateImmuRuleCreated() *CreateImmuRuleCreated {

	return &CreateImmuRuleCreated{}
}

// WithLocation adds the location to the create immu rule created response
func (o *CreateImmuRuleCreated) WithLocation(location string) *CreateImmuRuleCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create immu rule created response
func (o *CreateImmuRuleCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create immu rule created response
func (o *CreateImmuRuleCreated) WithXRequestID(xRequestID string) *CreateImmuRuleCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create immu rule created response
func (o *CreateImmuRuleCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreateImmuRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateImmuRuleBadRequestCode is the HTTP code returned for type CreateImmuRuleBadRequest
const CreateImmuRuleBadRequestCode int = 400

/*CreateImmuRuleBadRequest Bad request

swagger:response createImmuRuleBadRequest
*/
type CreateImmuRuleBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateImmuRuleBadRequest creates CreateImmuRuleBadRequest with default headers values
func NewCreateImmuRuleBadRequest() *CreateImmuRuleBadRequest {

	return &CreateImmuRuleBadRequest{}
}

// WithXRequestID adds the xRequestId to the create immu rule bad request response
func (o *CreateImmuRuleBadRequest) WithXRequestID(xRequestID string) *CreateImmuRuleBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create immu rule bad request response
func (o *CreateImmuRuleBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create immu rule bad request response
func (o *CreateImmuRuleBadRequest) WithPayload(payload *models.Errors) *CreateImmuRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create immu rule bad request response
func (o *CreateImmuRuleBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImmuRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateImmuRuleUnauthorizedCode is the HTTP code returned for type CreateImmuRuleUnauthorized
const CreateImmuRuleUnauthorizedCode int = 401

/*CreateImmuRuleUnauthorized Unauthorized

swagger:response createImmuRuleUnauthorized
*/
type CreateImmuRuleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateImmuRuleUnauthorized creates CreateImmuRuleUnauthorized with default headers values
func NewCreateImmuRuleUnauthorized() *CreateImmuRuleUnauthorized {

	return &CreateImmuRuleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create immu rule unauthorized response
func (o *CreateImmuRuleUnauthorized) WithXRequestID(xRequestID string) *CreateImmuRuleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create immu rule unauthorized response
func (o *CreateImmuRuleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create immu rule unauthorized response
func (o *CreateImmuRuleUnauthorized) WithPayload(payload *models.Errors) *CreateImmuRuleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create immu rule unauthorized response
func (o *CreateImmuRuleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImmuRuleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateImmuRuleForbiddenCode is the HTTP code returned for type CreateImmuRuleForbidden
const CreateImmuRuleForbiddenCode int = 403

/*CreateImmuRuleForbidden Forbidden

swagger:response createImmuRuleForbidden
*/
type CreateImmuRuleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateImmuRuleForbidden creates CreateImmuRuleForbidden with default headers values
func NewCreateImmuRuleForbidden() *CreateImmuRuleForbidden {

	return &CreateImmuRuleForbidden{}
}

// WithXRequestID adds the xRequestId to the create immu rule forbidden response
func (o *CreateImmuRuleForbidden) WithXRequestID(xRequestID string) *CreateImmuRuleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create immu rule forbidden response
func (o *CreateImmuRuleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create immu rule forbidden response
func (o *CreateImmuRuleForbidden) WithPayload(payload *models.Errors) *CreateImmuRuleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create immu rule forbidden response
func (o *CreateImmuRuleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImmuRuleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateImmuRuleNotFoundCode is the HTTP code returned for type CreateImmuRuleNotFound
const CreateImmuRuleNotFoundCode int = 404

/*CreateImmuRuleNotFound Not found

swagger:response createImmuRuleNotFound
*/
type CreateImmuRuleNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateImmuRuleNotFound creates CreateImmuRuleNotFound with default headers values
func NewCreateImmuRuleNotFound() *CreateImmuRuleNotFound {

	return &CreateImmuRuleNotFound{}
}

// WithXRequestID adds the xRequestId to the create immu rule not found response
func (o *CreateImmuRuleNotFound) WithXRequestID(xRequestID string) *CreateImmuRuleNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create immu rule not found response
func (o *CreateImmuRuleNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create immu rule not found response
func (o *CreateImmuRuleNotFound) WithPayload(payload *models.Errors) *CreateImmuRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create immu rule not found response
func (o *CreateImmuRuleNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImmuRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateImmuRuleInternalServerErrorCode is the HTTP code returned for type CreateImmuRuleInternalServerError
const CreateImmuRuleInternalServerErrorCode int = 500

/*CreateImmuRuleInternalServerError Internal server error

swagger:response createImmuRuleInternalServerError
*/
type CreateImmuRuleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateImmuRuleInternalServerError creates CreateImmuRuleInternalServerError with default headers values
func NewCreateImmuRuleInternalServerError() *CreateImmuRuleInternalServerError {

	return &CreateImmuRuleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create immu rule internal server error response
func (o *CreateImmuRuleInternalServerError) WithXRequestID(xRequestID string) *CreateImmuRuleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create immu rule internal server error response
func (o *CreateImmuRuleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create immu rule internal server error response
func (o *CreateImmuRuleInternalServerError) WithPayload(payload *models.Errors) *CreateImmuRuleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create immu rule internal server error response
func (o *CreateImmuRuleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateImmuRuleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
