// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// AddProjectMetadatasOKCode is the HTTP code returned for type AddProjectMetadatasOK
const AddProjectMetadatasOKCode int = 200

/*AddProjectMetadatasOK Success

swagger:response addProjectMetadatasOK
*/
type AddProjectMetadatasOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewAddProjectMetadatasOK creates AddProjectMetadatasOK with default headers values
func NewAddProjectMetadatasOK() *AddProjectMetadatasOK {

	return &AddProjectMetadatasOK{}
}

// WithXRequestID adds the xRequestId to the add project metadatas o k response
func (o *AddProjectMetadatasOK) WithXRequestID(xRequestID string) *AddProjectMetadatasOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas o k response
func (o *AddProjectMetadatasOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *AddProjectMetadatasOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddProjectMetadatasBadRequestCode is the HTTP code returned for type AddProjectMetadatasBadRequest
const AddProjectMetadatasBadRequestCode int = 400

/*AddProjectMetadatasBadRequest Bad request

swagger:response addProjectMetadatasBadRequest
*/
type AddProjectMetadatasBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddProjectMetadatasBadRequest creates AddProjectMetadatasBadRequest with default headers values
func NewAddProjectMetadatasBadRequest() *AddProjectMetadatasBadRequest {

	return &AddProjectMetadatasBadRequest{}
}

// WithXRequestID adds the xRequestId to the add project metadatas bad request response
func (o *AddProjectMetadatasBadRequest) WithXRequestID(xRequestID string) *AddProjectMetadatasBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas bad request response
func (o *AddProjectMetadatasBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add project metadatas bad request response
func (o *AddProjectMetadatasBadRequest) WithPayload(payload *models.Errors) *AddProjectMetadatasBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add project metadatas bad request response
func (o *AddProjectMetadatasBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProjectMetadatasBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProjectMetadatasUnauthorizedCode is the HTTP code returned for type AddProjectMetadatasUnauthorized
const AddProjectMetadatasUnauthorizedCode int = 401

/*AddProjectMetadatasUnauthorized Unauthorized

swagger:response addProjectMetadatasUnauthorized
*/
type AddProjectMetadatasUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddProjectMetadatasUnauthorized creates AddProjectMetadatasUnauthorized with default headers values
func NewAddProjectMetadatasUnauthorized() *AddProjectMetadatasUnauthorized {

	return &AddProjectMetadatasUnauthorized{}
}

// WithXRequestID adds the xRequestId to the add project metadatas unauthorized response
func (o *AddProjectMetadatasUnauthorized) WithXRequestID(xRequestID string) *AddProjectMetadatasUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas unauthorized response
func (o *AddProjectMetadatasUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add project metadatas unauthorized response
func (o *AddProjectMetadatasUnauthorized) WithPayload(payload *models.Errors) *AddProjectMetadatasUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add project metadatas unauthorized response
func (o *AddProjectMetadatasUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProjectMetadatasUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProjectMetadatasForbiddenCode is the HTTP code returned for type AddProjectMetadatasForbidden
const AddProjectMetadatasForbiddenCode int = 403

/*AddProjectMetadatasForbidden Forbidden

swagger:response addProjectMetadatasForbidden
*/
type AddProjectMetadatasForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddProjectMetadatasForbidden creates AddProjectMetadatasForbidden with default headers values
func NewAddProjectMetadatasForbidden() *AddProjectMetadatasForbidden {

	return &AddProjectMetadatasForbidden{}
}

// WithXRequestID adds the xRequestId to the add project metadatas forbidden response
func (o *AddProjectMetadatasForbidden) WithXRequestID(xRequestID string) *AddProjectMetadatasForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas forbidden response
func (o *AddProjectMetadatasForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add project metadatas forbidden response
func (o *AddProjectMetadatasForbidden) WithPayload(payload *models.Errors) *AddProjectMetadatasForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add project metadatas forbidden response
func (o *AddProjectMetadatasForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProjectMetadatasForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProjectMetadatasNotFoundCode is the HTTP code returned for type AddProjectMetadatasNotFound
const AddProjectMetadatasNotFoundCode int = 404

/*AddProjectMetadatasNotFound Not found

swagger:response addProjectMetadatasNotFound
*/
type AddProjectMetadatasNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddProjectMetadatasNotFound creates AddProjectMetadatasNotFound with default headers values
func NewAddProjectMetadatasNotFound() *AddProjectMetadatasNotFound {

	return &AddProjectMetadatasNotFound{}
}

// WithXRequestID adds the xRequestId to the add project metadatas not found response
func (o *AddProjectMetadatasNotFound) WithXRequestID(xRequestID string) *AddProjectMetadatasNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas not found response
func (o *AddProjectMetadatasNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add project metadatas not found response
func (o *AddProjectMetadatasNotFound) WithPayload(payload *models.Errors) *AddProjectMetadatasNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add project metadatas not found response
func (o *AddProjectMetadatasNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProjectMetadatasNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProjectMetadatasConflictCode is the HTTP code returned for type AddProjectMetadatasConflict
const AddProjectMetadatasConflictCode int = 409

/*AddProjectMetadatasConflict Conflict

swagger:response addProjectMetadatasConflict
*/
type AddProjectMetadatasConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddProjectMetadatasConflict creates AddProjectMetadatasConflict with default headers values
func NewAddProjectMetadatasConflict() *AddProjectMetadatasConflict {

	return &AddProjectMetadatasConflict{}
}

// WithXRequestID adds the xRequestId to the add project metadatas conflict response
func (o *AddProjectMetadatasConflict) WithXRequestID(xRequestID string) *AddProjectMetadatasConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas conflict response
func (o *AddProjectMetadatasConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add project metadatas conflict response
func (o *AddProjectMetadatasConflict) WithPayload(payload *models.Errors) *AddProjectMetadatasConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add project metadatas conflict response
func (o *AddProjectMetadatasConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProjectMetadatasConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProjectMetadatasInternalServerErrorCode is the HTTP code returned for type AddProjectMetadatasInternalServerError
const AddProjectMetadatasInternalServerErrorCode int = 500

/*AddProjectMetadatasInternalServerError Internal server error

swagger:response addProjectMetadatasInternalServerError
*/
type AddProjectMetadatasInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewAddProjectMetadatasInternalServerError creates AddProjectMetadatasInternalServerError with default headers values
func NewAddProjectMetadatasInternalServerError() *AddProjectMetadatasInternalServerError {

	return &AddProjectMetadatasInternalServerError{}
}

// WithXRequestID adds the xRequestId to the add project metadatas internal server error response
func (o *AddProjectMetadatasInternalServerError) WithXRequestID(xRequestID string) *AddProjectMetadatasInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the add project metadatas internal server error response
func (o *AddProjectMetadatasInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the add project metadatas internal server error response
func (o *AddProjectMetadatasInternalServerError) WithPayload(payload *models.Errors) *AddProjectMetadatasInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add project metadatas internal server error response
func (o *AddProjectMetadatasInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProjectMetadatasInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
