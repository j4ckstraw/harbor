// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteProjectMetadataOKCode is the HTTP code returned for type DeleteProjectMetadataOK
const DeleteProjectMetadataOKCode int = 200

/*DeleteProjectMetadataOK Success

swagger:response deleteProjectMetadataOK
*/
type DeleteProjectMetadataOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewDeleteProjectMetadataOK creates DeleteProjectMetadataOK with default headers values
func NewDeleteProjectMetadataOK() *DeleteProjectMetadataOK {

	return &DeleteProjectMetadataOK{}
}

// WithXRequestID adds the xRequestId to the delete project metadata o k response
func (o *DeleteProjectMetadataOK) WithXRequestID(xRequestID string) *DeleteProjectMetadataOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata o k response
func (o *DeleteProjectMetadataOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *DeleteProjectMetadataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteProjectMetadataBadRequestCode is the HTTP code returned for type DeleteProjectMetadataBadRequest
const DeleteProjectMetadataBadRequestCode int = 400

/*DeleteProjectMetadataBadRequest Bad request

swagger:response deleteProjectMetadataBadRequest
*/
type DeleteProjectMetadataBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectMetadataBadRequest creates DeleteProjectMetadataBadRequest with default headers values
func NewDeleteProjectMetadataBadRequest() *DeleteProjectMetadataBadRequest {

	return &DeleteProjectMetadataBadRequest{}
}

// WithXRequestID adds the xRequestId to the delete project metadata bad request response
func (o *DeleteProjectMetadataBadRequest) WithXRequestID(xRequestID string) *DeleteProjectMetadataBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata bad request response
func (o *DeleteProjectMetadataBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project metadata bad request response
func (o *DeleteProjectMetadataBadRequest) WithPayload(payload *models.Errors) *DeleteProjectMetadataBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project metadata bad request response
func (o *DeleteProjectMetadataBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectMetadataBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectMetadataUnauthorizedCode is the HTTP code returned for type DeleteProjectMetadataUnauthorized
const DeleteProjectMetadataUnauthorizedCode int = 401

/*DeleteProjectMetadataUnauthorized Unauthorized

swagger:response deleteProjectMetadataUnauthorized
*/
type DeleteProjectMetadataUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectMetadataUnauthorized creates DeleteProjectMetadataUnauthorized with default headers values
func NewDeleteProjectMetadataUnauthorized() *DeleteProjectMetadataUnauthorized {

	return &DeleteProjectMetadataUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete project metadata unauthorized response
func (o *DeleteProjectMetadataUnauthorized) WithXRequestID(xRequestID string) *DeleteProjectMetadataUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata unauthorized response
func (o *DeleteProjectMetadataUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project metadata unauthorized response
func (o *DeleteProjectMetadataUnauthorized) WithPayload(payload *models.Errors) *DeleteProjectMetadataUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project metadata unauthorized response
func (o *DeleteProjectMetadataUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectMetadataUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectMetadataForbiddenCode is the HTTP code returned for type DeleteProjectMetadataForbidden
const DeleteProjectMetadataForbiddenCode int = 403

/*DeleteProjectMetadataForbidden Forbidden

swagger:response deleteProjectMetadataForbidden
*/
type DeleteProjectMetadataForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectMetadataForbidden creates DeleteProjectMetadataForbidden with default headers values
func NewDeleteProjectMetadataForbidden() *DeleteProjectMetadataForbidden {

	return &DeleteProjectMetadataForbidden{}
}

// WithXRequestID adds the xRequestId to the delete project metadata forbidden response
func (o *DeleteProjectMetadataForbidden) WithXRequestID(xRequestID string) *DeleteProjectMetadataForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata forbidden response
func (o *DeleteProjectMetadataForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project metadata forbidden response
func (o *DeleteProjectMetadataForbidden) WithPayload(payload *models.Errors) *DeleteProjectMetadataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project metadata forbidden response
func (o *DeleteProjectMetadataForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectMetadataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectMetadataNotFoundCode is the HTTP code returned for type DeleteProjectMetadataNotFound
const DeleteProjectMetadataNotFoundCode int = 404

/*DeleteProjectMetadataNotFound Not found

swagger:response deleteProjectMetadataNotFound
*/
type DeleteProjectMetadataNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectMetadataNotFound creates DeleteProjectMetadataNotFound with default headers values
func NewDeleteProjectMetadataNotFound() *DeleteProjectMetadataNotFound {

	return &DeleteProjectMetadataNotFound{}
}

// WithXRequestID adds the xRequestId to the delete project metadata not found response
func (o *DeleteProjectMetadataNotFound) WithXRequestID(xRequestID string) *DeleteProjectMetadataNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata not found response
func (o *DeleteProjectMetadataNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project metadata not found response
func (o *DeleteProjectMetadataNotFound) WithPayload(payload *models.Errors) *DeleteProjectMetadataNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project metadata not found response
func (o *DeleteProjectMetadataNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectMetadataNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectMetadataConflictCode is the HTTP code returned for type DeleteProjectMetadataConflict
const DeleteProjectMetadataConflictCode int = 409

/*DeleteProjectMetadataConflict Conflict

swagger:response deleteProjectMetadataConflict
*/
type DeleteProjectMetadataConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectMetadataConflict creates DeleteProjectMetadataConflict with default headers values
func NewDeleteProjectMetadataConflict() *DeleteProjectMetadataConflict {

	return &DeleteProjectMetadataConflict{}
}

// WithXRequestID adds the xRequestId to the delete project metadata conflict response
func (o *DeleteProjectMetadataConflict) WithXRequestID(xRequestID string) *DeleteProjectMetadataConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata conflict response
func (o *DeleteProjectMetadataConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project metadata conflict response
func (o *DeleteProjectMetadataConflict) WithPayload(payload *models.Errors) *DeleteProjectMetadataConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project metadata conflict response
func (o *DeleteProjectMetadataConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectMetadataConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectMetadataInternalServerErrorCode is the HTTP code returned for type DeleteProjectMetadataInternalServerError
const DeleteProjectMetadataInternalServerErrorCode int = 500

/*DeleteProjectMetadataInternalServerError Internal server error

swagger:response deleteProjectMetadataInternalServerError
*/
type DeleteProjectMetadataInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteProjectMetadataInternalServerError creates DeleteProjectMetadataInternalServerError with default headers values
func NewDeleteProjectMetadataInternalServerError() *DeleteProjectMetadataInternalServerError {

	return &DeleteProjectMetadataInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete project metadata internal server error response
func (o *DeleteProjectMetadataInternalServerError) WithXRequestID(xRequestID string) *DeleteProjectMetadataInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete project metadata internal server error response
func (o *DeleteProjectMetadataInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete project metadata internal server error response
func (o *DeleteProjectMetadataInternalServerError) WithPayload(payload *models.Errors) *DeleteProjectMetadataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project metadata internal server error response
func (o *DeleteProjectMetadataInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectMetadataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
