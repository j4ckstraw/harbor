// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetProjectMetadataOKCode is the HTTP code returned for type GetProjectMetadataOK
const GetProjectMetadataOKCode int = 200

/*GetProjectMetadataOK Success

swagger:response getProjectMetadataOK
*/
type GetProjectMetadataOK struct {

	/*
	  In: Body
	*/
	Payload map[string]string `json:"body,omitempty"`
}

// NewGetProjectMetadataOK creates GetProjectMetadataOK with default headers values
func NewGetProjectMetadataOK() *GetProjectMetadataOK {

	return &GetProjectMetadataOK{}
}

// WithPayload adds the payload to the get project metadata o k response
func (o *GetProjectMetadataOK) WithPayload(payload map[string]string) *GetProjectMetadataOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project metadata o k response
func (o *GetProjectMetadataOK) SetPayload(payload map[string]string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectMetadataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = make(map[string]string, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetProjectMetadataBadRequestCode is the HTTP code returned for type GetProjectMetadataBadRequest
const GetProjectMetadataBadRequestCode int = 400

/*GetProjectMetadataBadRequest Bad request

swagger:response getProjectMetadataBadRequest
*/
type GetProjectMetadataBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetProjectMetadataBadRequest creates GetProjectMetadataBadRequest with default headers values
func NewGetProjectMetadataBadRequest() *GetProjectMetadataBadRequest {

	return &GetProjectMetadataBadRequest{}
}

// WithXRequestID adds the xRequestId to the get project metadata bad request response
func (o *GetProjectMetadataBadRequest) WithXRequestID(xRequestID string) *GetProjectMetadataBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get project metadata bad request response
func (o *GetProjectMetadataBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get project metadata bad request response
func (o *GetProjectMetadataBadRequest) WithPayload(payload *models.Errors) *GetProjectMetadataBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project metadata bad request response
func (o *GetProjectMetadataBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectMetadataBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectMetadataUnauthorizedCode is the HTTP code returned for type GetProjectMetadataUnauthorized
const GetProjectMetadataUnauthorizedCode int = 401

/*GetProjectMetadataUnauthorized Unauthorized

swagger:response getProjectMetadataUnauthorized
*/
type GetProjectMetadataUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetProjectMetadataUnauthorized creates GetProjectMetadataUnauthorized with default headers values
func NewGetProjectMetadataUnauthorized() *GetProjectMetadataUnauthorized {

	return &GetProjectMetadataUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get project metadata unauthorized response
func (o *GetProjectMetadataUnauthorized) WithXRequestID(xRequestID string) *GetProjectMetadataUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get project metadata unauthorized response
func (o *GetProjectMetadataUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get project metadata unauthorized response
func (o *GetProjectMetadataUnauthorized) WithPayload(payload *models.Errors) *GetProjectMetadataUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project metadata unauthorized response
func (o *GetProjectMetadataUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectMetadataUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectMetadataForbiddenCode is the HTTP code returned for type GetProjectMetadataForbidden
const GetProjectMetadataForbiddenCode int = 403

/*GetProjectMetadataForbidden Forbidden

swagger:response getProjectMetadataForbidden
*/
type GetProjectMetadataForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetProjectMetadataForbidden creates GetProjectMetadataForbidden with default headers values
func NewGetProjectMetadataForbidden() *GetProjectMetadataForbidden {

	return &GetProjectMetadataForbidden{}
}

// WithXRequestID adds the xRequestId to the get project metadata forbidden response
func (o *GetProjectMetadataForbidden) WithXRequestID(xRequestID string) *GetProjectMetadataForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get project metadata forbidden response
func (o *GetProjectMetadataForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get project metadata forbidden response
func (o *GetProjectMetadataForbidden) WithPayload(payload *models.Errors) *GetProjectMetadataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project metadata forbidden response
func (o *GetProjectMetadataForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectMetadataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectMetadataNotFoundCode is the HTTP code returned for type GetProjectMetadataNotFound
const GetProjectMetadataNotFoundCode int = 404

/*GetProjectMetadataNotFound Not found

swagger:response getProjectMetadataNotFound
*/
type GetProjectMetadataNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetProjectMetadataNotFound creates GetProjectMetadataNotFound with default headers values
func NewGetProjectMetadataNotFound() *GetProjectMetadataNotFound {

	return &GetProjectMetadataNotFound{}
}

// WithXRequestID adds the xRequestId to the get project metadata not found response
func (o *GetProjectMetadataNotFound) WithXRequestID(xRequestID string) *GetProjectMetadataNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get project metadata not found response
func (o *GetProjectMetadataNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get project metadata not found response
func (o *GetProjectMetadataNotFound) WithPayload(payload *models.Errors) *GetProjectMetadataNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project metadata not found response
func (o *GetProjectMetadataNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectMetadataNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectMetadataInternalServerErrorCode is the HTTP code returned for type GetProjectMetadataInternalServerError
const GetProjectMetadataInternalServerErrorCode int = 500

/*GetProjectMetadataInternalServerError Internal server error

swagger:response getProjectMetadataInternalServerError
*/
type GetProjectMetadataInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetProjectMetadataInternalServerError creates GetProjectMetadataInternalServerError with default headers values
func NewGetProjectMetadataInternalServerError() *GetProjectMetadataInternalServerError {

	return &GetProjectMetadataInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get project metadata internal server error response
func (o *GetProjectMetadataInternalServerError) WithXRequestID(xRequestID string) *GetProjectMetadataInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get project metadata internal server error response
func (o *GetProjectMetadataInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get project metadata internal server error response
func (o *GetProjectMetadataInternalServerError) WithPayload(payload *models.Errors) *GetProjectMetadataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project metadata internal server error response
func (o *GetProjectMetadataInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectMetadataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
