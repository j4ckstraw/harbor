// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateProjectMetadataOKCode is the HTTP code returned for type UpdateProjectMetadataOK
const UpdateProjectMetadataOKCode int = 200

/*UpdateProjectMetadataOK Success

swagger:response updateProjectMetadataOK
*/
type UpdateProjectMetadataOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateProjectMetadataOK creates UpdateProjectMetadataOK with default headers values
func NewUpdateProjectMetadataOK() *UpdateProjectMetadataOK {

	return &UpdateProjectMetadataOK{}
}

// WithXRequestID adds the xRequestId to the update project metadata o k response
func (o *UpdateProjectMetadataOK) WithXRequestID(xRequestID string) *UpdateProjectMetadataOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata o k response
func (o *UpdateProjectMetadataOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateProjectMetadataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateProjectMetadataBadRequestCode is the HTTP code returned for type UpdateProjectMetadataBadRequest
const UpdateProjectMetadataBadRequestCode int = 400

/*UpdateProjectMetadataBadRequest Bad request

swagger:response updateProjectMetadataBadRequest
*/
type UpdateProjectMetadataBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectMetadataBadRequest creates UpdateProjectMetadataBadRequest with default headers values
func NewUpdateProjectMetadataBadRequest() *UpdateProjectMetadataBadRequest {

	return &UpdateProjectMetadataBadRequest{}
}

// WithXRequestID adds the xRequestId to the update project metadata bad request response
func (o *UpdateProjectMetadataBadRequest) WithXRequestID(xRequestID string) *UpdateProjectMetadataBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata bad request response
func (o *UpdateProjectMetadataBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project metadata bad request response
func (o *UpdateProjectMetadataBadRequest) WithPayload(payload *models.Errors) *UpdateProjectMetadataBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project metadata bad request response
func (o *UpdateProjectMetadataBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectMetadataBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectMetadataUnauthorizedCode is the HTTP code returned for type UpdateProjectMetadataUnauthorized
const UpdateProjectMetadataUnauthorizedCode int = 401

/*UpdateProjectMetadataUnauthorized Unauthorized

swagger:response updateProjectMetadataUnauthorized
*/
type UpdateProjectMetadataUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectMetadataUnauthorized creates UpdateProjectMetadataUnauthorized with default headers values
func NewUpdateProjectMetadataUnauthorized() *UpdateProjectMetadataUnauthorized {

	return &UpdateProjectMetadataUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update project metadata unauthorized response
func (o *UpdateProjectMetadataUnauthorized) WithXRequestID(xRequestID string) *UpdateProjectMetadataUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata unauthorized response
func (o *UpdateProjectMetadataUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project metadata unauthorized response
func (o *UpdateProjectMetadataUnauthorized) WithPayload(payload *models.Errors) *UpdateProjectMetadataUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project metadata unauthorized response
func (o *UpdateProjectMetadataUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectMetadataUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectMetadataForbiddenCode is the HTTP code returned for type UpdateProjectMetadataForbidden
const UpdateProjectMetadataForbiddenCode int = 403

/*UpdateProjectMetadataForbidden Forbidden

swagger:response updateProjectMetadataForbidden
*/
type UpdateProjectMetadataForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectMetadataForbidden creates UpdateProjectMetadataForbidden with default headers values
func NewUpdateProjectMetadataForbidden() *UpdateProjectMetadataForbidden {

	return &UpdateProjectMetadataForbidden{}
}

// WithXRequestID adds the xRequestId to the update project metadata forbidden response
func (o *UpdateProjectMetadataForbidden) WithXRequestID(xRequestID string) *UpdateProjectMetadataForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata forbidden response
func (o *UpdateProjectMetadataForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project metadata forbidden response
func (o *UpdateProjectMetadataForbidden) WithPayload(payload *models.Errors) *UpdateProjectMetadataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project metadata forbidden response
func (o *UpdateProjectMetadataForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectMetadataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectMetadataNotFoundCode is the HTTP code returned for type UpdateProjectMetadataNotFound
const UpdateProjectMetadataNotFoundCode int = 404

/*UpdateProjectMetadataNotFound Not found

swagger:response updateProjectMetadataNotFound
*/
type UpdateProjectMetadataNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectMetadataNotFound creates UpdateProjectMetadataNotFound with default headers values
func NewUpdateProjectMetadataNotFound() *UpdateProjectMetadataNotFound {

	return &UpdateProjectMetadataNotFound{}
}

// WithXRequestID adds the xRequestId to the update project metadata not found response
func (o *UpdateProjectMetadataNotFound) WithXRequestID(xRequestID string) *UpdateProjectMetadataNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata not found response
func (o *UpdateProjectMetadataNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project metadata not found response
func (o *UpdateProjectMetadataNotFound) WithPayload(payload *models.Errors) *UpdateProjectMetadataNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project metadata not found response
func (o *UpdateProjectMetadataNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectMetadataNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectMetadataConflictCode is the HTTP code returned for type UpdateProjectMetadataConflict
const UpdateProjectMetadataConflictCode int = 409

/*UpdateProjectMetadataConflict Conflict

swagger:response updateProjectMetadataConflict
*/
type UpdateProjectMetadataConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectMetadataConflict creates UpdateProjectMetadataConflict with default headers values
func NewUpdateProjectMetadataConflict() *UpdateProjectMetadataConflict {

	return &UpdateProjectMetadataConflict{}
}

// WithXRequestID adds the xRequestId to the update project metadata conflict response
func (o *UpdateProjectMetadataConflict) WithXRequestID(xRequestID string) *UpdateProjectMetadataConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata conflict response
func (o *UpdateProjectMetadataConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project metadata conflict response
func (o *UpdateProjectMetadataConflict) WithPayload(payload *models.Errors) *UpdateProjectMetadataConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project metadata conflict response
func (o *UpdateProjectMetadataConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectMetadataConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProjectMetadataInternalServerErrorCode is the HTTP code returned for type UpdateProjectMetadataInternalServerError
const UpdateProjectMetadataInternalServerErrorCode int = 500

/*UpdateProjectMetadataInternalServerError Internal server error

swagger:response updateProjectMetadataInternalServerError
*/
type UpdateProjectMetadataInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateProjectMetadataInternalServerError creates UpdateProjectMetadataInternalServerError with default headers values
func NewUpdateProjectMetadataInternalServerError() *UpdateProjectMetadataInternalServerError {

	return &UpdateProjectMetadataInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update project metadata internal server error response
func (o *UpdateProjectMetadataInternalServerError) WithXRequestID(xRequestID string) *UpdateProjectMetadataInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update project metadata internal server error response
func (o *UpdateProjectMetadataInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update project metadata internal server error response
func (o *UpdateProjectMetadataInternalServerError) WithPayload(payload *models.Errors) *UpdateProjectMetadataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update project metadata internal server error response
func (o *UpdateProjectMetadataInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProjectMetadataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
