// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListProjectMetadatasHandlerFunc turns a function with the right signature into a list project metadatas handler
type ListProjectMetadatasHandlerFunc func(ListProjectMetadatasParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListProjectMetadatasHandlerFunc) Handle(params ListProjectMetadatasParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListProjectMetadatasHandler interface for that can handle valid list project metadatas params
type ListProjectMetadatasHandler interface {
	Handle(ListProjectMetadatasParams, interface{}) middleware.Responder
}

// NewListProjectMetadatas creates a new http.Handler for the list project metadatas operation
func NewListProjectMetadatas(ctx *middleware.Context, handler ListProjectMetadatasHandler) *ListProjectMetadatas {
	return &ListProjectMetadatas{Context: ctx, Handler: handler}
}

/*ListProjectMetadatas swagger:route GET /projects/{project_name_or_id}/metadatas/ projectMetadata listProjectMetadatas

Get the metadata of the specific project

Get the metadata of the specific project

*/
type ListProjectMetadatas struct {
	Context *middleware.Context
	Handler ListProjectMetadatasHandler
}

func (o *ListProjectMetadatas) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListProjectMetadatasParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
