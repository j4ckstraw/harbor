// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListProjectMetadatasOKCode is the HTTP code returned for type ListProjectMetadatasOK
const ListProjectMetadatasOKCode int = 200

/*ListProjectMetadatasOK Success

swagger:response listProjectMetadatasOK
*/
type ListProjectMetadatasOK struct {

	/*
	  In: Body
	*/
	Payload map[string]string `json:"body,omitempty"`
}

// NewListProjectMetadatasOK creates ListProjectMetadatasOK with default headers values
func NewListProjectMetadatasOK() *ListProjectMetadatasOK {

	return &ListProjectMetadatasOK{}
}

// WithPayload adds the payload to the list project metadatas o k response
func (o *ListProjectMetadatasOK) WithPayload(payload map[string]string) *ListProjectMetadatasOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project metadatas o k response
func (o *ListProjectMetadatasOK) SetPayload(payload map[string]string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMetadatasOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = make(map[string]string, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListProjectMetadatasBadRequestCode is the HTTP code returned for type ListProjectMetadatasBadRequest
const ListProjectMetadatasBadRequestCode int = 400

/*ListProjectMetadatasBadRequest Bad request

swagger:response listProjectMetadatasBadRequest
*/
type ListProjectMetadatasBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMetadatasBadRequest creates ListProjectMetadatasBadRequest with default headers values
func NewListProjectMetadatasBadRequest() *ListProjectMetadatasBadRequest {

	return &ListProjectMetadatasBadRequest{}
}

// WithXRequestID adds the xRequestId to the list project metadatas bad request response
func (o *ListProjectMetadatasBadRequest) WithXRequestID(xRequestID string) *ListProjectMetadatasBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project metadatas bad request response
func (o *ListProjectMetadatasBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project metadatas bad request response
func (o *ListProjectMetadatasBadRequest) WithPayload(payload *models.Errors) *ListProjectMetadatasBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project metadatas bad request response
func (o *ListProjectMetadatasBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMetadatasBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMetadatasUnauthorizedCode is the HTTP code returned for type ListProjectMetadatasUnauthorized
const ListProjectMetadatasUnauthorizedCode int = 401

/*ListProjectMetadatasUnauthorized Unauthorized

swagger:response listProjectMetadatasUnauthorized
*/
type ListProjectMetadatasUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMetadatasUnauthorized creates ListProjectMetadatasUnauthorized with default headers values
func NewListProjectMetadatasUnauthorized() *ListProjectMetadatasUnauthorized {

	return &ListProjectMetadatasUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list project metadatas unauthorized response
func (o *ListProjectMetadatasUnauthorized) WithXRequestID(xRequestID string) *ListProjectMetadatasUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project metadatas unauthorized response
func (o *ListProjectMetadatasUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project metadatas unauthorized response
func (o *ListProjectMetadatasUnauthorized) WithPayload(payload *models.Errors) *ListProjectMetadatasUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project metadatas unauthorized response
func (o *ListProjectMetadatasUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMetadatasUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMetadatasForbiddenCode is the HTTP code returned for type ListProjectMetadatasForbidden
const ListProjectMetadatasForbiddenCode int = 403

/*ListProjectMetadatasForbidden Forbidden

swagger:response listProjectMetadatasForbidden
*/
type ListProjectMetadatasForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMetadatasForbidden creates ListProjectMetadatasForbidden with default headers values
func NewListProjectMetadatasForbidden() *ListProjectMetadatasForbidden {

	return &ListProjectMetadatasForbidden{}
}

// WithXRequestID adds the xRequestId to the list project metadatas forbidden response
func (o *ListProjectMetadatasForbidden) WithXRequestID(xRequestID string) *ListProjectMetadatasForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project metadatas forbidden response
func (o *ListProjectMetadatasForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project metadatas forbidden response
func (o *ListProjectMetadatasForbidden) WithPayload(payload *models.Errors) *ListProjectMetadatasForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project metadatas forbidden response
func (o *ListProjectMetadatasForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMetadatasForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMetadatasNotFoundCode is the HTTP code returned for type ListProjectMetadatasNotFound
const ListProjectMetadatasNotFoundCode int = 404

/*ListProjectMetadatasNotFound Not found

swagger:response listProjectMetadatasNotFound
*/
type ListProjectMetadatasNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMetadatasNotFound creates ListProjectMetadatasNotFound with default headers values
func NewListProjectMetadatasNotFound() *ListProjectMetadatasNotFound {

	return &ListProjectMetadatasNotFound{}
}

// WithXRequestID adds the xRequestId to the list project metadatas not found response
func (o *ListProjectMetadatasNotFound) WithXRequestID(xRequestID string) *ListProjectMetadatasNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project metadatas not found response
func (o *ListProjectMetadatasNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project metadatas not found response
func (o *ListProjectMetadatasNotFound) WithPayload(payload *models.Errors) *ListProjectMetadatasNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project metadatas not found response
func (o *ListProjectMetadatasNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMetadatasNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProjectMetadatasInternalServerErrorCode is the HTTP code returned for type ListProjectMetadatasInternalServerError
const ListProjectMetadatasInternalServerErrorCode int = 500

/*ListProjectMetadatasInternalServerError Internal server error

swagger:response listProjectMetadatasInternalServerError
*/
type ListProjectMetadatasInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListProjectMetadatasInternalServerError creates ListProjectMetadatasInternalServerError with default headers values
func NewListProjectMetadatasInternalServerError() *ListProjectMetadatasInternalServerError {

	return &ListProjectMetadatasInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list project metadatas internal server error response
func (o *ListProjectMetadatasInternalServerError) WithXRequestID(xRequestID string) *ListProjectMetadatasInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list project metadatas internal server error response
func (o *ListProjectMetadatasInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list project metadatas internal server error response
func (o *ListProjectMetadatasInternalServerError) WithPayload(payload *models.Errors) *ListProjectMetadatasInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list project metadatas internal server error response
func (o *ListProjectMetadatasInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProjectMetadatasInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
