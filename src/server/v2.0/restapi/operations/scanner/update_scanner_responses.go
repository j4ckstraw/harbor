// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateScannerOKCode is the HTTP code returned for type UpdateScannerOK
const UpdateScannerOKCode int = 200

/*UpdateScannerOK Success

swagger:response updateScannerOK
*/
type UpdateScannerOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewUpdateScannerOK creates UpdateScannerOK with default headers values
func NewUpdateScannerOK() *UpdateScannerOK {

	return &UpdateScannerOK{}
}

// WithXRequestID adds the xRequestId to the update scanner o k response
func (o *UpdateScannerOK) WithXRequestID(xRequestID string) *UpdateScannerOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scanner o k response
func (o *UpdateScannerOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *UpdateScannerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateScannerUnauthorizedCode is the HTTP code returned for type UpdateScannerUnauthorized
const UpdateScannerUnauthorizedCode int = 401

/*UpdateScannerUnauthorized Unauthorized

swagger:response updateScannerUnauthorized
*/
type UpdateScannerUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScannerUnauthorized creates UpdateScannerUnauthorized with default headers values
func NewUpdateScannerUnauthorized() *UpdateScannerUnauthorized {

	return &UpdateScannerUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update scanner unauthorized response
func (o *UpdateScannerUnauthorized) WithXRequestID(xRequestID string) *UpdateScannerUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scanner unauthorized response
func (o *UpdateScannerUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scanner unauthorized response
func (o *UpdateScannerUnauthorized) WithPayload(payload *models.Errors) *UpdateScannerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scanner unauthorized response
func (o *UpdateScannerUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScannerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScannerForbiddenCode is the HTTP code returned for type UpdateScannerForbidden
const UpdateScannerForbiddenCode int = 403

/*UpdateScannerForbidden Forbidden

swagger:response updateScannerForbidden
*/
type UpdateScannerForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScannerForbidden creates UpdateScannerForbidden with default headers values
func NewUpdateScannerForbidden() *UpdateScannerForbidden {

	return &UpdateScannerForbidden{}
}

// WithXRequestID adds the xRequestId to the update scanner forbidden response
func (o *UpdateScannerForbidden) WithXRequestID(xRequestID string) *UpdateScannerForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scanner forbidden response
func (o *UpdateScannerForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scanner forbidden response
func (o *UpdateScannerForbidden) WithPayload(payload *models.Errors) *UpdateScannerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scanner forbidden response
func (o *UpdateScannerForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScannerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScannerNotFoundCode is the HTTP code returned for type UpdateScannerNotFound
const UpdateScannerNotFoundCode int = 404

/*UpdateScannerNotFound Not found

swagger:response updateScannerNotFound
*/
type UpdateScannerNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScannerNotFound creates UpdateScannerNotFound with default headers values
func NewUpdateScannerNotFound() *UpdateScannerNotFound {

	return &UpdateScannerNotFound{}
}

// WithXRequestID adds the xRequestId to the update scanner not found response
func (o *UpdateScannerNotFound) WithXRequestID(xRequestID string) *UpdateScannerNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scanner not found response
func (o *UpdateScannerNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scanner not found response
func (o *UpdateScannerNotFound) WithPayload(payload *models.Errors) *UpdateScannerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scanner not found response
func (o *UpdateScannerNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScannerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateScannerInternalServerErrorCode is the HTTP code returned for type UpdateScannerInternalServerError
const UpdateScannerInternalServerErrorCode int = 500

/*UpdateScannerInternalServerError Internal server error

swagger:response updateScannerInternalServerError
*/
type UpdateScannerInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateScannerInternalServerError creates UpdateScannerInternalServerError with default headers values
func NewUpdateScannerInternalServerError() *UpdateScannerInternalServerError {

	return &UpdateScannerInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update scanner internal server error response
func (o *UpdateScannerInternalServerError) WithXRequestID(xRequestID string) *UpdateScannerInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update scanner internal server error response
func (o *UpdateScannerInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update scanner internal server error response
func (o *UpdateScannerInternalServerError) WithPayload(payload *models.Errors) *UpdateScannerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update scanner internal server error response
func (o *UpdateScannerInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateScannerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
