// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// SetScannerAsDefaultOKCode is the HTTP code returned for type SetScannerAsDefaultOK
const SetScannerAsDefaultOKCode int = 200

/*SetScannerAsDefaultOK Successfully set the specified scanner registration as system default

swagger:response setScannerAsDefaultOK
*/
type SetScannerAsDefaultOK struct {
}

// NewSetScannerAsDefaultOK creates SetScannerAsDefaultOK with default headers values
func NewSetScannerAsDefaultOK() *SetScannerAsDefaultOK {

	return &SetScannerAsDefaultOK{}
}

// WriteResponse to the client
func (o *SetScannerAsDefaultOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetScannerAsDefaultUnauthorizedCode is the HTTP code returned for type SetScannerAsDefaultUnauthorized
const SetScannerAsDefaultUnauthorizedCode int = 401

/*SetScannerAsDefaultUnauthorized Unauthorized

swagger:response setScannerAsDefaultUnauthorized
*/
type SetScannerAsDefaultUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerAsDefaultUnauthorized creates SetScannerAsDefaultUnauthorized with default headers values
func NewSetScannerAsDefaultUnauthorized() *SetScannerAsDefaultUnauthorized {

	return &SetScannerAsDefaultUnauthorized{}
}

// WithXRequestID adds the xRequestId to the set scanner as default unauthorized response
func (o *SetScannerAsDefaultUnauthorized) WithXRequestID(xRequestID string) *SetScannerAsDefaultUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner as default unauthorized response
func (o *SetScannerAsDefaultUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner as default unauthorized response
func (o *SetScannerAsDefaultUnauthorized) WithPayload(payload *models.Errors) *SetScannerAsDefaultUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner as default unauthorized response
func (o *SetScannerAsDefaultUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerAsDefaultUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetScannerAsDefaultForbiddenCode is the HTTP code returned for type SetScannerAsDefaultForbidden
const SetScannerAsDefaultForbiddenCode int = 403

/*SetScannerAsDefaultForbidden Forbidden

swagger:response setScannerAsDefaultForbidden
*/
type SetScannerAsDefaultForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerAsDefaultForbidden creates SetScannerAsDefaultForbidden with default headers values
func NewSetScannerAsDefaultForbidden() *SetScannerAsDefaultForbidden {

	return &SetScannerAsDefaultForbidden{}
}

// WithXRequestID adds the xRequestId to the set scanner as default forbidden response
func (o *SetScannerAsDefaultForbidden) WithXRequestID(xRequestID string) *SetScannerAsDefaultForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner as default forbidden response
func (o *SetScannerAsDefaultForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner as default forbidden response
func (o *SetScannerAsDefaultForbidden) WithPayload(payload *models.Errors) *SetScannerAsDefaultForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner as default forbidden response
func (o *SetScannerAsDefaultForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerAsDefaultForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SetScannerAsDefaultInternalServerErrorCode is the HTTP code returned for type SetScannerAsDefaultInternalServerError
const SetScannerAsDefaultInternalServerErrorCode int = 500

/*SetScannerAsDefaultInternalServerError Internal server error

swagger:response setScannerAsDefaultInternalServerError
*/
type SetScannerAsDefaultInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSetScannerAsDefaultInternalServerError creates SetScannerAsDefaultInternalServerError with default headers values
func NewSetScannerAsDefaultInternalServerError() *SetScannerAsDefaultInternalServerError {

	return &SetScannerAsDefaultInternalServerError{}
}

// WithXRequestID adds the xRequestId to the set scanner as default internal server error response
func (o *SetScannerAsDefaultInternalServerError) WithXRequestID(xRequestID string) *SetScannerAsDefaultInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the set scanner as default internal server error response
func (o *SetScannerAsDefaultInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the set scanner as default internal server error response
func (o *SetScannerAsDefaultInternalServerError) WithPayload(payload *models.Errors) *SetScannerAsDefaultInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set scanner as default internal server error response
func (o *SetScannerAsDefaultInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetScannerAsDefaultInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
