// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetScannerOKCode is the HTTP code returned for type GetScannerOK
const GetScannerOKCode int = 200

/*GetScannerOK The details of the scanner registration.

swagger:response getScannerOK
*/
type GetScannerOK struct {

	/*
	  In: Body
	*/
	Payload *models.ScannerRegistration `json:"body,omitempty"`
}

// NewGetScannerOK creates GetScannerOK with default headers values
func NewGetScannerOK() *GetScannerOK {

	return &GetScannerOK{}
}

// WithPayload adds the payload to the get scanner o k response
func (o *GetScannerOK) WithPayload(payload *models.ScannerRegistration) *GetScannerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scanner o k response
func (o *GetScannerOK) SetPayload(payload *models.ScannerRegistration) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScannerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScannerUnauthorizedCode is the HTTP code returned for type GetScannerUnauthorized
const GetScannerUnauthorizedCode int = 401

/*GetScannerUnauthorized Unauthorized

swagger:response getScannerUnauthorized
*/
type GetScannerUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScannerUnauthorized creates GetScannerUnauthorized with default headers values
func NewGetScannerUnauthorized() *GetScannerUnauthorized {

	return &GetScannerUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get scanner unauthorized response
func (o *GetScannerUnauthorized) WithXRequestID(xRequestID string) *GetScannerUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scanner unauthorized response
func (o *GetScannerUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scanner unauthorized response
func (o *GetScannerUnauthorized) WithPayload(payload *models.Errors) *GetScannerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scanner unauthorized response
func (o *GetScannerUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScannerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScannerForbiddenCode is the HTTP code returned for type GetScannerForbidden
const GetScannerForbiddenCode int = 403

/*GetScannerForbidden Forbidden

swagger:response getScannerForbidden
*/
type GetScannerForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScannerForbidden creates GetScannerForbidden with default headers values
func NewGetScannerForbidden() *GetScannerForbidden {

	return &GetScannerForbidden{}
}

// WithXRequestID adds the xRequestId to the get scanner forbidden response
func (o *GetScannerForbidden) WithXRequestID(xRequestID string) *GetScannerForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scanner forbidden response
func (o *GetScannerForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scanner forbidden response
func (o *GetScannerForbidden) WithPayload(payload *models.Errors) *GetScannerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scanner forbidden response
func (o *GetScannerForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScannerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScannerNotFoundCode is the HTTP code returned for type GetScannerNotFound
const GetScannerNotFoundCode int = 404

/*GetScannerNotFound Not found

swagger:response getScannerNotFound
*/
type GetScannerNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScannerNotFound creates GetScannerNotFound with default headers values
func NewGetScannerNotFound() *GetScannerNotFound {

	return &GetScannerNotFound{}
}

// WithXRequestID adds the xRequestId to the get scanner not found response
func (o *GetScannerNotFound) WithXRequestID(xRequestID string) *GetScannerNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scanner not found response
func (o *GetScannerNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scanner not found response
func (o *GetScannerNotFound) WithPayload(payload *models.Errors) *GetScannerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scanner not found response
func (o *GetScannerNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScannerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScannerInternalServerErrorCode is the HTTP code returned for type GetScannerInternalServerError
const GetScannerInternalServerErrorCode int = 500

/*GetScannerInternalServerError Internal server error

swagger:response getScannerInternalServerError
*/
type GetScannerInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScannerInternalServerError creates GetScannerInternalServerError with default headers values
func NewGetScannerInternalServerError() *GetScannerInternalServerError {

	return &GetScannerInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get scanner internal server error response
func (o *GetScannerInternalServerError) WithXRequestID(xRequestID string) *GetScannerInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scanner internal server error response
func (o *GetScannerInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scanner internal server error response
func (o *GetScannerInternalServerError) WithPayload(payload *models.Errors) *GetScannerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scanner internal server error response
func (o *GetScannerInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScannerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
