// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetScannerAsDefaultHandlerFunc turns a function with the right signature into a set scanner as default handler
type SetScannerAsDefaultHandlerFunc func(SetScannerAsDefaultParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SetScannerAsDefaultHandlerFunc) Handle(params SetScannerAsDefaultParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SetScannerAsDefaultHandler interface for that can handle valid set scanner as default params
type SetScannerAsDefaultHandler interface {
	Handle(SetScannerAsDefaultParams, interface{}) middleware.Responder
}

// NewSetScannerAsDefault creates a new http.Handler for the set scanner as default operation
func NewSetScannerAsDefault(ctx *middleware.Context, handler SetScannerAsDefaultHandler) *SetScannerAsDefault {
	return &SetScannerAsDefault{Context: ctx, Handler: handler}
}

/*SetScannerAsDefault swagger:route PATCH /scanners/{registration_id} scanner setScannerAsDefault

Set system default scanner registration

Set the specified scanner registration as the system default one.


*/
type SetScannerAsDefault struct {
	Context *middleware.Context
	Handler SetScannerAsDefaultHandler
}

func (o *SetScannerAsDefault) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetScannerAsDefaultParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
