// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PingScannerHandlerFunc turns a function with the right signature into a ping scanner handler
type PingScannerHandlerFunc func(PingScannerParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PingScannerHandlerFunc) Handle(params PingScannerParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PingScannerHandler interface for that can handle valid ping scanner params
type PingScannerHandler interface {
	Handle(PingScannerParams, interface{}) middleware.Responder
}

// NewPingScanner creates a new http.Handler for the ping scanner operation
func NewPingScanner(ctx *middleware.Context, handler PingScannerHandler) *PingScanner {
	return &PingScanner{Context: ctx, Handler: handler}
}

/*PingScanner swagger:route POST /scanners/ping scanner pingScanner

Tests scanner registration settings

Pings scanner adapter to test endpoint URL and authorization settings.


*/
type PingScanner struct {
	Context *middleware.Context
	Handler PingScannerHandler
}

func (o *PingScanner) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPingScannerParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
