// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// PingScannerOKCode is the HTTP code returned for type PingScannerOK
const PingScannerOKCode int = 200

/*PingScannerOK Success

swagger:response pingScannerOK
*/
type PingScannerOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewPingScannerOK creates PingScannerOK with default headers values
func NewPingScannerOK() *PingScannerOK {

	return &PingScannerOK{}
}

// WithXRequestID adds the xRequestId to the ping scanner o k response
func (o *PingScannerOK) WithXRequestID(xRequestID string) *PingScannerOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping scanner o k response
func (o *PingScannerOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *PingScannerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PingScannerBadRequestCode is the HTTP code returned for type PingScannerBadRequest
const PingScannerBadRequestCode int = 400

/*PingScannerBadRequest Bad request

swagger:response pingScannerBadRequest
*/
type PingScannerBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingScannerBadRequest creates PingScannerBadRequest with default headers values
func NewPingScannerBadRequest() *PingScannerBadRequest {

	return &PingScannerBadRequest{}
}

// WithXRequestID adds the xRequestId to the ping scanner bad request response
func (o *PingScannerBadRequest) WithXRequestID(xRequestID string) *PingScannerBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping scanner bad request response
func (o *PingScannerBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping scanner bad request response
func (o *PingScannerBadRequest) WithPayload(payload *models.Errors) *PingScannerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping scanner bad request response
func (o *PingScannerBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingScannerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingScannerUnauthorizedCode is the HTTP code returned for type PingScannerUnauthorized
const PingScannerUnauthorizedCode int = 401

/*PingScannerUnauthorized Unauthorized

swagger:response pingScannerUnauthorized
*/
type PingScannerUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingScannerUnauthorized creates PingScannerUnauthorized with default headers values
func NewPingScannerUnauthorized() *PingScannerUnauthorized {

	return &PingScannerUnauthorized{}
}

// WithXRequestID adds the xRequestId to the ping scanner unauthorized response
func (o *PingScannerUnauthorized) WithXRequestID(xRequestID string) *PingScannerUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping scanner unauthorized response
func (o *PingScannerUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping scanner unauthorized response
func (o *PingScannerUnauthorized) WithPayload(payload *models.Errors) *PingScannerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping scanner unauthorized response
func (o *PingScannerUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingScannerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingScannerForbiddenCode is the HTTP code returned for type PingScannerForbidden
const PingScannerForbiddenCode int = 403

/*PingScannerForbidden Forbidden

swagger:response pingScannerForbidden
*/
type PingScannerForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingScannerForbidden creates PingScannerForbidden with default headers values
func NewPingScannerForbidden() *PingScannerForbidden {

	return &PingScannerForbidden{}
}

// WithXRequestID adds the xRequestId to the ping scanner forbidden response
func (o *PingScannerForbidden) WithXRequestID(xRequestID string) *PingScannerForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping scanner forbidden response
func (o *PingScannerForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping scanner forbidden response
func (o *PingScannerForbidden) WithPayload(payload *models.Errors) *PingScannerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping scanner forbidden response
func (o *PingScannerForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingScannerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingScannerInternalServerErrorCode is the HTTP code returned for type PingScannerInternalServerError
const PingScannerInternalServerErrorCode int = 500

/*PingScannerInternalServerError Internal server error

swagger:response pingScannerInternalServerError
*/
type PingScannerInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingScannerInternalServerError creates PingScannerInternalServerError with default headers values
func NewPingScannerInternalServerError() *PingScannerInternalServerError {

	return &PingScannerInternalServerError{}
}

// WithXRequestID adds the xRequestId to the ping scanner internal server error response
func (o *PingScannerInternalServerError) WithXRequestID(xRequestID string) *PingScannerInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping scanner internal server error response
func (o *PingScannerInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping scanner internal server error response
func (o *PingScannerInternalServerError) WithPayload(payload *models.Errors) *PingScannerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping scanner internal server error response
func (o *PingScannerInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingScannerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
