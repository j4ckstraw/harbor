// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateScannerCreatedCode is the HTTP code returned for type CreateScannerCreated
const CreateScannerCreatedCode int = 201

/*CreateScannerCreated Created successfully

swagger:response createScannerCreated
*/
type CreateScannerCreated struct {
	/*The URL of the created resource

	 */
	Location string `json:"Location"`
}

// NewCreateScannerCreated creates CreateScannerCreated with default headers values
func NewCreateScannerCreated() *CreateScannerCreated {

	return &CreateScannerCreated{}
}

// WithLocation adds the location to the create scanner created response
func (o *CreateScannerCreated) WithLocation(location string) *CreateScannerCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create scanner created response
func (o *CreateScannerCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *CreateScannerCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateScannerBadRequestCode is the HTTP code returned for type CreateScannerBadRequest
const CreateScannerBadRequestCode int = 400

/*CreateScannerBadRequest Bad request

swagger:response createScannerBadRequest
*/
type CreateScannerBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateScannerBadRequest creates CreateScannerBadRequest with default headers values
func NewCreateScannerBadRequest() *CreateScannerBadRequest {

	return &CreateScannerBadRequest{}
}

// WithXRequestID adds the xRequestId to the create scanner bad request response
func (o *CreateScannerBadRequest) WithXRequestID(xRequestID string) *CreateScannerBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create scanner bad request response
func (o *CreateScannerBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create scanner bad request response
func (o *CreateScannerBadRequest) WithPayload(payload *models.Errors) *CreateScannerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scanner bad request response
func (o *CreateScannerBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScannerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateScannerUnauthorizedCode is the HTTP code returned for type CreateScannerUnauthorized
const CreateScannerUnauthorizedCode int = 401

/*CreateScannerUnauthorized Unauthorized

swagger:response createScannerUnauthorized
*/
type CreateScannerUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateScannerUnauthorized creates CreateScannerUnauthorized with default headers values
func NewCreateScannerUnauthorized() *CreateScannerUnauthorized {

	return &CreateScannerUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create scanner unauthorized response
func (o *CreateScannerUnauthorized) WithXRequestID(xRequestID string) *CreateScannerUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create scanner unauthorized response
func (o *CreateScannerUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create scanner unauthorized response
func (o *CreateScannerUnauthorized) WithPayload(payload *models.Errors) *CreateScannerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scanner unauthorized response
func (o *CreateScannerUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScannerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateScannerForbiddenCode is the HTTP code returned for type CreateScannerForbidden
const CreateScannerForbiddenCode int = 403

/*CreateScannerForbidden Forbidden

swagger:response createScannerForbidden
*/
type CreateScannerForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateScannerForbidden creates CreateScannerForbidden with default headers values
func NewCreateScannerForbidden() *CreateScannerForbidden {

	return &CreateScannerForbidden{}
}

// WithXRequestID adds the xRequestId to the create scanner forbidden response
func (o *CreateScannerForbidden) WithXRequestID(xRequestID string) *CreateScannerForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create scanner forbidden response
func (o *CreateScannerForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create scanner forbidden response
func (o *CreateScannerForbidden) WithPayload(payload *models.Errors) *CreateScannerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scanner forbidden response
func (o *CreateScannerForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScannerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateScannerInternalServerErrorCode is the HTTP code returned for type CreateScannerInternalServerError
const CreateScannerInternalServerErrorCode int = 500

/*CreateScannerInternalServerError Internal server error

swagger:response createScannerInternalServerError
*/
type CreateScannerInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateScannerInternalServerError creates CreateScannerInternalServerError with default headers values
func NewCreateScannerInternalServerError() *CreateScannerInternalServerError {

	return &CreateScannerInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create scanner internal server error response
func (o *CreateScannerInternalServerError) WithXRequestID(xRequestID string) *CreateScannerInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create scanner internal server error response
func (o *CreateScannerInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create scanner internal server error response
func (o *CreateScannerInternalServerError) WithPayload(payload *models.Errors) *CreateScannerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create scanner internal server error response
func (o *CreateScannerInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateScannerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
