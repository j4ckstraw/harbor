// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListScannersOKCode is the HTTP code returned for type ListScannersOK
const ListScannersOKCode int = 200

/*ListScannersOK A list of scanner registrations.

swagger:response listScannersOK
*/
type ListScannersOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ScannerRegistration `json:"body,omitempty"`
}

// NewListScannersOK creates ListScannersOK with default headers values
func NewListScannersOK() *ListScannersOK {

	return &ListScannersOK{}
}

// WithLink adds the link to the list scanners o k response
func (o *ListScannersOK) WithLink(link string) *ListScannersOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list scanners o k response
func (o *ListScannersOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list scanners o k response
func (o *ListScannersOK) WithXTotalCount(xTotalCount int64) *ListScannersOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list scanners o k response
func (o *ListScannersOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list scanners o k response
func (o *ListScannersOK) WithPayload(payload []*models.ScannerRegistration) *ListScannersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list scanners o k response
func (o *ListScannersOK) SetPayload(payload []*models.ScannerRegistration) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScannersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ScannerRegistration, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListScannersBadRequestCode is the HTTP code returned for type ListScannersBadRequest
const ListScannersBadRequestCode int = 400

/*ListScannersBadRequest Bad request

swagger:response listScannersBadRequest
*/
type ListScannersBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListScannersBadRequest creates ListScannersBadRequest with default headers values
func NewListScannersBadRequest() *ListScannersBadRequest {

	return &ListScannersBadRequest{}
}

// WithXRequestID adds the xRequestId to the list scanners bad request response
func (o *ListScannersBadRequest) WithXRequestID(xRequestID string) *ListScannersBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list scanners bad request response
func (o *ListScannersBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list scanners bad request response
func (o *ListScannersBadRequest) WithPayload(payload *models.Errors) *ListScannersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list scanners bad request response
func (o *ListScannersBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScannersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListScannersUnauthorizedCode is the HTTP code returned for type ListScannersUnauthorized
const ListScannersUnauthorizedCode int = 401

/*ListScannersUnauthorized Unauthorized

swagger:response listScannersUnauthorized
*/
type ListScannersUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListScannersUnauthorized creates ListScannersUnauthorized with default headers values
func NewListScannersUnauthorized() *ListScannersUnauthorized {

	return &ListScannersUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list scanners unauthorized response
func (o *ListScannersUnauthorized) WithXRequestID(xRequestID string) *ListScannersUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list scanners unauthorized response
func (o *ListScannersUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list scanners unauthorized response
func (o *ListScannersUnauthorized) WithPayload(payload *models.Errors) *ListScannersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list scanners unauthorized response
func (o *ListScannersUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScannersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListScannersForbiddenCode is the HTTP code returned for type ListScannersForbidden
const ListScannersForbiddenCode int = 403

/*ListScannersForbidden Forbidden

swagger:response listScannersForbidden
*/
type ListScannersForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListScannersForbidden creates ListScannersForbidden with default headers values
func NewListScannersForbidden() *ListScannersForbidden {

	return &ListScannersForbidden{}
}

// WithXRequestID adds the xRequestId to the list scanners forbidden response
func (o *ListScannersForbidden) WithXRequestID(xRequestID string) *ListScannersForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list scanners forbidden response
func (o *ListScannersForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list scanners forbidden response
func (o *ListScannersForbidden) WithPayload(payload *models.Errors) *ListScannersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list scanners forbidden response
func (o *ListScannersForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScannersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListScannersInternalServerErrorCode is the HTTP code returned for type ListScannersInternalServerError
const ListScannersInternalServerErrorCode int = 500

/*ListScannersInternalServerError Internal server error

swagger:response listScannersInternalServerError
*/
type ListScannersInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListScannersInternalServerError creates ListScannersInternalServerError with default headers values
func NewListScannersInternalServerError() *ListScannersInternalServerError {

	return &ListScannersInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list scanners internal server error response
func (o *ListScannersInternalServerError) WithXRequestID(xRequestID string) *ListScannersInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list scanners internal server error response
func (o *ListScannersInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list scanners internal server error response
func (o *ListScannersInternalServerError) WithPayload(payload *models.Errors) *ListScannersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list scanners internal server error response
func (o *ListScannersInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScannersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
