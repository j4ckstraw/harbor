// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DeleteScannerOKCode is the HTTP code returned for type DeleteScannerOK
const DeleteScannerOKCode int = 200

/*DeleteScannerOK Deleted successfully and return the deleted registration

swagger:response deleteScannerOK
*/
type DeleteScannerOK struct {

	/*
	  In: Body
	*/
	Payload *models.ScannerRegistration `json:"body,omitempty"`
}

// NewDeleteScannerOK creates DeleteScannerOK with default headers values
func NewDeleteScannerOK() *DeleteScannerOK {

	return &DeleteScannerOK{}
}

// WithPayload adds the payload to the delete scanner o k response
func (o *DeleteScannerOK) WithPayload(payload *models.ScannerRegistration) *DeleteScannerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete scanner o k response
func (o *DeleteScannerOK) SetPayload(payload *models.ScannerRegistration) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteScannerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteScannerUnauthorizedCode is the HTTP code returned for type DeleteScannerUnauthorized
const DeleteScannerUnauthorizedCode int = 401

/*DeleteScannerUnauthorized Unauthorized

swagger:response deleteScannerUnauthorized
*/
type DeleteScannerUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteScannerUnauthorized creates DeleteScannerUnauthorized with default headers values
func NewDeleteScannerUnauthorized() *DeleteScannerUnauthorized {

	return &DeleteScannerUnauthorized{}
}

// WithXRequestID adds the xRequestId to the delete scanner unauthorized response
func (o *DeleteScannerUnauthorized) WithXRequestID(xRequestID string) *DeleteScannerUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete scanner unauthorized response
func (o *DeleteScannerUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete scanner unauthorized response
func (o *DeleteScannerUnauthorized) WithPayload(payload *models.Errors) *DeleteScannerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete scanner unauthorized response
func (o *DeleteScannerUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteScannerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteScannerForbiddenCode is the HTTP code returned for type DeleteScannerForbidden
const DeleteScannerForbiddenCode int = 403

/*DeleteScannerForbidden Forbidden

swagger:response deleteScannerForbidden
*/
type DeleteScannerForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteScannerForbidden creates DeleteScannerForbidden with default headers values
func NewDeleteScannerForbidden() *DeleteScannerForbidden {

	return &DeleteScannerForbidden{}
}

// WithXRequestID adds the xRequestId to the delete scanner forbidden response
func (o *DeleteScannerForbidden) WithXRequestID(xRequestID string) *DeleteScannerForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete scanner forbidden response
func (o *DeleteScannerForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete scanner forbidden response
func (o *DeleteScannerForbidden) WithPayload(payload *models.Errors) *DeleteScannerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete scanner forbidden response
func (o *DeleteScannerForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteScannerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteScannerNotFoundCode is the HTTP code returned for type DeleteScannerNotFound
const DeleteScannerNotFoundCode int = 404

/*DeleteScannerNotFound Not found

swagger:response deleteScannerNotFound
*/
type DeleteScannerNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteScannerNotFound creates DeleteScannerNotFound with default headers values
func NewDeleteScannerNotFound() *DeleteScannerNotFound {

	return &DeleteScannerNotFound{}
}

// WithXRequestID adds the xRequestId to the delete scanner not found response
func (o *DeleteScannerNotFound) WithXRequestID(xRequestID string) *DeleteScannerNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete scanner not found response
func (o *DeleteScannerNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete scanner not found response
func (o *DeleteScannerNotFound) WithPayload(payload *models.Errors) *DeleteScannerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete scanner not found response
func (o *DeleteScannerNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteScannerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteScannerInternalServerErrorCode is the HTTP code returned for type DeleteScannerInternalServerError
const DeleteScannerInternalServerErrorCode int = 500

/*DeleteScannerInternalServerError Internal server error

swagger:response deleteScannerInternalServerError
*/
type DeleteScannerInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteScannerInternalServerError creates DeleteScannerInternalServerError with default headers values
func NewDeleteScannerInternalServerError() *DeleteScannerInternalServerError {

	return &DeleteScannerInternalServerError{}
}

// WithXRequestID adds the xRequestId to the delete scanner internal server error response
func (o *DeleteScannerInternalServerError) WithXRequestID(xRequestID string) *DeleteScannerInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the delete scanner internal server error response
func (o *DeleteScannerInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the delete scanner internal server error response
func (o *DeleteScannerInternalServerError) WithPayload(payload *models.Errors) *DeleteScannerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete scanner internal server error response
func (o *DeleteScannerInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteScannerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
