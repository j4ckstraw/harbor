// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PingOIDCHandlerFunc turns a function with the right signature into a ping OIDC handler
type PingOIDCHandlerFunc func(PingOIDCParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PingOIDCHandlerFunc) Handle(params PingOIDCParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PingOIDCHandler interface for that can handle valid ping OIDC params
type PingOIDCHandler interface {
	Handle(PingOIDCParams, interface{}) middleware.Responder
}

// NewPingOIDC creates a new http.Handler for the ping OIDC operation
func NewPingOIDC(ctx *middleware.Context, handler PingOIDCHandler) *PingOIDC {
	return &PingOIDC{Context: ctx, Handler: handler}
}

/*PingOIDC swagger:route POST /system/oidc/ping oidc pingOidc

Test the OIDC endpoint.

Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.


*/
type PingOIDC struct {
	Context *middleware.Context
	Handler PingOIDCHandler
}

func (o *PingOIDC) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPingOIDCParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PingOIDCBody ping OIDC body
//
// swagger:model PingOIDCBody
type PingOIDCBody struct {

	// The URL of OIDC endpoint to be tested.
	URL string `json:"url,omitempty"`

	// Whether the certificate should be verified
	VerifyCert bool `json:"verify_cert,omitempty"`
}

// Validate validates this ping OIDC body
func (o *PingOIDCBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PingOIDCBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PingOIDCBody) UnmarshalBinary(b []byte) error {
	var res PingOIDCBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
