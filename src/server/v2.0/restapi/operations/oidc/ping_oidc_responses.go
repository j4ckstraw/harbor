// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// PingOIDCOKCode is the HTTP code returned for type PingOIDCOK
const PingOIDCOKCode int = 200

/*PingOIDCOK Success

swagger:response pingOidcOK
*/
type PingOIDCOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewPingOIDCOK creates PingOIDCOK with default headers values
func NewPingOIDCOK() *PingOIDCOK {

	return &PingOIDCOK{}
}

// WithXRequestID adds the xRequestId to the ping Oidc o k response
func (o *PingOIDCOK) WithXRequestID(xRequestID string) *PingOIDCOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping Oidc o k response
func (o *PingOIDCOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *PingOIDCOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PingOIDCBadRequestCode is the HTTP code returned for type PingOIDCBadRequest
const PingOIDCBadRequestCode int = 400

/*PingOIDCBadRequest Bad request

swagger:response pingOidcBadRequest
*/
type PingOIDCBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingOIDCBadRequest creates PingOIDCBadRequest with default headers values
func NewPingOIDCBadRequest() *PingOIDCBadRequest {

	return &PingOIDCBadRequest{}
}

// WithXRequestID adds the xRequestId to the ping Oidc bad request response
func (o *PingOIDCBadRequest) WithXRequestID(xRequestID string) *PingOIDCBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping Oidc bad request response
func (o *PingOIDCBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping Oidc bad request response
func (o *PingOIDCBadRequest) WithPayload(payload *models.Errors) *PingOIDCBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping Oidc bad request response
func (o *PingOIDCBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingOIDCBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingOIDCUnauthorizedCode is the HTTP code returned for type PingOIDCUnauthorized
const PingOIDCUnauthorizedCode int = 401

/*PingOIDCUnauthorized Unauthorized

swagger:response pingOidcUnauthorized
*/
type PingOIDCUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingOIDCUnauthorized creates PingOIDCUnauthorized with default headers values
func NewPingOIDCUnauthorized() *PingOIDCUnauthorized {

	return &PingOIDCUnauthorized{}
}

// WithXRequestID adds the xRequestId to the ping Oidc unauthorized response
func (o *PingOIDCUnauthorized) WithXRequestID(xRequestID string) *PingOIDCUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping Oidc unauthorized response
func (o *PingOIDCUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping Oidc unauthorized response
func (o *PingOIDCUnauthorized) WithPayload(payload *models.Errors) *PingOIDCUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping Oidc unauthorized response
func (o *PingOIDCUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingOIDCUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingOIDCForbiddenCode is the HTTP code returned for type PingOIDCForbidden
const PingOIDCForbiddenCode int = 403

/*PingOIDCForbidden Forbidden

swagger:response pingOidcForbidden
*/
type PingOIDCForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingOIDCForbidden creates PingOIDCForbidden with default headers values
func NewPingOIDCForbidden() *PingOIDCForbidden {

	return &PingOIDCForbidden{}
}

// WithXRequestID adds the xRequestId to the ping Oidc forbidden response
func (o *PingOIDCForbidden) WithXRequestID(xRequestID string) *PingOIDCForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping Oidc forbidden response
func (o *PingOIDCForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping Oidc forbidden response
func (o *PingOIDCForbidden) WithPayload(payload *models.Errors) *PingOIDCForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping Oidc forbidden response
func (o *PingOIDCForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingOIDCForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
