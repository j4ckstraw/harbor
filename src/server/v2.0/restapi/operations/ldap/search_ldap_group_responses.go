// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// SearchLdapGroupOKCode is the HTTP code returned for type SearchLdapGroupOK
const SearchLdapGroupOKCode int = 200

/*SearchLdapGroupOK Search ldap group successfully.

swagger:response searchLdapGroupOK
*/
type SearchLdapGroupOK struct {

	/*
	  In: Body
	*/
	Payload []*models.UserGroup `json:"body,omitempty"`
}

// NewSearchLdapGroupOK creates SearchLdapGroupOK with default headers values
func NewSearchLdapGroupOK() *SearchLdapGroupOK {

	return &SearchLdapGroupOK{}
}

// WithPayload adds the payload to the search ldap group o k response
func (o *SearchLdapGroupOK) WithPayload(payload []*models.UserGroup) *SearchLdapGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap group o k response
func (o *SearchLdapGroupOK) SetPayload(payload []*models.UserGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserGroup, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SearchLdapGroupBadRequestCode is the HTTP code returned for type SearchLdapGroupBadRequest
const SearchLdapGroupBadRequestCode int = 400

/*SearchLdapGroupBadRequest Bad request

swagger:response searchLdapGroupBadRequest
*/
type SearchLdapGroupBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapGroupBadRequest creates SearchLdapGroupBadRequest with default headers values
func NewSearchLdapGroupBadRequest() *SearchLdapGroupBadRequest {

	return &SearchLdapGroupBadRequest{}
}

// WithXRequestID adds the xRequestId to the search ldap group bad request response
func (o *SearchLdapGroupBadRequest) WithXRequestID(xRequestID string) *SearchLdapGroupBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap group bad request response
func (o *SearchLdapGroupBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap group bad request response
func (o *SearchLdapGroupBadRequest) WithPayload(payload *models.Errors) *SearchLdapGroupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap group bad request response
func (o *SearchLdapGroupBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapGroupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchLdapGroupUnauthorizedCode is the HTTP code returned for type SearchLdapGroupUnauthorized
const SearchLdapGroupUnauthorizedCode int = 401

/*SearchLdapGroupUnauthorized Unauthorized

swagger:response searchLdapGroupUnauthorized
*/
type SearchLdapGroupUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapGroupUnauthorized creates SearchLdapGroupUnauthorized with default headers values
func NewSearchLdapGroupUnauthorized() *SearchLdapGroupUnauthorized {

	return &SearchLdapGroupUnauthorized{}
}

// WithXRequestID adds the xRequestId to the search ldap group unauthorized response
func (o *SearchLdapGroupUnauthorized) WithXRequestID(xRequestID string) *SearchLdapGroupUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap group unauthorized response
func (o *SearchLdapGroupUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap group unauthorized response
func (o *SearchLdapGroupUnauthorized) WithPayload(payload *models.Errors) *SearchLdapGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap group unauthorized response
func (o *SearchLdapGroupUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchLdapGroupForbiddenCode is the HTTP code returned for type SearchLdapGroupForbidden
const SearchLdapGroupForbiddenCode int = 403

/*SearchLdapGroupForbidden Forbidden

swagger:response searchLdapGroupForbidden
*/
type SearchLdapGroupForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapGroupForbidden creates SearchLdapGroupForbidden with default headers values
func NewSearchLdapGroupForbidden() *SearchLdapGroupForbidden {

	return &SearchLdapGroupForbidden{}
}

// WithXRequestID adds the xRequestId to the search ldap group forbidden response
func (o *SearchLdapGroupForbidden) WithXRequestID(xRequestID string) *SearchLdapGroupForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap group forbidden response
func (o *SearchLdapGroupForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap group forbidden response
func (o *SearchLdapGroupForbidden) WithPayload(payload *models.Errors) *SearchLdapGroupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap group forbidden response
func (o *SearchLdapGroupForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapGroupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchLdapGroupInternalServerErrorCode is the HTTP code returned for type SearchLdapGroupInternalServerError
const SearchLdapGroupInternalServerErrorCode int = 500

/*SearchLdapGroupInternalServerError Internal server error

swagger:response searchLdapGroupInternalServerError
*/
type SearchLdapGroupInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapGroupInternalServerError creates SearchLdapGroupInternalServerError with default headers values
func NewSearchLdapGroupInternalServerError() *SearchLdapGroupInternalServerError {

	return &SearchLdapGroupInternalServerError{}
}

// WithXRequestID adds the xRequestId to the search ldap group internal server error response
func (o *SearchLdapGroupInternalServerError) WithXRequestID(xRequestID string) *SearchLdapGroupInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap group internal server error response
func (o *SearchLdapGroupInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap group internal server error response
func (o *SearchLdapGroupInternalServerError) WithPayload(payload *models.Errors) *SearchLdapGroupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap group internal server error response
func (o *SearchLdapGroupInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapGroupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
