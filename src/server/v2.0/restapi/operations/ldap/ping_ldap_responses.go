// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// PingLdapOKCode is the HTTP code returned for type PingLdapOK
const PingLdapOKCode int = 200

/*PingLdapOK Ping ldap service successfully.

swagger:response pingLdapOK
*/
type PingLdapOK struct {

	/*
	  In: Body
	*/
	Payload *models.LdapPingResult `json:"body,omitempty"`
}

// NewPingLdapOK creates PingLdapOK with default headers values
func NewPingLdapOK() *PingLdapOK {

	return &PingLdapOK{}
}

// WithPayload adds the payload to the ping ldap o k response
func (o *PingLdapOK) WithPayload(payload *models.LdapPingResult) *PingLdapOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping ldap o k response
func (o *PingLdapOK) SetPayload(payload *models.LdapPingResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingLdapOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingLdapBadRequestCode is the HTTP code returned for type PingLdapBadRequest
const PingLdapBadRequestCode int = 400

/*PingLdapBadRequest Bad request

swagger:response pingLdapBadRequest
*/
type PingLdapBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingLdapBadRequest creates PingLdapBadRequest with default headers values
func NewPingLdapBadRequest() *PingLdapBadRequest {

	return &PingLdapBadRequest{}
}

// WithXRequestID adds the xRequestId to the ping ldap bad request response
func (o *PingLdapBadRequest) WithXRequestID(xRequestID string) *PingLdapBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping ldap bad request response
func (o *PingLdapBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping ldap bad request response
func (o *PingLdapBadRequest) WithPayload(payload *models.Errors) *PingLdapBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping ldap bad request response
func (o *PingLdapBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingLdapBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingLdapUnauthorizedCode is the HTTP code returned for type PingLdapUnauthorized
const PingLdapUnauthorizedCode int = 401

/*PingLdapUnauthorized Unauthorized

swagger:response pingLdapUnauthorized
*/
type PingLdapUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingLdapUnauthorized creates PingLdapUnauthorized with default headers values
func NewPingLdapUnauthorized() *PingLdapUnauthorized {

	return &PingLdapUnauthorized{}
}

// WithXRequestID adds the xRequestId to the ping ldap unauthorized response
func (o *PingLdapUnauthorized) WithXRequestID(xRequestID string) *PingLdapUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping ldap unauthorized response
func (o *PingLdapUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping ldap unauthorized response
func (o *PingLdapUnauthorized) WithPayload(payload *models.Errors) *PingLdapUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping ldap unauthorized response
func (o *PingLdapUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingLdapUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingLdapForbiddenCode is the HTTP code returned for type PingLdapForbidden
const PingLdapForbiddenCode int = 403

/*PingLdapForbidden Forbidden

swagger:response pingLdapForbidden
*/
type PingLdapForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingLdapForbidden creates PingLdapForbidden with default headers values
func NewPingLdapForbidden() *PingLdapForbidden {

	return &PingLdapForbidden{}
}

// WithXRequestID adds the xRequestId to the ping ldap forbidden response
func (o *PingLdapForbidden) WithXRequestID(xRequestID string) *PingLdapForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping ldap forbidden response
func (o *PingLdapForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping ldap forbidden response
func (o *PingLdapForbidden) WithPayload(payload *models.Errors) *PingLdapForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping ldap forbidden response
func (o *PingLdapForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingLdapForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PingLdapInternalServerErrorCode is the HTTP code returned for type PingLdapInternalServerError
const PingLdapInternalServerErrorCode int = 500

/*PingLdapInternalServerError Internal server error

swagger:response pingLdapInternalServerError
*/
type PingLdapInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewPingLdapInternalServerError creates PingLdapInternalServerError with default headers values
func NewPingLdapInternalServerError() *PingLdapInternalServerError {

	return &PingLdapInternalServerError{}
}

// WithXRequestID adds the xRequestId to the ping ldap internal server error response
func (o *PingLdapInternalServerError) WithXRequestID(xRequestID string) *PingLdapInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the ping ldap internal server error response
func (o *PingLdapInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the ping ldap internal server error response
func (o *PingLdapInternalServerError) WithPayload(payload *models.Errors) *PingLdapInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ping ldap internal server error response
func (o *PingLdapInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PingLdapInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
