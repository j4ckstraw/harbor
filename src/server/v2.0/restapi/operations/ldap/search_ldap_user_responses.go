// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// SearchLdapUserOKCode is the HTTP code returned for type SearchLdapUserOK
const SearchLdapUserOKCode int = 200

/*SearchLdapUserOK Search ldap users successfully.

swagger:response searchLdapUserOK
*/
type SearchLdapUserOK struct {

	/*
	  In: Body
	*/
	Payload []*models.LdapUser `json:"body,omitempty"`
}

// NewSearchLdapUserOK creates SearchLdapUserOK with default headers values
func NewSearchLdapUserOK() *SearchLdapUserOK {

	return &SearchLdapUserOK{}
}

// WithPayload adds the payload to the search ldap user o k response
func (o *SearchLdapUserOK) WithPayload(payload []*models.LdapUser) *SearchLdapUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap user o k response
func (o *SearchLdapUserOK) SetPayload(payload []*models.LdapUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.LdapUser, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SearchLdapUserBadRequestCode is the HTTP code returned for type SearchLdapUserBadRequest
const SearchLdapUserBadRequestCode int = 400

/*SearchLdapUserBadRequest Bad request

swagger:response searchLdapUserBadRequest
*/
type SearchLdapUserBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapUserBadRequest creates SearchLdapUserBadRequest with default headers values
func NewSearchLdapUserBadRequest() *SearchLdapUserBadRequest {

	return &SearchLdapUserBadRequest{}
}

// WithXRequestID adds the xRequestId to the search ldap user bad request response
func (o *SearchLdapUserBadRequest) WithXRequestID(xRequestID string) *SearchLdapUserBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap user bad request response
func (o *SearchLdapUserBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap user bad request response
func (o *SearchLdapUserBadRequest) WithPayload(payload *models.Errors) *SearchLdapUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap user bad request response
func (o *SearchLdapUserBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchLdapUserUnauthorizedCode is the HTTP code returned for type SearchLdapUserUnauthorized
const SearchLdapUserUnauthorizedCode int = 401

/*SearchLdapUserUnauthorized Unauthorized

swagger:response searchLdapUserUnauthorized
*/
type SearchLdapUserUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapUserUnauthorized creates SearchLdapUserUnauthorized with default headers values
func NewSearchLdapUserUnauthorized() *SearchLdapUserUnauthorized {

	return &SearchLdapUserUnauthorized{}
}

// WithXRequestID adds the xRequestId to the search ldap user unauthorized response
func (o *SearchLdapUserUnauthorized) WithXRequestID(xRequestID string) *SearchLdapUserUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap user unauthorized response
func (o *SearchLdapUserUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap user unauthorized response
func (o *SearchLdapUserUnauthorized) WithPayload(payload *models.Errors) *SearchLdapUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap user unauthorized response
func (o *SearchLdapUserUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchLdapUserForbiddenCode is the HTTP code returned for type SearchLdapUserForbidden
const SearchLdapUserForbiddenCode int = 403

/*SearchLdapUserForbidden Forbidden

swagger:response searchLdapUserForbidden
*/
type SearchLdapUserForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapUserForbidden creates SearchLdapUserForbidden with default headers values
func NewSearchLdapUserForbidden() *SearchLdapUserForbidden {

	return &SearchLdapUserForbidden{}
}

// WithXRequestID adds the xRequestId to the search ldap user forbidden response
func (o *SearchLdapUserForbidden) WithXRequestID(xRequestID string) *SearchLdapUserForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap user forbidden response
func (o *SearchLdapUserForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap user forbidden response
func (o *SearchLdapUserForbidden) WithPayload(payload *models.Errors) *SearchLdapUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap user forbidden response
func (o *SearchLdapUserForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchLdapUserInternalServerErrorCode is the HTTP code returned for type SearchLdapUserInternalServerError
const SearchLdapUserInternalServerErrorCode int = 500

/*SearchLdapUserInternalServerError Internal server error

swagger:response searchLdapUserInternalServerError
*/
type SearchLdapUserInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchLdapUserInternalServerError creates SearchLdapUserInternalServerError with default headers values
func NewSearchLdapUserInternalServerError() *SearchLdapUserInternalServerError {

	return &SearchLdapUserInternalServerError{}
}

// WithXRequestID adds the xRequestId to the search ldap user internal server error response
func (o *SearchLdapUserInternalServerError) WithXRequestID(xRequestID string) *SearchLdapUserInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search ldap user internal server error response
func (o *SearchLdapUserInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search ldap user internal server error response
func (o *SearchLdapUserInternalServerError) WithPayload(payload *models.Errors) *SearchLdapUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search ldap user internal server error response
func (o *SearchLdapUserInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchLdapUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
