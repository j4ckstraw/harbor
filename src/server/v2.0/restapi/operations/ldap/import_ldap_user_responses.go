// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ImportLdapUserOKCode is the HTTP code returned for type ImportLdapUserOK
const ImportLdapUserOKCode int = 200

/*ImportLdapUserOK Add ldap users successfully.

swagger:response importLdapUserOK
*/
type ImportLdapUserOK struct {
}

// NewImportLdapUserOK creates ImportLdapUserOK with default headers values
func NewImportLdapUserOK() *ImportLdapUserOK {

	return &ImportLdapUserOK{}
}

// WriteResponse to the client
func (o *ImportLdapUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ImportLdapUserBadRequestCode is the HTTP code returned for type ImportLdapUserBadRequest
const ImportLdapUserBadRequestCode int = 400

/*ImportLdapUserBadRequest Bad request

swagger:response importLdapUserBadRequest
*/
type ImportLdapUserBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewImportLdapUserBadRequest creates ImportLdapUserBadRequest with default headers values
func NewImportLdapUserBadRequest() *ImportLdapUserBadRequest {

	return &ImportLdapUserBadRequest{}
}

// WithXRequestID adds the xRequestId to the import ldap user bad request response
func (o *ImportLdapUserBadRequest) WithXRequestID(xRequestID string) *ImportLdapUserBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the import ldap user bad request response
func (o *ImportLdapUserBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the import ldap user bad request response
func (o *ImportLdapUserBadRequest) WithPayload(payload *models.Errors) *ImportLdapUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import ldap user bad request response
func (o *ImportLdapUserBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportLdapUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportLdapUserUnauthorizedCode is the HTTP code returned for type ImportLdapUserUnauthorized
const ImportLdapUserUnauthorizedCode int = 401

/*ImportLdapUserUnauthorized Unauthorized

swagger:response importLdapUserUnauthorized
*/
type ImportLdapUserUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewImportLdapUserUnauthorized creates ImportLdapUserUnauthorized with default headers values
func NewImportLdapUserUnauthorized() *ImportLdapUserUnauthorized {

	return &ImportLdapUserUnauthorized{}
}

// WithXRequestID adds the xRequestId to the import ldap user unauthorized response
func (o *ImportLdapUserUnauthorized) WithXRequestID(xRequestID string) *ImportLdapUserUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the import ldap user unauthorized response
func (o *ImportLdapUserUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the import ldap user unauthorized response
func (o *ImportLdapUserUnauthorized) WithPayload(payload *models.Errors) *ImportLdapUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import ldap user unauthorized response
func (o *ImportLdapUserUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportLdapUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportLdapUserForbiddenCode is the HTTP code returned for type ImportLdapUserForbidden
const ImportLdapUserForbiddenCode int = 403

/*ImportLdapUserForbidden Forbidden

swagger:response importLdapUserForbidden
*/
type ImportLdapUserForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewImportLdapUserForbidden creates ImportLdapUserForbidden with default headers values
func NewImportLdapUserForbidden() *ImportLdapUserForbidden {

	return &ImportLdapUserForbidden{}
}

// WithXRequestID adds the xRequestId to the import ldap user forbidden response
func (o *ImportLdapUserForbidden) WithXRequestID(xRequestID string) *ImportLdapUserForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the import ldap user forbidden response
func (o *ImportLdapUserForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the import ldap user forbidden response
func (o *ImportLdapUserForbidden) WithPayload(payload *models.Errors) *ImportLdapUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import ldap user forbidden response
func (o *ImportLdapUserForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportLdapUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportLdapUserNotFoundCode is the HTTP code returned for type ImportLdapUserNotFound
const ImportLdapUserNotFoundCode int = 404

/*ImportLdapUserNotFound Failed import some users.

swagger:response importLdapUserNotFound
*/
type ImportLdapUserNotFound struct {

	/*
	  In: Body
	*/
	Payload []*models.LdapFailedImportUser `json:"body,omitempty"`
}

// NewImportLdapUserNotFound creates ImportLdapUserNotFound with default headers values
func NewImportLdapUserNotFound() *ImportLdapUserNotFound {

	return &ImportLdapUserNotFound{}
}

// WithPayload adds the payload to the import ldap user not found response
func (o *ImportLdapUserNotFound) WithPayload(payload []*models.LdapFailedImportUser) *ImportLdapUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import ldap user not found response
func (o *ImportLdapUserNotFound) SetPayload(payload []*models.LdapFailedImportUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportLdapUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.LdapFailedImportUser, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ImportLdapUserInternalServerErrorCode is the HTTP code returned for type ImportLdapUserInternalServerError
const ImportLdapUserInternalServerErrorCode int = 500

/*ImportLdapUserInternalServerError Internal server error

swagger:response importLdapUserInternalServerError
*/
type ImportLdapUserInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewImportLdapUserInternalServerError creates ImportLdapUserInternalServerError with default headers values
func NewImportLdapUserInternalServerError() *ImportLdapUserInternalServerError {

	return &ImportLdapUserInternalServerError{}
}

// WithXRequestID adds the xRequestId to the import ldap user internal server error response
func (o *ImportLdapUserInternalServerError) WithXRequestID(xRequestID string) *ImportLdapUserInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the import ldap user internal server error response
func (o *ImportLdapUserInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the import ldap user internal server error response
func (o *ImportLdapUserInternalServerError) WithPayload(payload *models.Errors) *ImportLdapUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import ldap user internal server error response
func (o *ImportLdapUserInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportLdapUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
