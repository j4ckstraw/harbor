// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreateRetentionCreatedCode is the HTTP code returned for type CreateRetentionCreated
const CreateRetentionCreatedCode int = 201

/*CreateRetentionCreated Created

swagger:response createRetentionCreated
*/
type CreateRetentionCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreateRetentionCreated creates CreateRetentionCreated with default headers values
func NewCreateRetentionCreated() *CreateRetentionCreated {

	return &CreateRetentionCreated{}
}

// WithLocation adds the location to the create retention created response
func (o *CreateRetentionCreated) WithLocation(location string) *CreateRetentionCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create retention created response
func (o *CreateRetentionCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create retention created response
func (o *CreateRetentionCreated) WithXRequestID(xRequestID string) *CreateRetentionCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create retention created response
func (o *CreateRetentionCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreateRetentionCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateRetentionBadRequestCode is the HTTP code returned for type CreateRetentionBadRequest
const CreateRetentionBadRequestCode int = 400

/*CreateRetentionBadRequest Bad request

swagger:response createRetentionBadRequest
*/
type CreateRetentionBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRetentionBadRequest creates CreateRetentionBadRequest with default headers values
func NewCreateRetentionBadRequest() *CreateRetentionBadRequest {

	return &CreateRetentionBadRequest{}
}

// WithXRequestID adds the xRequestId to the create retention bad request response
func (o *CreateRetentionBadRequest) WithXRequestID(xRequestID string) *CreateRetentionBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create retention bad request response
func (o *CreateRetentionBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create retention bad request response
func (o *CreateRetentionBadRequest) WithPayload(payload *models.Errors) *CreateRetentionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create retention bad request response
func (o *CreateRetentionBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRetentionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRetentionUnauthorizedCode is the HTTP code returned for type CreateRetentionUnauthorized
const CreateRetentionUnauthorizedCode int = 401

/*CreateRetentionUnauthorized Unauthorized

swagger:response createRetentionUnauthorized
*/
type CreateRetentionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRetentionUnauthorized creates CreateRetentionUnauthorized with default headers values
func NewCreateRetentionUnauthorized() *CreateRetentionUnauthorized {

	return &CreateRetentionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create retention unauthorized response
func (o *CreateRetentionUnauthorized) WithXRequestID(xRequestID string) *CreateRetentionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create retention unauthorized response
func (o *CreateRetentionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create retention unauthorized response
func (o *CreateRetentionUnauthorized) WithPayload(payload *models.Errors) *CreateRetentionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create retention unauthorized response
func (o *CreateRetentionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRetentionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRetentionForbiddenCode is the HTTP code returned for type CreateRetentionForbidden
const CreateRetentionForbiddenCode int = 403

/*CreateRetentionForbidden Forbidden

swagger:response createRetentionForbidden
*/
type CreateRetentionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRetentionForbidden creates CreateRetentionForbidden with default headers values
func NewCreateRetentionForbidden() *CreateRetentionForbidden {

	return &CreateRetentionForbidden{}
}

// WithXRequestID adds the xRequestId to the create retention forbidden response
func (o *CreateRetentionForbidden) WithXRequestID(xRequestID string) *CreateRetentionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create retention forbidden response
func (o *CreateRetentionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create retention forbidden response
func (o *CreateRetentionForbidden) WithPayload(payload *models.Errors) *CreateRetentionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create retention forbidden response
func (o *CreateRetentionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRetentionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRetentionInternalServerErrorCode is the HTTP code returned for type CreateRetentionInternalServerError
const CreateRetentionInternalServerErrorCode int = 500

/*CreateRetentionInternalServerError Internal server error

swagger:response createRetentionInternalServerError
*/
type CreateRetentionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreateRetentionInternalServerError creates CreateRetentionInternalServerError with default headers values
func NewCreateRetentionInternalServerError() *CreateRetentionInternalServerError {

	return &CreateRetentionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create retention internal server error response
func (o *CreateRetentionInternalServerError) WithXRequestID(xRequestID string) *CreateRetentionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create retention internal server error response
func (o *CreateRetentionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create retention internal server error response
func (o *CreateRetentionInternalServerError) WithPayload(payload *models.Errors) *CreateRetentionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create retention internal server error response
func (o *CreateRetentionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRetentionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
