// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetRetentionOKCode is the HTTP code returned for type GetRetentionOK
const GetRetentionOKCode int = 200

/*GetRetentionOK Get Retention Policy successfully.

swagger:response getRetentionOK
*/
type GetRetentionOK struct {

	/*
	  In: Body
	*/
	Payload *models.RetentionPolicy `json:"body,omitempty"`
}

// NewGetRetentionOK creates GetRetentionOK with default headers values
func NewGetRetentionOK() *GetRetentionOK {

	return &GetRetentionOK{}
}

// WithPayload adds the payload to the get retention o k response
func (o *GetRetentionOK) WithPayload(payload *models.RetentionPolicy) *GetRetentionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention o k response
func (o *GetRetentionOK) SetPayload(payload *models.RetentionPolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRetentionUnauthorizedCode is the HTTP code returned for type GetRetentionUnauthorized
const GetRetentionUnauthorizedCode int = 401

/*GetRetentionUnauthorized Unauthorized

swagger:response getRetentionUnauthorized
*/
type GetRetentionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRetentionUnauthorized creates GetRetentionUnauthorized with default headers values
func NewGetRetentionUnauthorized() *GetRetentionUnauthorized {

	return &GetRetentionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get retention unauthorized response
func (o *GetRetentionUnauthorized) WithXRequestID(xRequestID string) *GetRetentionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get retention unauthorized response
func (o *GetRetentionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get retention unauthorized response
func (o *GetRetentionUnauthorized) WithPayload(payload *models.Errors) *GetRetentionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention unauthorized response
func (o *GetRetentionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRetentionForbiddenCode is the HTTP code returned for type GetRetentionForbidden
const GetRetentionForbiddenCode int = 403

/*GetRetentionForbidden Forbidden

swagger:response getRetentionForbidden
*/
type GetRetentionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRetentionForbidden creates GetRetentionForbidden with default headers values
func NewGetRetentionForbidden() *GetRetentionForbidden {

	return &GetRetentionForbidden{}
}

// WithXRequestID adds the xRequestId to the get retention forbidden response
func (o *GetRetentionForbidden) WithXRequestID(xRequestID string) *GetRetentionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get retention forbidden response
func (o *GetRetentionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get retention forbidden response
func (o *GetRetentionForbidden) WithPayload(payload *models.Errors) *GetRetentionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention forbidden response
func (o *GetRetentionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRetentionInternalServerErrorCode is the HTTP code returned for type GetRetentionInternalServerError
const GetRetentionInternalServerErrorCode int = 500

/*GetRetentionInternalServerError Internal server error

swagger:response getRetentionInternalServerError
*/
type GetRetentionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRetentionInternalServerError creates GetRetentionInternalServerError with default headers values
func NewGetRetentionInternalServerError() *GetRetentionInternalServerError {

	return &GetRetentionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get retention internal server error response
func (o *GetRetentionInternalServerError) WithXRequestID(xRequestID string) *GetRetentionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get retention internal server error response
func (o *GetRetentionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get retention internal server error response
func (o *GetRetentionInternalServerError) WithPayload(payload *models.Errors) *GetRetentionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention internal server error response
func (o *GetRetentionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
