// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetRetentionTaskLogOKCode is the HTTP code returned for type GetRetentionTaskLogOK
const GetRetentionTaskLogOKCode int = 200

/*GetRetentionTaskLogOK Get Retention job task log successfully.

swagger:response getRetentionTaskLogOK
*/
type GetRetentionTaskLogOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetRetentionTaskLogOK creates GetRetentionTaskLogOK with default headers values
func NewGetRetentionTaskLogOK() *GetRetentionTaskLogOK {

	return &GetRetentionTaskLogOK{}
}

// WithPayload adds the payload to the get retention task log o k response
func (o *GetRetentionTaskLogOK) WithPayload(payload string) *GetRetentionTaskLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention task log o k response
func (o *GetRetentionTaskLogOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionTaskLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRetentionTaskLogUnauthorizedCode is the HTTP code returned for type GetRetentionTaskLogUnauthorized
const GetRetentionTaskLogUnauthorizedCode int = 401

/*GetRetentionTaskLogUnauthorized Unauthorized

swagger:response getRetentionTaskLogUnauthorized
*/
type GetRetentionTaskLogUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRetentionTaskLogUnauthorized creates GetRetentionTaskLogUnauthorized with default headers values
func NewGetRetentionTaskLogUnauthorized() *GetRetentionTaskLogUnauthorized {

	return &GetRetentionTaskLogUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get retention task log unauthorized response
func (o *GetRetentionTaskLogUnauthorized) WithXRequestID(xRequestID string) *GetRetentionTaskLogUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get retention task log unauthorized response
func (o *GetRetentionTaskLogUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get retention task log unauthorized response
func (o *GetRetentionTaskLogUnauthorized) WithPayload(payload *models.Errors) *GetRetentionTaskLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention task log unauthorized response
func (o *GetRetentionTaskLogUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionTaskLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRetentionTaskLogForbiddenCode is the HTTP code returned for type GetRetentionTaskLogForbidden
const GetRetentionTaskLogForbiddenCode int = 403

/*GetRetentionTaskLogForbidden Forbidden

swagger:response getRetentionTaskLogForbidden
*/
type GetRetentionTaskLogForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRetentionTaskLogForbidden creates GetRetentionTaskLogForbidden with default headers values
func NewGetRetentionTaskLogForbidden() *GetRetentionTaskLogForbidden {

	return &GetRetentionTaskLogForbidden{}
}

// WithXRequestID adds the xRequestId to the get retention task log forbidden response
func (o *GetRetentionTaskLogForbidden) WithXRequestID(xRequestID string) *GetRetentionTaskLogForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get retention task log forbidden response
func (o *GetRetentionTaskLogForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get retention task log forbidden response
func (o *GetRetentionTaskLogForbidden) WithPayload(payload *models.Errors) *GetRetentionTaskLogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention task log forbidden response
func (o *GetRetentionTaskLogForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionTaskLogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRetentionTaskLogInternalServerErrorCode is the HTTP code returned for type GetRetentionTaskLogInternalServerError
const GetRetentionTaskLogInternalServerErrorCode int = 500

/*GetRetentionTaskLogInternalServerError Internal server error

swagger:response getRetentionTaskLogInternalServerError
*/
type GetRetentionTaskLogInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetRetentionTaskLogInternalServerError creates GetRetentionTaskLogInternalServerError with default headers values
func NewGetRetentionTaskLogInternalServerError() *GetRetentionTaskLogInternalServerError {

	return &GetRetentionTaskLogInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get retention task log internal server error response
func (o *GetRetentionTaskLogInternalServerError) WithXRequestID(xRequestID string) *GetRetentionTaskLogInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get retention task log internal server error response
func (o *GetRetentionTaskLogInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get retention task log internal server error response
func (o *GetRetentionTaskLogInternalServerError) WithPayload(payload *models.Errors) *GetRetentionTaskLogInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get retention task log internal server error response
func (o *GetRetentionTaskLogInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRetentionTaskLogInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
