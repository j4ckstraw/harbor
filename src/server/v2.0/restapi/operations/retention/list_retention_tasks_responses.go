// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListRetentionTasksOKCode is the HTTP code returned for type ListRetentionTasksOK
const ListRetentionTasksOKCode int = 200

/*ListRetentionTasksOK Get Retention job tasks successfully.

swagger:response listRetentionTasksOK
*/
type ListRetentionTasksOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.RetentionExecutionTask `json:"body,omitempty"`
}

// NewListRetentionTasksOK creates ListRetentionTasksOK with default headers values
func NewListRetentionTasksOK() *ListRetentionTasksOK {

	return &ListRetentionTasksOK{}
}

// WithLink adds the link to the list retention tasks o k response
func (o *ListRetentionTasksOK) WithLink(link string) *ListRetentionTasksOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list retention tasks o k response
func (o *ListRetentionTasksOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list retention tasks o k response
func (o *ListRetentionTasksOK) WithXTotalCount(xTotalCount int64) *ListRetentionTasksOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list retention tasks o k response
func (o *ListRetentionTasksOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list retention tasks o k response
func (o *ListRetentionTasksOK) WithPayload(payload []*models.RetentionExecutionTask) *ListRetentionTasksOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention tasks o k response
func (o *ListRetentionTasksOK) SetPayload(payload []*models.RetentionExecutionTask) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionTasksOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.RetentionExecutionTask, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRetentionTasksUnauthorizedCode is the HTTP code returned for type ListRetentionTasksUnauthorized
const ListRetentionTasksUnauthorizedCode int = 401

/*ListRetentionTasksUnauthorized Unauthorized

swagger:response listRetentionTasksUnauthorized
*/
type ListRetentionTasksUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRetentionTasksUnauthorized creates ListRetentionTasksUnauthorized with default headers values
func NewListRetentionTasksUnauthorized() *ListRetentionTasksUnauthorized {

	return &ListRetentionTasksUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list retention tasks unauthorized response
func (o *ListRetentionTasksUnauthorized) WithXRequestID(xRequestID string) *ListRetentionTasksUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list retention tasks unauthorized response
func (o *ListRetentionTasksUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list retention tasks unauthorized response
func (o *ListRetentionTasksUnauthorized) WithPayload(payload *models.Errors) *ListRetentionTasksUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention tasks unauthorized response
func (o *ListRetentionTasksUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionTasksUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRetentionTasksForbiddenCode is the HTTP code returned for type ListRetentionTasksForbidden
const ListRetentionTasksForbiddenCode int = 403

/*ListRetentionTasksForbidden Forbidden

swagger:response listRetentionTasksForbidden
*/
type ListRetentionTasksForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRetentionTasksForbidden creates ListRetentionTasksForbidden with default headers values
func NewListRetentionTasksForbidden() *ListRetentionTasksForbidden {

	return &ListRetentionTasksForbidden{}
}

// WithXRequestID adds the xRequestId to the list retention tasks forbidden response
func (o *ListRetentionTasksForbidden) WithXRequestID(xRequestID string) *ListRetentionTasksForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list retention tasks forbidden response
func (o *ListRetentionTasksForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list retention tasks forbidden response
func (o *ListRetentionTasksForbidden) WithPayload(payload *models.Errors) *ListRetentionTasksForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention tasks forbidden response
func (o *ListRetentionTasksForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionTasksForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRetentionTasksInternalServerErrorCode is the HTTP code returned for type ListRetentionTasksInternalServerError
const ListRetentionTasksInternalServerErrorCode int = 500

/*ListRetentionTasksInternalServerError Internal server error

swagger:response listRetentionTasksInternalServerError
*/
type ListRetentionTasksInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRetentionTasksInternalServerError creates ListRetentionTasksInternalServerError with default headers values
func NewListRetentionTasksInternalServerError() *ListRetentionTasksInternalServerError {

	return &ListRetentionTasksInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list retention tasks internal server error response
func (o *ListRetentionTasksInternalServerError) WithXRequestID(xRequestID string) *ListRetentionTasksInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list retention tasks internal server error response
func (o *ListRetentionTasksInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list retention tasks internal server error response
func (o *ListRetentionTasksInternalServerError) WithPayload(payload *models.Errors) *ListRetentionTasksInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention tasks internal server error response
func (o *ListRetentionTasksInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionTasksInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
