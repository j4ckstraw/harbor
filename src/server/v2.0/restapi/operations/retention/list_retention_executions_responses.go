// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListRetentionExecutionsOKCode is the HTTP code returned for type ListRetentionExecutionsOK
const ListRetentionExecutionsOKCode int = 200

/*ListRetentionExecutionsOK Get a Retention execution successfully.

swagger:response listRetentionExecutionsOK
*/
type ListRetentionExecutionsOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.RetentionExecution `json:"body,omitempty"`
}

// NewListRetentionExecutionsOK creates ListRetentionExecutionsOK with default headers values
func NewListRetentionExecutionsOK() *ListRetentionExecutionsOK {

	return &ListRetentionExecutionsOK{}
}

// WithLink adds the link to the list retention executions o k response
func (o *ListRetentionExecutionsOK) WithLink(link string) *ListRetentionExecutionsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list retention executions o k response
func (o *ListRetentionExecutionsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list retention executions o k response
func (o *ListRetentionExecutionsOK) WithXTotalCount(xTotalCount int64) *ListRetentionExecutionsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list retention executions o k response
func (o *ListRetentionExecutionsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list retention executions o k response
func (o *ListRetentionExecutionsOK) WithPayload(payload []*models.RetentionExecution) *ListRetentionExecutionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention executions o k response
func (o *ListRetentionExecutionsOK) SetPayload(payload []*models.RetentionExecution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionExecutionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.RetentionExecution, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRetentionExecutionsUnauthorizedCode is the HTTP code returned for type ListRetentionExecutionsUnauthorized
const ListRetentionExecutionsUnauthorizedCode int = 401

/*ListRetentionExecutionsUnauthorized Unauthorized

swagger:response listRetentionExecutionsUnauthorized
*/
type ListRetentionExecutionsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRetentionExecutionsUnauthorized creates ListRetentionExecutionsUnauthorized with default headers values
func NewListRetentionExecutionsUnauthorized() *ListRetentionExecutionsUnauthorized {

	return &ListRetentionExecutionsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list retention executions unauthorized response
func (o *ListRetentionExecutionsUnauthorized) WithXRequestID(xRequestID string) *ListRetentionExecutionsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list retention executions unauthorized response
func (o *ListRetentionExecutionsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list retention executions unauthorized response
func (o *ListRetentionExecutionsUnauthorized) WithPayload(payload *models.Errors) *ListRetentionExecutionsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention executions unauthorized response
func (o *ListRetentionExecutionsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionExecutionsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRetentionExecutionsForbiddenCode is the HTTP code returned for type ListRetentionExecutionsForbidden
const ListRetentionExecutionsForbiddenCode int = 403

/*ListRetentionExecutionsForbidden Forbidden

swagger:response listRetentionExecutionsForbidden
*/
type ListRetentionExecutionsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRetentionExecutionsForbidden creates ListRetentionExecutionsForbidden with default headers values
func NewListRetentionExecutionsForbidden() *ListRetentionExecutionsForbidden {

	return &ListRetentionExecutionsForbidden{}
}

// WithXRequestID adds the xRequestId to the list retention executions forbidden response
func (o *ListRetentionExecutionsForbidden) WithXRequestID(xRequestID string) *ListRetentionExecutionsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list retention executions forbidden response
func (o *ListRetentionExecutionsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list retention executions forbidden response
func (o *ListRetentionExecutionsForbidden) WithPayload(payload *models.Errors) *ListRetentionExecutionsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention executions forbidden response
func (o *ListRetentionExecutionsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionExecutionsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListRetentionExecutionsInternalServerErrorCode is the HTTP code returned for type ListRetentionExecutionsInternalServerError
const ListRetentionExecutionsInternalServerErrorCode int = 500

/*ListRetentionExecutionsInternalServerError Internal server error

swagger:response listRetentionExecutionsInternalServerError
*/
type ListRetentionExecutionsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListRetentionExecutionsInternalServerError creates ListRetentionExecutionsInternalServerError with default headers values
func NewListRetentionExecutionsInternalServerError() *ListRetentionExecutionsInternalServerError {

	return &ListRetentionExecutionsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list retention executions internal server error response
func (o *ListRetentionExecutionsInternalServerError) WithXRequestID(xRequestID string) *ListRetentionExecutionsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list retention executions internal server error response
func (o *ListRetentionExecutionsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list retention executions internal server error response
func (o *ListRetentionExecutionsInternalServerError) WithPayload(payload *models.Errors) *ListRetentionExecutionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list retention executions internal server error response
func (o *ListRetentionExecutionsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRetentionExecutionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
