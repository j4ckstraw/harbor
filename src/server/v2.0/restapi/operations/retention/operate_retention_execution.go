// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OperateRetentionExecutionHandlerFunc turns a function with the right signature into a operate retention execution handler
type OperateRetentionExecutionHandlerFunc func(OperateRetentionExecutionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn OperateRetentionExecutionHandlerFunc) Handle(params OperateRetentionExecutionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// OperateRetentionExecutionHandler interface for that can handle valid operate retention execution params
type OperateRetentionExecutionHandler interface {
	Handle(OperateRetentionExecutionParams, interface{}) middleware.Responder
}

// NewOperateRetentionExecution creates a new http.Handler for the operate retention execution operation
func NewOperateRetentionExecution(ctx *middleware.Context, handler OperateRetentionExecutionHandler) *OperateRetentionExecution {
	return &OperateRetentionExecution{Context: ctx, Handler: handler}
}

/*OperateRetentionExecution swagger:route PATCH /retentions/{id}/executions/{eid} Retention operateRetentionExecution

Stop a Retention execution

Stop a Retention execution, only support "stop" action now.

*/
type OperateRetentionExecution struct {
	Context *middleware.Context
	Handler OperateRetentionExecutionHandler
}

func (o *OperateRetentionExecution) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOperateRetentionExecutionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// OperateRetentionExecutionBody operate retention execution body
//
// swagger:model OperateRetentionExecutionBody
type OperateRetentionExecutionBody struct {

	// action
	Action string `json:"action,omitempty"`
}

// Validate validates this operate retention execution body
func (o *OperateRetentionExecutionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OperateRetentionExecutionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OperateRetentionExecutionBody) UnmarshalBinary(b []byte) error {
	var res OperateRetentionExecutionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
