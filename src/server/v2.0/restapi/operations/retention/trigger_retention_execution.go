// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TriggerRetentionExecutionHandlerFunc turns a function with the right signature into a trigger retention execution handler
type TriggerRetentionExecutionHandlerFunc func(TriggerRetentionExecutionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn TriggerRetentionExecutionHandlerFunc) Handle(params TriggerRetentionExecutionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// TriggerRetentionExecutionHandler interface for that can handle valid trigger retention execution params
type TriggerRetentionExecutionHandler interface {
	Handle(TriggerRetentionExecutionParams, interface{}) middleware.Responder
}

// NewTriggerRetentionExecution creates a new http.Handler for the trigger retention execution operation
func NewTriggerRetentionExecution(ctx *middleware.Context, handler TriggerRetentionExecutionHandler) *TriggerRetentionExecution {
	return &TriggerRetentionExecution{Context: ctx, Handler: handler}
}

/*TriggerRetentionExecution swagger:route POST /retentions/{id}/executions Retention triggerRetentionExecution

Trigger a Retention Execution

Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.

*/
type TriggerRetentionExecution struct {
	Context *middleware.Context
	Handler TriggerRetentionExecutionHandler
}

func (o *TriggerRetentionExecution) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTriggerRetentionExecutionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TriggerRetentionExecutionBody trigger retention execution body
//
// swagger:model TriggerRetentionExecutionBody
type TriggerRetentionExecutionBody struct {

	// dry run
	DryRun bool `json:"dry_run,omitempty"`
}

// Validate validates this trigger retention execution body
func (o *TriggerRetentionExecutionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TriggerRetentionExecutionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TriggerRetentionExecutionBody) UnmarshalBinary(b []byte) error {
	var res TriggerRetentionExecutionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
