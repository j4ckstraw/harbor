// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateRetentionHandlerFunc turns a function with the right signature into a update retention handler
type UpdateRetentionHandlerFunc func(UpdateRetentionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateRetentionHandlerFunc) Handle(params UpdateRetentionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateRetentionHandler interface for that can handle valid update retention params
type UpdateRetentionHandler interface {
	Handle(UpdateRetentionParams, interface{}) middleware.Responder
}

// NewUpdateRetention creates a new http.Handler for the update retention operation
func NewUpdateRetention(ctx *middleware.Context, handler UpdateRetentionHandler) *UpdateRetention {
	return &UpdateRetention{Context: ctx, Handler: handler}
}

/*UpdateRetention swagger:route PUT /retentions/{id} Retention updateRetention

Update Retention Policy

Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.

*/
type UpdateRetention struct {
	Context *middleware.Context
	Handler UpdateRetentionHandler
}

func (o *UpdateRetention) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateRetentionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
