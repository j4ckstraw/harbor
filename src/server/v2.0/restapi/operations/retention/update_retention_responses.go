// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdateRetentionOKCode is the HTTP code returned for type UpdateRetentionOK
const UpdateRetentionOKCode int = 200

/*UpdateRetentionOK Update Retention Policy successfully.

swagger:response updateRetentionOK
*/
type UpdateRetentionOK struct {
}

// NewUpdateRetentionOK creates UpdateRetentionOK with default headers values
func NewUpdateRetentionOK() *UpdateRetentionOK {

	return &UpdateRetentionOK{}
}

// WriteResponse to the client
func (o *UpdateRetentionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateRetentionUnauthorizedCode is the HTTP code returned for type UpdateRetentionUnauthorized
const UpdateRetentionUnauthorizedCode int = 401

/*UpdateRetentionUnauthorized Unauthorized

swagger:response updateRetentionUnauthorized
*/
type UpdateRetentionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRetentionUnauthorized creates UpdateRetentionUnauthorized with default headers values
func NewUpdateRetentionUnauthorized() *UpdateRetentionUnauthorized {

	return &UpdateRetentionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update retention unauthorized response
func (o *UpdateRetentionUnauthorized) WithXRequestID(xRequestID string) *UpdateRetentionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update retention unauthorized response
func (o *UpdateRetentionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update retention unauthorized response
func (o *UpdateRetentionUnauthorized) WithPayload(payload *models.Errors) *UpdateRetentionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update retention unauthorized response
func (o *UpdateRetentionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRetentionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRetentionForbiddenCode is the HTTP code returned for type UpdateRetentionForbidden
const UpdateRetentionForbiddenCode int = 403

/*UpdateRetentionForbidden Forbidden

swagger:response updateRetentionForbidden
*/
type UpdateRetentionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRetentionForbidden creates UpdateRetentionForbidden with default headers values
func NewUpdateRetentionForbidden() *UpdateRetentionForbidden {

	return &UpdateRetentionForbidden{}
}

// WithXRequestID adds the xRequestId to the update retention forbidden response
func (o *UpdateRetentionForbidden) WithXRequestID(xRequestID string) *UpdateRetentionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update retention forbidden response
func (o *UpdateRetentionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update retention forbidden response
func (o *UpdateRetentionForbidden) WithPayload(payload *models.Errors) *UpdateRetentionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update retention forbidden response
func (o *UpdateRetentionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRetentionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRetentionInternalServerErrorCode is the HTTP code returned for type UpdateRetentionInternalServerError
const UpdateRetentionInternalServerErrorCode int = 500

/*UpdateRetentionInternalServerError Internal server error

swagger:response updateRetentionInternalServerError
*/
type UpdateRetentionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateRetentionInternalServerError creates UpdateRetentionInternalServerError with default headers values
func NewUpdateRetentionInternalServerError() *UpdateRetentionInternalServerError {

	return &UpdateRetentionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update retention internal server error response
func (o *UpdateRetentionInternalServerError) WithXRequestID(xRequestID string) *UpdateRetentionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update retention internal server error response
func (o *UpdateRetentionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update retention internal server error response
func (o *UpdateRetentionInternalServerError) WithPayload(payload *models.Errors) *UpdateRetentionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update retention internal server error response
func (o *UpdateRetentionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRetentionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
