// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigurationsResponse configurations response
//
// swagger:model ConfigurationsResponse
type ConfigurationsResponse struct {

	// The auth mode of current system, such as "db_auth", "ldap_auth", "oidc_auth"
	AuthMode *StringConfigItem `json:"auth_mode,omitempty"`

	// The sender name for Email notification.
	EmailFrom *StringConfigItem `json:"email_from,omitempty"`

	// The hostname of SMTP server that sends Email notification.
	EmailHost *StringConfigItem `json:"email_host,omitempty"`

	// By default it's empty so the email_username is picked
	EmailIdentity *StringConfigItem `json:"email_identity,omitempty"`

	// Whether or not the certificate will be verified when Harbor tries to access the email server.
	EmailInsecure *BoolConfigItem `json:"email_insecure,omitempty"`

	// The port of SMTP server
	EmailPort *IntegerConfigItem `json:"email_port,omitempty"`

	// When it''s set to true the system will access Email server via TLS by default.  If it''s set to false, it still will handle "STARTTLS" from server side.
	EmailSsl *BoolConfigItem `json:"email_ssl,omitempty"`

	// The username for authenticate against SMTP server
	EmailUsername *StringConfigItem `json:"email_username,omitempty"`

	// The group which has the harbor admin privileges
	HTTPAuthproxyAdminGroups *StringConfigItem `json:"http_authproxy_admin_groups,omitempty"`

	// The usernames which has the harbor admin privileges
	HTTPAuthproxyAdminUsernames *StringConfigItem `json:"http_authproxy_admin_usernames,omitempty"`

	// The endpoint of the HTTP auth
	HTTPAuthproxyEndpoint *StringConfigItem `json:"http_authproxy_endpoint,omitempty"`

	// The certificate of the HTTP auth provider
	HTTPAuthproxyServerCertificate *StringConfigItem `json:"http_authproxy_server_certificate,omitempty"`

	// Search user before onboard
	HTTPAuthproxySkipSearch *BoolConfigItem `json:"http_authproxy_skip_search,omitempty"`

	// The token review endpoint
	HTTPAuthproxyTokenreviewEndpoint *StringConfigItem `json:"http_authproxy_tokenreview_endpoint,omitempty"`

	// Verify the HTTP auth provider's certificate
	HTTPAuthproxyVerifyCert *BoolConfigItem `json:"http_authproxy_verify_cert,omitempty"`

	// The Base DN for LDAP binding.
	LdapBaseDn *StringConfigItem `json:"ldap_base_dn,omitempty"`

	// The filter for LDAP search
	LdapFilter *StringConfigItem `json:"ldap_filter,omitempty"`

	// Specify the ldap group which have the same privilege with Harbor admin
	LdapGroupAdminDn *StringConfigItem `json:"ldap_group_admin_dn,omitempty"`

	// The attribute which is used as identity of the LDAP group, default is cn.'
	LdapGroupAttributeName *StringConfigItem `json:"ldap_group_attribute_name,omitempty"`

	// The base DN to search LDAP group.
	LdapGroupBaseDn *StringConfigItem `json:"ldap_group_base_dn,omitempty"`

	// The user attribute to identify the group membership
	LdapGroupMembershipAttribute *StringConfigItem `json:"ldap_group_membership_attribute,omitempty"`

	// The filter to search the ldap group
	LdapGroupSearchFilter *StringConfigItem `json:"ldap_group_search_filter,omitempty"`

	// The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''
	LdapGroupSearchScope *IntegerConfigItem `json:"ldap_group_search_scope,omitempty"`

	// The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
	LdapScope *IntegerConfigItem `json:"ldap_scope,omitempty"`

	// The DN of the user to do the search.
	LdapSearchDn *StringConfigItem `json:"ldap_search_dn,omitempty"`

	// Timeout in seconds for connection to LDAP server
	LdapTimeout *IntegerConfigItem `json:"ldap_timeout,omitempty"`

	// The attribute which is used as identity for the LDAP binding, such as "CN" or "SAMAccountname"
	LdapUID *StringConfigItem `json:"ldap_uid,omitempty"`

	// The URL of LDAP server
	LdapURL *StringConfigItem `json:"ldap_url,omitempty"`

	// Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.
	LdapVerifyCert *BoolConfigItem `json:"ldap_verify_cert,omitempty"`

	// Enable notification
	NotificationEnable *BoolConfigItem `json:"notification_enable,omitempty"`

	// The OIDC group which has the harbor admin privileges
	OIDCAdminGroup *StringConfigItem `json:"oidc_admin_group,omitempty"`

	// Auto onboard the OIDC user
	OIDCAutoOnboard *BoolConfigItem `json:"oidc_auto_onboard,omitempty"`

	// The client ID of the OIDC provider
	OIDCClientID *StringConfigItem `json:"oidc_client_id,omitempty"`

	// The endpoint of the OIDC provider
	OIDCEndpoint *StringConfigItem `json:"oidc_endpoint,omitempty"`

	// Extra parameters to add when redirect request to OIDC provider
	OIDCExtraRedirectParms *StringConfigItem `json:"oidc_extra_redirect_parms,omitempty"`

	// The attribute claims the group name
	OIDCGroupsClaim *StringConfigItem `json:"oidc_groups_claim,omitempty"`

	// The OIDC provider name
	OIDCName *StringConfigItem `json:"oidc_name,omitempty"`

	// The scope of the OIDC provider
	OIDCScope *StringConfigItem `json:"oidc_scope,omitempty"`

	// The attribute claims the username
	OIDCUserClaim *StringConfigItem `json:"oidc_user_claim,omitempty"`

	// Verify the OIDC provider's certificate'
	OIDCVerifyCert *BoolConfigItem `json:"oidc_verify_cert,omitempty"`

	// Indicate who can create projects, it could be ''adminonly'' or ''everyone''.
	ProjectCreationRestriction *StringConfigItem `json:"project_creation_restriction,omitempty"`

	// Enable quota per project
	QuotaPerProjectEnable *BoolConfigItem `json:"quota_per_project_enable,omitempty"`

	// The flag to indicate whether Harbor is in readonly mode.
	ReadOnly *BoolConfigItem `json:"read_only,omitempty"`

	// The rebot account name prefix
	RobotNamePrefix *StringConfigItem `json:"robot_name_prefix,omitempty"`

	// The robot account token duration in days
	RobotTokenDuration *IntegerConfigItem `json:"robot_token_duration,omitempty"`

	// scan all policy
	ScanAllPolicy *ConfigurationsResponseScanAllPolicy `json:"scan_all_policy,omitempty"`

	// Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.
	SelfRegistration *BoolConfigItem `json:"self_registration,omitempty"`

	// The storage quota per project
	StoragePerProject *IntegerConfigItem `json:"storage_per_project,omitempty"`

	// The expiration time of the token for internal Registry, in minutes.
	TokenExpiration *IntegerConfigItem `json:"token_expiration,omitempty"`

	// The client id of UAA
	UaaClientID *StringConfigItem `json:"uaa_client_id,omitempty"`

	// The client secret of the UAA
	UaaClientSecret *StringConfigItem `json:"uaa_client_secret,omitempty"`

	// The endpoint of the UAA
	UaaEndpoint *StringConfigItem `json:"uaa_endpoint,omitempty"`

	// Verify the certificate in UAA server
	UaaVerifyCert *BoolConfigItem `json:"uaa_verify_cert,omitempty"`
}

// Validate validates this configurations response
func (m *ConfigurationsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailInsecure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailSsl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxyAdminGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxyAdminUsernames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxyEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxyServerCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxySkipSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxyTokenreviewEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAuthproxyVerifyCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapBaseDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupAdminDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupAttributeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupBaseDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupMembershipAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupSearchFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapGroupSearchScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapSearchDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapVerifyCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCAdminGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCAutoOnboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCExtraRedirectParms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCGroupsClaim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCUserClaim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOIDCVerifyCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectCreationRestriction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaPerProjectEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRobotNamePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRobotTokenDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanAllPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePerProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUaaClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUaaClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUaaEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUaaVerifyCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationsResponse) validateAuthMode(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMode) { // not required
		return nil
	}

	if m.AuthMode != nil {
		if err := m.AuthMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_mode")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailFrom) { // not required
		return nil
	}

	if m.EmailFrom != nil {
		if err := m.EmailFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_from")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailHost(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailHost) { // not required
		return nil
	}

	if m.EmailHost != nil {
		if err := m.EmailHost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_host")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailIdentity) { // not required
		return nil
	}

	if m.EmailIdentity != nil {
		if err := m.EmailIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_identity")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailInsecure(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailInsecure) { // not required
		return nil
	}

	if m.EmailInsecure != nil {
		if err := m.EmailInsecure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_insecure")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailPort(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailPort) { // not required
		return nil
	}

	if m.EmailPort != nil {
		if err := m.EmailPort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_port")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailSsl(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailSsl) { // not required
		return nil
	}

	if m.EmailSsl != nil {
		if err := m.EmailSsl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_ssl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateEmailUsername(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailUsername) { // not required
		return nil
	}

	if m.EmailUsername != nil {
		if err := m.EmailUsername.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email_username")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxyAdminGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxyAdminGroups) { // not required
		return nil
	}

	if m.HTTPAuthproxyAdminGroups != nil {
		if err := m.HTTPAuthproxyAdminGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_admin_groups")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxyAdminUsernames(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxyAdminUsernames) { // not required
		return nil
	}

	if m.HTTPAuthproxyAdminUsernames != nil {
		if err := m.HTTPAuthproxyAdminUsernames.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_admin_usernames")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxyEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxyEndpoint) { // not required
		return nil
	}

	if m.HTTPAuthproxyEndpoint != nil {
		if err := m.HTTPAuthproxyEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxyServerCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxyServerCertificate) { // not required
		return nil
	}

	if m.HTTPAuthproxyServerCertificate != nil {
		if err := m.HTTPAuthproxyServerCertificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_server_certificate")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxySkipSearch(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxySkipSearch) { // not required
		return nil
	}

	if m.HTTPAuthproxySkipSearch != nil {
		if err := m.HTTPAuthproxySkipSearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_skip_search")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxyTokenreviewEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxyTokenreviewEndpoint) { // not required
		return nil
	}

	if m.HTTPAuthproxyTokenreviewEndpoint != nil {
		if err := m.HTTPAuthproxyTokenreviewEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_tokenreview_endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateHTTPAuthproxyVerifyCert(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPAuthproxyVerifyCert) { // not required
		return nil
	}

	if m.HTTPAuthproxyVerifyCert != nil {
		if err := m.HTTPAuthproxyVerifyCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_authproxy_verify_cert")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapBaseDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapBaseDn) { // not required
		return nil
	}

	if m.LdapBaseDn != nil {
		if err := m.LdapBaseDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_base_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapFilter) { // not required
		return nil
	}

	if m.LdapFilter != nil {
		if err := m.LdapFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupAdminDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupAdminDn) { // not required
		return nil
	}

	if m.LdapGroupAdminDn != nil {
		if err := m.LdapGroupAdminDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_admin_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupAttributeName(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupAttributeName) { // not required
		return nil
	}

	if m.LdapGroupAttributeName != nil {
		if err := m.LdapGroupAttributeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_attribute_name")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupBaseDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupBaseDn) { // not required
		return nil
	}

	if m.LdapGroupBaseDn != nil {
		if err := m.LdapGroupBaseDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_base_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupMembershipAttribute(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupMembershipAttribute) { // not required
		return nil
	}

	if m.LdapGroupMembershipAttribute != nil {
		if err := m.LdapGroupMembershipAttribute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_membership_attribute")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupSearchFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupSearchFilter) { // not required
		return nil
	}

	if m.LdapGroupSearchFilter != nil {
		if err := m.LdapGroupSearchFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_search_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapGroupSearchScope(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapGroupSearchScope) { // not required
		return nil
	}

	if m.LdapGroupSearchScope != nil {
		if err := m.LdapGroupSearchScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_group_search_scope")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapScope(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapScope) { // not required
		return nil
	}

	if m.LdapScope != nil {
		if err := m.LdapScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_scope")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapSearchDn(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapSearchDn) { // not required
		return nil
	}

	if m.LdapSearchDn != nil {
		if err := m.LdapSearchDn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_search_dn")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapTimeout) { // not required
		return nil
	}

	if m.LdapTimeout != nil {
		if err := m.LdapTimeout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_timeout")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapUID(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapUID) { // not required
		return nil
	}

	if m.LdapUID != nil {
		if err := m.LdapUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_uid")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapURL(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapURL) { // not required
		return nil
	}

	if m.LdapURL != nil {
		if err := m.LdapURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_url")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateLdapVerifyCert(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapVerifyCert) { // not required
		return nil
	}

	if m.LdapVerifyCert != nil {
		if err := m.LdapVerifyCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_verify_cert")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateNotificationEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationEnable) { // not required
		return nil
	}

	if m.NotificationEnable != nil {
		if err := m.NotificationEnable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_enable")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCAdminGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCAdminGroup) { // not required
		return nil
	}

	if m.OIDCAdminGroup != nil {
		if err := m.OIDCAdminGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_admin_group")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCAutoOnboard(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCAutoOnboard) { // not required
		return nil
	}

	if m.OIDCAutoOnboard != nil {
		if err := m.OIDCAutoOnboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_auto_onboard")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCClientID) { // not required
		return nil
	}

	if m.OIDCClientID != nil {
		if err := m.OIDCClientID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_client_id")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCEndpoint) { // not required
		return nil
	}

	if m.OIDCEndpoint != nil {
		if err := m.OIDCEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCExtraRedirectParms(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCExtraRedirectParms) { // not required
		return nil
	}

	if m.OIDCExtraRedirectParms != nil {
		if err := m.OIDCExtraRedirectParms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_extra_redirect_parms")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCGroupsClaim(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCGroupsClaim) { // not required
		return nil
	}

	if m.OIDCGroupsClaim != nil {
		if err := m.OIDCGroupsClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_groups_claim")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCName(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCName) { // not required
		return nil
	}

	if m.OIDCName != nil {
		if err := m.OIDCName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_name")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCScope(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCScope) { // not required
		return nil
	}

	if m.OIDCScope != nil {
		if err := m.OIDCScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_scope")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCUserClaim(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCUserClaim) { // not required
		return nil
	}

	if m.OIDCUserClaim != nil {
		if err := m.OIDCUserClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_user_claim")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateOIDCVerifyCert(formats strfmt.Registry) error {

	if swag.IsZero(m.OIDCVerifyCert) { // not required
		return nil
	}

	if m.OIDCVerifyCert != nil {
		if err := m.OIDCVerifyCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc_verify_cert")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateProjectCreationRestriction(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectCreationRestriction) { // not required
		return nil
	}

	if m.ProjectCreationRestriction != nil {
		if err := m.ProjectCreationRestriction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_creation_restriction")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateQuotaPerProjectEnable(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaPerProjectEnable) { // not required
		return nil
	}

	if m.QuotaPerProjectEnable != nil {
		if err := m.QuotaPerProjectEnable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota_per_project_enable")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateReadOnly(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadOnly) { // not required
		return nil
	}

	if m.ReadOnly != nil {
		if err := m.ReadOnly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("read_only")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateRobotNamePrefix(formats strfmt.Registry) error {

	if swag.IsZero(m.RobotNamePrefix) { // not required
		return nil
	}

	if m.RobotNamePrefix != nil {
		if err := m.RobotNamePrefix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("robot_name_prefix")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateRobotTokenDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.RobotTokenDuration) { // not required
		return nil
	}

	if m.RobotTokenDuration != nil {
		if err := m.RobotTokenDuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("robot_token_duration")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateScanAllPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ScanAllPolicy) { // not required
		return nil
	}

	if m.ScanAllPolicy != nil {
		if err := m.ScanAllPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_all_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateSelfRegistration(formats strfmt.Registry) error {

	if swag.IsZero(m.SelfRegistration) { // not required
		return nil
	}

	if m.SelfRegistration != nil {
		if err := m.SelfRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_registration")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateStoragePerProject(formats strfmt.Registry) error {

	if swag.IsZero(m.StoragePerProject) { // not required
		return nil
	}

	if m.StoragePerProject != nil {
		if err := m.StoragePerProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_per_project")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateTokenExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenExpiration) { // not required
		return nil
	}

	if m.TokenExpiration != nil {
		if err := m.TokenExpiration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_expiration")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateUaaClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.UaaClientID) { // not required
		return nil
	}

	if m.UaaClientID != nil {
		if err := m.UaaClientID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uaa_client_id")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateUaaClientSecret(formats strfmt.Registry) error {

	if swag.IsZero(m.UaaClientSecret) { // not required
		return nil
	}

	if m.UaaClientSecret != nil {
		if err := m.UaaClientSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uaa_client_secret")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateUaaEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.UaaEndpoint) { // not required
		return nil
	}

	if m.UaaEndpoint != nil {
		if err := m.UaaEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uaa_endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationsResponse) validateUaaVerifyCert(formats strfmt.Registry) error {

	if swag.IsZero(m.UaaVerifyCert) { // not required
		return nil
	}

	if m.UaaVerifyCert != nil {
		if err := m.UaaVerifyCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uaa_verify_cert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationsResponse) UnmarshalBinary(b []byte) error {
	var res ConfigurationsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigurationsResponseScanAllPolicy configurations response scan all policy
//
// swagger:model ConfigurationsResponseScanAllPolicy
type ConfigurationsResponseScanAllPolicy struct {

	// parameter
	Parameter *ConfigurationsResponseScanAllPolicyParameter `json:"parameter,omitempty"`

	// The type of scan all policy, currently the valid values are "none" and "daily"
	Type string `json:"type,omitempty"`
}

// Validate validates this configurations response scan all policy
func (m *ConfigurationsResponseScanAllPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationsResponseScanAllPolicy) validateParameter(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	if m.Parameter != nil {
		if err := m.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_all_policy" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicy) UnmarshalBinary(b []byte) error {
	var res ConfigurationsResponseScanAllPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigurationsResponseScanAllPolicyParameter The parameters of the policy, the values are dependent on the type of the policy.
//
// swagger:model ConfigurationsResponseScanAllPolicyParameter
type ConfigurationsResponseScanAllPolicyParameter struct {

	// The offset in seconds of UTC 0 o'clock, only valid when the policy type is "daily"
	DailyTime int64 `json:"daily_time,omitempty"`
}

// Validate validates this configurations response scan all policy parameter
func (m *ConfigurationsResponseScanAllPolicyParameter) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicyParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationsResponseScanAllPolicyParameter) UnmarshalBinary(b []byte) error {
	var res ConfigurationsResponseScanAllPolicyParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
